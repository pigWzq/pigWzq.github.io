<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javaEE</title>
      <link href="/2023/05/29/2023-5-29-javaEE/"/>
      <url>/2023/05/29/2023-5-29-javaEE/</url>
      
        <content type="html"><![CDATA[<h2 id="javaEE笔记"><a href="#javaEE笔记" class="headerlink" title="javaEE笔记"></a>javaEE笔记</h2><h3 id="遇到的问题一"><a href="#遇到的问题一" class="headerlink" title="遇到的问题一"></a>遇到的问题一</h3><p>在idea中右击新建没有servlet选项</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>点击文件当中的项目结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291639421.png" alt="image-20230529163938335"></p><p>在Facet中找到该项目，在源根中勾选两个选项，点击确定</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291641522.png" alt="image-20230529164134434"></p><p>至此，返回对应的文件夹，右击新建即可看到servlet选项</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291642126.png" alt="image-20230529164251990"></p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库原理</title>
      <link href="/2023/05/24/2023-5-24-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/"/>
      <url>/2023/05/24/2023-5-24-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库原理"><a href="#数据库原理" class="headerlink" title="数据库原理"></a>数据库原理</h2><h3 id="数据库的四个基本概念"><a href="#数据库的四个基本概念" class="headerlink" title="数据库的四个基本概念"></a>数据库的四个基本概念</h3><p>数据是数据库中存储的基本对象</p><h4 id="数据的定义"><a href="#数据的定义" class="headerlink" title="数据的定义"></a>数据的定义</h4><p>描述事物的符号记录</p><h4 id="数据的种类"><a href="#数据的种类" class="headerlink" title="数据的种类"></a>数据的种类</h4><p>文字、图形、图像、声音、数字、视频等</p><h4 id="数据的特点"><a href="#数据的特点" class="headerlink" title="数据的特点"></a>数据的特点</h4><p>数据与语义是不可分的</p><h4 id="计算机记录"><a href="#计算机记录" class="headerlink" title="计算机记录"></a>计算机记录</h4><p>记录是计算机中表示和存储数据的一种形式</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>长期存储在计算机内、有组织的、可共享的大量数据的集合</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余性较小</li><li>数据独立性高</li><li>易扩展</li></ul><h3 id="数据库管理系统（DBMS）"><a href="#数据库管理系统（DBMS）" class="headerlink" title="数据库管理系统（DBMS）"></a>数据库管理系统（DBMS）</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>位于用户与操作系统之间的一层数据管理软件</p><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p>科学地组织和存储数据、高效地获取和维护数据</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><h5 id="数据定义功能"><a href="#数据定义功能" class="headerlink" title="数据定义功能"></a>数据定义功能</h5><p>DBMS提高数据定义语言（DDL）对数据库中的数据对象的组成与结构进行定义</p><h5 id="数据组织、存储和管理"><a href="#数据组织、存储和管理" class="headerlink" title="数据组织、存储和管理"></a>数据组织、存储和管理</h5><p>提高存储空间利用率和方便存取，提供多种存取方法（索引查找、hash查找、顺序查找等）提高存取效率</p><h5 id="数据操纵功能"><a href="#数据操纵功能" class="headerlink" title="数据操纵功能"></a>数据操纵功能</h5><p>DBMS提高数据操作语言（DML）操纵数据实现对数据库的基本操作（增删改查）</p><h5 id="数据库的事物管理和运行管理"><a href="#数据库的事物管理和运行管理" class="headerlink" title="数据库的事物管理和运行管理"></a>数据库的事物管理和运行管理</h5><p>保证数据的安全性、完整性、多用户对数据的并发使用、发生故障后的系统恢复</p><h5 id="数据库的建立和维护功能"><a href="#数据库的建立和维护功能" class="headerlink" title="数据库的建立和维护功能"></a>数据库的建立和维护功能</h5><p>数据库数据批量装载、数据库转储、介质故障恢复、数据库的重组织以及性能监视</p><h5 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h5><p>与网络中的其他软件系统的通信功能，数据转换功能，异构数据库之间的互访和互操功能等</p><h3 id="数据库系统（DBS）"><a href="#数据库系统（DBS）" class="headerlink" title="数据库系统（DBS）"></a>数据库系统（DBS）</h3><p>由数据库、数据库管理系统（及应用开发工具）、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统。</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><ul><li>概念模型也称信息模型，它是按用户的观点来对数据和信息建模，主要用于数据库设计。</li><li>数据模型主要包括网状模型、层次模型、关系模型等，它是按计算机系统的观点对数据进行建模，描述数据在系统内部的表示方式和存取方法。</li></ul><h4 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h4><ul><li>实体（Entity）：客观存在并可相互区别的事物成为实体，可以是具体的人、事、物或抽象的概念。</li><li>属性(Attribute)：实体所具有的某一特性称为属性，一个实体可以由若干个属性来刻画。</li><li>码(Key)：唯一标识实体的属性集称为码。</li><li>域(Domain)：属性的取值范围称为该属性的域。</li><li>实体型(Entity Type)：用实体名及其属性名集合来抽象和刻画同类实体称为实体型。</li><li>实体集(Entity Set)：同型实体的集合称实体集。</li><li>联系(Relationship)：现实世界中事物内部及其事物之间的联系在信息世界中反映为实体内部的联系和实体之间的联系。</li></ul><h5 id="两个实体之间的联系"><a href="#两个实体之间的联系" class="headerlink" title="两个实体之间的联系"></a>两个实体之间的联系</h5><ol><li>一对一联系</li><li>一对多联系</li><li>多对多联系</li></ol><h5 id="实体表示方法：E-R图"><a href="#实体表示方法：E-R图" class="headerlink" title="实体表示方法：E-R图"></a>实体表示方法：E-R图</h5><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121834929.png" alt="image-20230612183423816"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121835769.png" alt="image-20230612183500671"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121835276.png" alt="image-20230612183536146"></p><h4 id="组成要素"><a href="#组成要素" class="headerlink" title="组成要素"></a>组成要素</h4><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><p>描述数据库的组成对象以及对象之间的联系。一类是对象的类型内容等；一类是对象之间的关系。</p><h5 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h5><p>对数据库中各种对象的实例允许执行操作的集合</p><h5 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h5><p>数据及其联系所具有的制约和依存规则</p><h4 id="常用的数据模型"><a href="#常用的数据模型" class="headerlink" title="常用的数据模型"></a>常用的数据模型</h4><h5 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h5><p>层次模型数据结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121923197.png" alt="image-20230612192350095"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121924638.png" alt="image-20230612192454540"></p><p> <img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121926474.png" alt="image-20230612192624372"></p><h5 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h5><p>网状模型数据结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121932660.png" alt="image-20230612193246557"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121951255.png" alt="image-20230612195148170"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#</title>
      <link href="/2023/05/14/2023-5-14-C/"/>
      <url>/2023/05/14/2023-5-14-C/</url>
      
        <content type="html"><![CDATA[<h2 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h2><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>值类型的数据结构，单一变量存储各种数据类型。</p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>struct关键字创建</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>1.可定义构造函数，不能定义析构函数和无参构造函数</p><p>2.不能继承其他结构或者类，但是可以实验一个或者多个接口</p><p>3.结构成员不能指定为abstract、virtual、protected</p><p>4.可以不使用New操作符进行实例化</p><h4 id="结构与类的比较"><a href="#结构与类的比较" class="headerlink" title="结构与类的比较"></a>结构与类的比较</h4><p>1.类是引用类型，结构是值类型</p><p>2.结构不能声明无参构造函数</p><p>3，结构不支持继承</p><p>4.结构中声明的字段无法赋予初值</p><p>5.结构体的构造函数中，必须为结构体所有字段赋值</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>值类型，一组命名整型常量</p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>enum关键字声明</p><h4 id="声明语法"><a href="#声明语法" class="headerlink" title="声明语法"></a>声明语法</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> &lt;enum_name&gt;</span><br><span class="line">&#123;</span><br><span class="line">    enumeration list</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>enum_name指定枚举类型的名称</li><li>enumeration list是一个用逗号分隔的标识符列表</li></ul><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>1.枚举列表中的每个符号代表一个整数值，一个比它前面的符号大的整数值。默认情况下，第一个枚举符号的值是0</p><p>2.不能继承和传递继承</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>以关键字class开始，后跟类的名称。类的主体，包含在一对花括号内。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;access specifier&gt; <span class="keyword">class</span>  <span class="title">class_name</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// member variables</span></span><br><span class="line">    &lt;access specifier&gt; &lt;data type&gt; variable1;</span><br><span class="line">    &lt;access specifier&gt; &lt;data type&gt; variable2;</span><br><span class="line">    ...</span><br><span class="line">    &lt;access specifier&gt; &lt;data type&gt; variableN;</span><br><span class="line">    <span class="comment">// member methods</span></span><br><span class="line">    &lt;access specifier&gt; &lt;<span class="keyword">return</span> type&gt; method1(parameter_list)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">    &lt;access specifier&gt; &lt;<span class="keyword">return</span> type&gt; method2(parameter_list)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    &lt;access specifier&gt; &lt;<span class="keyword">return</span> type&gt; methodN(parameter_list)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ul><li>访问标识符<code>&lt;access specifier&gt;</code>指定了对类和成员的访问规则，默认情况下，类的访问标识符是<code>internal</code>，成员的访问标识符是<code>private</code></li><li><code>&lt;data type&gt;</code>指定了变量的类型，<code>&lt;return type&gt;</code>指定了返回方法的数据类型</li><li>点运算符链接了对象的名称和成员的名称</li></ul><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>类的特殊成员函数，当创建类的新对象执行，名称与类的名称完全相同，没有任何返回类型</p><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>类的特殊成员函数，当类的对象超出范围时执行。</p><p>在类的名称前加上一个波浪号（~)作为前缀，不返回值，也不带任何参数</p><p>用于在结束程序（关闭文件、释放内存）之前释放资源。</p><p>不能继承和重载</p><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>static关键字定义类成员</p><p>用于定义常量，直接调用类而不需要创建类的实例获取</p><p>在成员函数或类的定义外部初始化，也可以在类的定义内部初始化静态变量</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>不需要完全重新编写新的数据成员和成员函数，只需要设计一个新的类，继承了已有的类的成员即可。这个已有的类被称为的<strong>基类</strong>，这个新的类被称为<strong>派生类</strong></p><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;访问修饰符&gt; <span class="keyword">class</span> &lt;基类&gt;</span><br><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> &lt;派生类&gt; : &lt;基类&gt;</span><br><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p><strong>C# 不支持多重继承</strong>。但是可以使用接口来实现多重继承。</p><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p>同一个接口，使用不同的实例而执行不同操作</p><h4 id="静态多态性"><a href="#静态多态性" class="headerlink" title="静态多态性"></a>静态多态性</h4><ul><li>函数重载</li><li>运算符重载</li></ul><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>在同一个范围内对相同的函数名有多个定义，可以是参数列表中的<strong>参数类型</strong>不同，也可以是<strong>参数个数</strong>不同，不能只有返回类型不同的函数声明</p><h4 id="动态多态性"><a href="#动态多态性" class="headerlink" title="动态多态性"></a>动态多态性</h4><p>使用关键字 <strong>abstract</strong> 创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。<strong>抽象类</strong>包含抽象方法，抽象方法可被派生类实现。</p><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ul><li>不能创建抽象类的实例</li><li>不能在一个抽象类外部声明一个抽象方法</li><li>在类定义前面放置关键字 <strong>sealed</strong>，可以将类声明为<strong>密封类</strong>。当一个类被声明为 <strong>sealed</strong> 时，它不能被继承。抽象类不能被声明为 sealed。</li></ul><h4 id="虚方法"><a href="#虚方法" class="headerlink" title="虚方法"></a>虚方法</h4><p>当有一个定义在类中的函数需要在继承类中实现时，可以使用<strong>虚方法</strong></p><p>使用关键字 <strong>virtual</strong> 声明，在不同的继承类中有不同的实现</p><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><h4 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h4><p>可以重定义或重载 C# 中内置的运算符，具有特殊名称的函数</p><p>关键字 <strong>operator</strong> 后跟运算符的符号来定义</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OperatorOvlApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="built_in">double</span> length;      <span class="comment">// 长度</span></span><br><span class="line">       <span class="keyword">private</span> <span class="built_in">double</span> breadth;     <span class="comment">// 宽度</span></span><br><span class="line">       <span class="keyword">private</span> <span class="built_in">double</span> height;      <span class="comment">// 高度</span></span><br><span class="line">     </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getVolume</span>()</span></span><br><span class="line">       &#123;</span><br><span class="line">         <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span>(<span class="params"> <span class="built_in">double</span> len </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          length = len;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBreadth</span>(<span class="params"> <span class="built_in">double</span> bre </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          breadth = bre;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span>(<span class="params"> <span class="built_in">double</span> hei </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          height = hei;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重载 + 运算符来把两个 Box 对象相加</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> Box <span class="keyword">operator</span>+ (Box b, Box c)</span><br><span class="line">      &#123;</span><br><span class="line">          Box box = <span class="keyword">new</span> Box();</span><br><span class="line">          box.length = b.length + c.length;</span><br><span class="line">          box.breadth = b.breadth + c.breadth;</span><br><span class="line">          box.height = b.height + c.height;</span><br><span class="line">          <span class="keyword">return</span> box;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> == (Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length == rhs.length &amp;&amp; lhs.height == rhs.height</span><br><span class="line">             &amp;&amp; lhs.breadth == rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> !=(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length != rhs.length || lhs.height != rhs.height</span><br><span class="line">              || lhs.breadth != rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &lt;(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &lt; rhs.length &amp;&amp; lhs.height</span><br><span class="line">              &lt; rhs.height &amp;&amp; lhs.breadth &lt; rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &gt;(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &gt; rhs.length &amp;&amp; lhs.height</span><br><span class="line">              &gt; rhs.height &amp;&amp; lhs.breadth &gt; rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &lt;=(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &lt;= rhs.length &amp;&amp; lhs.height</span><br><span class="line">              &lt;= rhs.height &amp;&amp; lhs.breadth &lt;= rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &gt;=(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &gt;= rhs.length &amp;&amp; lhs.height</span><br><span class="line">             &gt;= rhs.height &amp;&amp; lhs.breadth &gt;= rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> String.Format(<span class="string">&quot;(&#123;0&#125;, &#123;1&#125;, &#123;2&#125;)&quot;</span>, length, breadth, height);</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">class</span> <span class="title">Tester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">        Box Box1 = <span class="keyword">new</span> Box();          <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">        Box Box2 = <span class="keyword">new</span> Box();          <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">        Box Box3 = <span class="keyword">new</span> Box();          <span class="comment">// 声明 Box3，类型为 Box</span></span><br><span class="line">        Box Box4 = <span class="keyword">new</span> Box();</span><br><span class="line">        <span class="built_in">double</span> volume = <span class="number">0.0</span>;   <span class="comment">// 体积</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Box1 详述</span></span><br><span class="line">        Box1.setLength(<span class="number">6.0</span>);</span><br><span class="line">        Box1.setBreadth(<span class="number">7.0</span>);</span><br><span class="line">        Box1.setHeight(<span class="number">5.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Box2 详述</span></span><br><span class="line">        Box2.setLength(<span class="number">12.0</span>);</span><br><span class="line">        Box2.setBreadth(<span class="number">13.0</span>);</span><br><span class="line">        Box2.setHeight(<span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用重载的 ToString() 显示两个盒子</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box1： &#123;0&#125;&quot;</span>, Box1.ToString());</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box2： &#123;0&#125;&quot;</span>, Box2.ToString());</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// Box1 的体积</span></span><br><span class="line">        volume = Box1.getVolume();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box1 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Box2 的体积</span></span><br><span class="line">        volume = Box2.getVolume();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box2 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把两个对象相加</span></span><br><span class="line">        Box3 = Box1 + Box2;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box3： &#123;0&#125;&quot;</span>, Box3.ToString());</span><br><span class="line">        <span class="comment">// Box3 的体积</span></span><br><span class="line">        volume = Box3.getVolume();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box3 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//comparing the boxes</span></span><br><span class="line">        <span class="keyword">if</span> (Box1 &gt; Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 大于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不大于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 &lt; Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 小于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不小于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 &gt;= Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 大于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不大于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 &lt;= Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 小于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不小于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 != Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 等于 Box2&quot;</span>);</span><br><span class="line">        Box4 = Box3;</span><br><span class="line">        <span class="keyword">if</span> (Box3 == Box4)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box3 等于 Box4&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box3 不等于 Box4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Box1： (6, 7, 5)</span><br><span class="line">Box2： (12, 13, 10)</span><br><span class="line">Box1 的体积： 210</span><br><span class="line">Box2 的体积： 1560</span><br><span class="line">Box3： (18, 20, 15)</span><br><span class="line">Box3 的体积： 5400</span><br><span class="line">Box1 不大于 Box2</span><br><span class="line">Box1 小于 Box2</span><br><span class="line">Box1 不大于等于 Box2</span><br><span class="line">Box1 小于等于 Box2</span><br><span class="line">Box1 不等于 Box2</span><br><span class="line">Box3 等于 Box4</span><br></pre></td></tr></table></figure><h4 id="可重载和不可重载运算符"><a href="#可重载和不可重载运算符" class="headerlink" title="可重载和不可重载运算符"></a>可重载和不可重载运算符</h4><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+, -, !, ~, ++, –</td><td>这些一元运算符只有一个操作数，且可以被重载。</td></tr><tr><td>+, -, *, &#x2F;, %</td><td>这些二元运算符带有两个操作数，且可以被重载。</td></tr><tr><td>&#x3D;&#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;</td><td>这些比较运算符可以被重载。</td></tr><tr><td>&amp;&amp;, ||</td><td>这些条件逻辑运算符不能被直接重载。</td></tr><tr><td>+&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D;</td><td>这些赋值运算符不能被重载。</td></tr><tr><td>&#x3D;, ., ?:, -&gt;, new, is, sizeof, typeof</td><td>这些运算符不能被重载。</td></tr></tbody></table><h4 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h4><ul><li>运算符只能采用值参数，不能采用 ref 或 out 参数</li><li>要求成对重载比较运算符。如果重载了&#x3D;&#x3D;，则也必须重载!&#x3D;，否则产生编译错误。比较运算符必须返回bool类型的值</li><li>不允许重载&#x3D;运算符，但如果重载例如+运算符，编译器会自动使用+运算符的重载来执行+&#x3D;运算符的操作</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h4><p>定义了所有类继承接口时应遵循的语法合同。接口定义了语法合同 <strong>“是什么”</strong> 部分，派生类定义了语法合同 <strong>“怎么做”</strong> 部分</p><p>使得实现接口的类或结构在形式上保持一致</p><p>接口本身并不实现任何功能，它只是和声明实现该接口的对象订立一个必须实现哪些行为的契约</p><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><p>使用 <strong>interface</strong> 关键字声明,与类的声明类似。接口声明默认是 public 的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IMyInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodToImplement</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h4><p>如果一个接口继承其他接口，那么实现类或结构就需要实现所有接口的成员</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><h4 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h4><p>提供一种让一组名称与其他名称分隔开的方式。在一个命名空间中声明的类的名称与另一个命名空间中声明的相同的类的名称不冲突。</p><p>以关键字 <strong>namespace</strong> 开始，后跟命名空间的名称</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">namespace_name</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 代码声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="using关键字"><a href="#using关键字" class="headerlink" title="using关键字"></a>using关键字</h4><p><strong>using</strong> 关键字表明程序使用的是给定命名空间中的名称</p><p>使用 <strong>using</strong> 命名空间指令，这样在使用的时候就不用在前面加上命名空间名称。该指令告诉编译器随后的代码使用了指定命名空间中的名称</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> first_space;</span><br><span class="line"><span class="keyword">using</span> second_space;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">abc</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside first_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">efg</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside second_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      abc fc = <span class="keyword">new</span> abc();</span><br><span class="line">      efg sc = <span class="keyword">new</span> efg();</span><br><span class="line">      fc.func();</span><br><span class="line">      sc.func();</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套命名空间"><a href="#嵌套命名空间" class="headerlink" title="嵌套命名空间"></a>嵌套命名空间</h4><p>命名空间可以被嵌套，即您可以在一个命名空间内定义另一个命名空间</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">namespace_name1</span> </span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 代码声明</span></span><br><span class="line">   <span class="keyword">namespace</span> <span class="title">namespace_name2</span> </span><br><span class="line">   &#123;</span><br><span class="line">     <span class="comment">// 代码声明</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用点（.）运算符访问嵌套的命名空间的成员</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace.Nested;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SomeNameSpace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;In SomeNameSpace&quot;</span>);</span><br><span class="line">            Nested.NestedNameSpaceClass.SayHello();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内嵌命名空间</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">Nested</span>  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NestedNameSpaceClass</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;In Nested&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h4><p>在程序执行期间出现的问题</p><p>提供了一种把程序控制权从某个部分转移到另一个部分的方式</p><p>关键字：<strong>try</strong>、<strong>catch</strong>、<strong>finally</strong> 和 <strong>throw</strong></p><ul><li><strong>try</strong>：一个 try 块标识了一个将被激活的特定的异常的代码块。后跟一个或多个 catch 块。</li><li><strong>catch</strong>：程序通过异常处理程序捕获异常。catch 关键字表示异常的捕获。</li><li><strong>finally</strong>：finally 块用于执行给定的语句，不管异常是否被抛出都会执行。例如，如果您打开一个文件，不管是否出现异常文件都要被关闭。</li><li><strong>throw</strong>：当问题出现时，程序抛出一个异常。使用 throw 关键字来完成。</li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 引起异常的语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName e1 )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 错误处理代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName e2 )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 错误处理代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName eN )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 错误处理代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 要执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h4><p>C# 中的异常类主要是直接或间接地派生于 <strong>System.Exception</strong> 类</p><p><strong>System.ApplicationException</strong> 类支持由应用程序生成的异常。所以程序员定义的异常都应派生自该类。</p><p><strong>System.SystemException</strong> 类是所有预定义的系统异常的基类。</p><h4 id="异常处理-1"><a href="#异常处理-1" class="headerlink" title="异常处理"></a>异常处理</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ErrorHandlingApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DivNumbers</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> result;</span><br><span class="line">        DivNumbers()</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">division</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                result = num1 / num2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (DivideByZeroException e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Exception caught: &#123;0&#125;&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Result: &#123;0&#125;&quot;</span>, result);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            DivNumbers d = <span class="keyword">new</span> DivNumbers();</span><br><span class="line">            d.division(<span class="number">25</span>, <span class="number">0</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception caught: System.DivideByZeroException: 尝试除以零。</span><br><span class="line">   在 finalReview.DivNumbers.division(Int32 num1, Int32 num2) 位置 D:\QQ\1766522495\.net应用开发技术\C#\finalReview\finalReview\Program.cs:行号 17</span><br><span class="line">Result: 0</span><br></pre></td></tr></table></figure><h4 id="创建用户自定义异常"><a href="#创建用户自定义异常" class="headerlink" title="创建用户自定义异常"></a>创建用户自定义异常</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UserDefinedException</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">TestTemperature</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Temperature temp = <span class="keyword">new</span> Temperature();</span><br><span class="line">         <span class="keyword">try</span></span><br><span class="line">         &#123;</span><br><span class="line">            temp.showTemp();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span>(TempIsZeroException e)</span><br><span class="line">         &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TempIsZeroException: &#123;0&#125;&quot;</span>, e.Message);</span><br><span class="line">         &#125;</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempIsZeroException</span>: <span class="title">ApplicationException</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TempIsZeroException</span>(<span class="params"><span class="built_in">string</span> message</span>): <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Temperature</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">int</span> temperature = <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTemp</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>(temperature == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">throw</span> (<span class="keyword">new</span> TempIsZeroException(<span class="string">&quot;Zero Temperature found&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Temperature: &#123;0&#125;&quot;</span>, temperature);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TempIsZeroException: Zero Temperature found</span><br></pre></td></tr></table></figure><h3 id="文件的输入与输出"><a href="#文件的输入与输出" class="headerlink" title="文件的输入与输出"></a>文件的输入与输出</h3><h4 id="定义-9"><a href="#定义-9" class="headerlink" title="定义"></a>定义</h4><p>一个存储在磁盘中带有指定名称和目录路径的数据集合</p><p>当打开文件进行读写时，它变成一个 <strong>流</strong>，从根本上说，流是通过通信路径传递的字节序列</p><p>两个主要的流：<strong>输入流</strong> 和 <strong>输出流</strong>。</p><p><strong>输入流</strong>用于从文件读取数据（读操作）</p><p><strong>输出流</strong>用于向文件写入数据（写操作）</p><table><thead><tr><th>I&#x2F;O类</th><th>描述</th></tr></thead><tbody><tr><td>BinaryReader</td><td>从二进制流读取原始数据。</td></tr><tr><td>BinaryWriter</td><td>以二进制格式写入原始数据。</td></tr><tr><td>BufferedStream</td><td>字节流的临时存储。</td></tr><tr><td>Directory</td><td>有助于操作目录结构。</td></tr><tr><td>DirectoryInfo</td><td>用于对目录执行操作。</td></tr><tr><td>DriveInfo</td><td>提供驱动器的信息。</td></tr><tr><td>File</td><td>有助于处理文件。</td></tr><tr><td>FileInfo</td><td>用于对文件执行操作。</td></tr><tr><td>FileStream</td><td>用于文件中任何位置的读写。</td></tr><tr><td>MemoryStream</td><td>用于随机访问存储在内存中的数据流。</td></tr><tr><td>Path</td><td>对路径信息执行操作。</td></tr><tr><td>StreamReader</td><td>用于从字节流中读取字符。</td></tr><tr><td>StreamWriter</td><td>用于向一个流中写入字符。</td></tr><tr><td>StringReader</td><td>用于读取字符串缓冲区。</td></tr><tr><td>StringWriter</td><td>用于写入字符串缓冲区。</td></tr></tbody></table><h4 id="FileStream类"><a href="#FileStream类" class="headerlink" title="FileStream类"></a>FileStream类</h4><p>创建一个 <strong>FileStream</strong> 对象来创建一个新的文件，或打开一个已有的文件</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileStream &lt;object_name&gt; = <span class="keyword">new</span> FileStream( &lt;file_name&gt;,</span><br><span class="line">&lt;FileMode Enumerator&gt;, &lt;FileAccess Enumerator&gt;, &lt;FileShare Enumerator&gt;);</span><br></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>FileMode：枚举定义了各种打开文件的方法</p><ul><li><strong>Append</strong>：打开一个已有的文件，并将光标放置在文件的末尾。如果文件不存在，则创建文件。</li><li><strong>Create</strong>：创建一个新的文件。如果文件已存在，则删除旧文件，然后创建新文件。</li><li><strong>CreateNew</strong>：指定操作系统应创建一个新的文件。如果文件已存在，则抛出异常。</li><li><strong>Open</strong>：打开一个已有的文件。如果文件不存在，则抛出异常。</li><li><strong>OpenOrCreate</strong>：指定操作系统应打开一个已有的文件。如果文件不存在，则用指定的名称创建一个新的文件打开。</li><li><strong>Truncate</strong>：打开一个已有的文件，文件一旦打开，就将被截断为零字节大小。然后我们可以向文件写入全新的数据，但是保留文件的初始创建日期。如果文件不存在，则抛出异常。</li></ul><p>FileAccess：枚举的成员有：<strong>Read</strong>、<strong>ReadWrite</strong> 和 <strong>Write</strong>。</p><p>FileShare</p><ul><li><strong>Inheritable</strong>：允许文件句柄可由子进程继承。Win32 不直接支持此功能。</li><li><strong>None</strong>：谢绝共享当前文件。文件关闭前，打开该文件的任何请求（由此进程或另一进程发出的请求）都将失败。</li><li><strong>Read</strong>：允许随后打开文件读取。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取的请求（由此进程或另一进程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。</li><li><strong>ReadWrite</strong>：允许随后打开文件读取或写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取或写入的请求（由此进程或另一进程发出）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。</li><li><strong>Write</strong>：允许随后打开文件写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行写入的请求（由此进程或另一进过程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。</li><li><strong>Delete</strong>：允许随后删除文件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2023/05/07/2023-5-7-%E7%AE%97%E6%B3%95/"/>
      <url>/2023/05/07/2023-5-7-%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="1-堆排序"><a href="#1-堆排序" class="headerlink" title="1.堆排序"></a>1.堆排序</h4><h5 id="手写一个堆"><a href="#手写一个堆" class="headerlink" title="手写一个堆"></a>手写一个堆</h5><p>假设size表示堆的大小，heap表示当前堆</p><p>①插入一个数：heap[++size]&#x3D;x;up(size);</p><p>②求集合中的最小值:heap[1];</p><p>③删除最小值:heap[1]&#x3D;heap[size];size–;down(1);</p><p>④删除任意一个元素:heap[k]&#x3D;heap[size];size–;down(k);up(k);</p><p>⑤修改任意一个元素heap[k]&#x3D;x;down(k);up(k);</p><h5 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h5><p>一棵完全二叉树，除了最后一层一层结点，上面所有结点都是满的且不存在空的情况，最后一层结点从左到右排列。</p><h5 id="小根堆"><a href="#小根堆" class="headerlink" title="小根堆"></a>小根堆</h5><p>每个点的值都是小于等于左右儿子的值，因此根节点一定是最小值</p><h5 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h5><p>用一维数组存，一号点为根节点，结点x的左儿子的下标是2x，右儿子的下标是2x+1</p><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><p>down(x):如果一个值变大则下移</p><p>up(x)：如果一个值变小则上移</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#创建堆，时间复杂度为<span class="built_in">O</span>(n)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n/<span class="number">2</span>;i;i--)<span class="built_in">down</span>(i);</span><br><span class="line"><span class="meta">#down操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=u;#最小值的下标</span><br><span class="line">    <span class="keyword">if</span>(u*<span class="number">2</span>&lt;=size&amp;&amp;h[u*<span class="number">2</span>]&lt;h[t])t=u*<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(u*<span class="number">2</span>+<span class="number">1</span>&lt;=size&amp;&amp;h[u*<span class="number">2</span>+<span class="number">1</span>]&lt;h[t])t=u*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">    #此时t是最小值的下标</span><br><span class="line">    <span class="keyword">if</span>(u!=t)&#123;#根节点不是最小值</span><br><span class="line">        <span class="built_in">swap</span>(h[u],h[t]);</span><br><span class="line">        <span class="built_in">down</span>(t)</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2023/04/23/2023-4-21-%E8%AE%A1%E7%BB%84/"/>
      <url>/2023/04/23/2023-4-21-%E8%AE%A1%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h2><h3 id="计算机的发展史"><a href="#计算机的发展史" class="headerlink" title="计算机的发展史"></a>计算机的发展史</h3><p>世界上第一台电子计算机<strong>ENIAC</strong>（1946）</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301253663.png" alt="image-20230530125301506"></p><h3 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h3><p>计算机系统包括硬件和软件，其中软件又分为系统软件和应用软件</p><h4 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h4><p>管理整个计算机系统</p><ul><li>语言处理系统 汇编程序 编译程序 解释程序</li><li>操作系统  DOS、UNIX、Windows、Linux、Kylin Linux</li><li>服务性程序 装配 调试 诊断 排错</li><li>数据库管理系统 数据库和数据库管理软件</li><li>网络软件</li></ul><h4 id="应用软件"><a href="#应用软件" class="headerlink" title="应用软件"></a>应用软件</h4><p>按任务需要编制成的各种程序</p><h4 id="软件发展的特点"><a href="#软件发展的特点" class="headerlink" title="软件发展的特点"></a>软件发展的特点</h4><ul><li>开发周期长</li><li>制作成本昂贵</li><li>检测软件产品质量的特殊性</li></ul><h3 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h3><h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4><p>高级语言   虚拟机器M3   用编译程序翻译成汇编语言程序</p><p>汇编语言   虚拟机器M2   用汇编程序翻译成机器语言程序</p><p>操作系统   虚拟机器   用机器语言解释操作系统</p><hr><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><p>机器语言   实际机器M1   用微指令解释机器指令</p><p>微指令系统    微程序机器M0   由硬件直接执行微指令</p><h3 id="计算机的基本组成"><a href="#计算机的基本组成" class="headerlink" title="计算机的基本组成"></a>计算机的基本组成</h3><h4 id="冯诺依曼计算机的特点"><a href="#冯诺依曼计算机的特点" class="headerlink" title="冯诺依曼计算机的特点"></a>冯诺依曼计算机的特点</h4><ol><li>计算机由五大部件组成</li><li>指令和数据以同等地位存于存储器，可按地址寻访</li><li>指令和数据用二进制表示</li><li>指令由操作码和地址码组成</li><li>存储程序</li><li>以运算器为中心</li></ol><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><h4 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291454669.png" alt="image-20230529145413548"></p><p>存储体-存储单元-存储元件</p><h5 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h5><p>存放一串二进制代码</p><h5 id="存储字"><a href="#存储字" class="headerlink" title="存储字"></a>存储字</h5><p>存储单元中二进制代码的组合</p><h5 id="存储字长"><a href="#存储字长" class="headerlink" title="存储字长"></a>存储字长</h5><p>存储单元中二进制代码的位数</p><p>每个存储单元赋予一个地址</p><p>按地址寻访</p><h5 id="MAR"><a href="#MAR" class="headerlink" title="MAR"></a>MAR</h5><p>存储器地址寄存器</p><p>反映存储单元个数</p><h5 id="MDR"><a href="#MDR" class="headerlink" title="MDR"></a>MDR</h5><p>存储器数据寄存器</p><p>反映存储字长</p><h4 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232223531.png" alt="image-20230423222300470"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232217818.png" alt="image-20230423221751690"></p><p>主存-辅存：实现虚拟存储系统，解决了主存容量不够的问题</p><p>Cache-主存：解决了主存和CPU速度不匹配的问题</p><h4 id="存储器的分类"><a href="#存储器的分类" class="headerlink" title="存储器的分类"></a>存储器的分类</h4><h5 id="按层次"><a href="#按层次" class="headerlink" title="按层次"></a>按层次<img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232229335.png" alt="image-20230423222924284"></h5><h5 id="按存储介质"><a href="#按存储介质" class="headerlink" title="按存储介质"></a>按存储介质</h5><p>1.半导体存储器：以半导体器件存储信息，读写速度较快，如主存、Cache</p><p>2.磁表面存储器：以磁性材料存储信息，如磁盘、磁带</p><p>3.光存储器：以光介质存储信息，如DVD、VCD</p><h5 id="存取方式"><a href="#存取方式" class="headerlink" title="存取方式"></a>存取方式</h5><p>1.随机存取存储器（Random Access Memory，RAM):读写任何一个存储单元所需时间都相同，与存储单元所在物理位置无关，如内存条</p><p>2.顺序存取存储器（Sequential Access Memory，SAM):读写一个存储单元所需时间取决于存储单元所在的物理位置，如复读机、录音机</p><p>3.直接存取存储器（Direct Access Memory，DAM):既有随机存取存储器特性，也有顺序存取存储器特性。先直接选取信息所在区域，然后顺序方式存取，速度比SAM快一些，比RAM慢一些，如机械硬盘也就是磁盘</p><p>4.相联存储器（Associative Memory），即可以按内容访问的存储器（Content Addressed Memory，CAM）可以按照内容检索到存储位置进行读写，“快表”就是一种相联存储器</p><p>串行访问存储器：读写某个存储单元所需时间与存储单元的物理位置有关，如SAM，DAM</p><h5 id="信息的可更改性"><a href="#信息的可更改性" class="headerlink" title="信息的可更改性"></a>信息的可更改性</h5><p>1.读写存储器（Read&#x2F;Write Memory):即可读，也可写（如：磁盘、内存、Cache）</p><p>2.只读存储器（Read Only Memory）：只能读，不能写（如实体音乐专辑通常采用CD-ROM，实体电影采用蓝光光碟，BIOS通常写在ROM中）</p><h5 id="信息的可保存性"><a href="#信息的可保存性" class="headerlink" title="信息的可保存性"></a>信息的可保存性</h5><p>1.易失性存储器：断电后，存储信息消失的存储器（主存、Cache）</p><p>2.非易失性存储器：存储信息依然保持的存储器（磁盘、光盘）</p><p>破坏性读出：信息读出后，原存储信息被破坏（DRAM芯片，读出数据后要进行重写）</p><p>非破坏性读出：信息读出后，原存储信息不被破坏（SRAM芯片，磁盘、光盘）</p><h4 id="存储器的性能指标"><a href="#存储器的性能指标" class="headerlink" title="存储器的性能指标"></a>存储器的性能指标</h4><p>1.存储容量：存储字数×字长（如1M×8位）（MDR位数反映存储字长）</p><p>2.单位成本：每位价格&#x3D;总成本&#x2F;总容量</p><p>3.存储速度：数据传输率&#x3D;数据的宽度&#x2F;存储周期（数据的宽度即存储字长）</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232300118.png" alt="image-20230423230020043"></p><h3 id="主存储器的基本组成"><a href="#主存储器的基本组成" class="headerlink" title="主存储器的基本组成"></a>主存储器的基本组成</h3><h4 id="基本的半导体元件及原理"><a href="#基本的半导体元件及原理" class="headerlink" title="基本的半导体元件及原理"></a>基本的半导体元件及原理</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232307621.png" alt="image-20230423230748503"></p><h4 id="存储器芯片的基本原理"><a href="#存储器芯片的基本原理" class="headerlink" title="存储器芯片的基本原理"></a>存储器芯片的基本原理</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232313063.png" alt="image-20230423231326934"></p><h4 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232324235.png" alt="image-20230423232424137"></p><h3 id="DRAM和SRAM"><a href="#DRAM和SRAM" class="headerlink" title="DRAM和SRAM"></a>DRAM和SRAM</h3><p>DRAM（动态RAM）：Dynamic Random Access Memory，用于主存</p><p>SRAM（静态RAM）：Static Random Access Memory，用于Cache</p><p>核心区别：存储元不一样</p><p>DRAM芯片：使用栅极电容存储信息</p><p>SRAM芯片：使用双稳态触发器存储信息</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241219598.png" alt="image-20230424121904352"></p><p>由于电容内的电荷只能维持2ms。即便不断电，2ms后信息也会消失，因此2ms内必须“刷新”一次（给电容充电）</p><h4 id="DRAM的刷新"><a href="#DRAM的刷新" class="headerlink" title="DRAM的刷新"></a>DRAM的刷新</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241539588.png" alt="image-20230424153945407"></p><h4 id="DRAM和SRAM的对比"><a href="#DRAM和SRAM的对比" class="headerlink" title="DRAM和SRAM的对比"></a>DRAM和SRAM的对比</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241542807.png" alt="image-20230424154224651"></p><h3 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h3><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241548631.png" alt="image-20230424154845459"></p><p>主板上的BIOS芯片（ROM）存储了“自举装入程序”，负责引导装入操作系统（开机）。根据程序，CPU指挥IO系统把辅存中存储的操作系统的相关数据放到主存，引导开机。</p><h3 id="主存与CPU的连接"><a href="#主存与CPU的连接" class="headerlink" title="主存与CPU的连接"></a>主存与CPU的连接</h3><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304251622653.png" alt="image-20230425162218518"></p><h3 id="双端口RAM和多模块存储器"><a href="#双端口RAM和多模块存储器" class="headerlink" title="双端口RAM和多模块存储器"></a>双端口RAM和多模块存储器</h3><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304261041560.png" alt="image-20230426104127971"></p><h3 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h3><h4 id="基本组成-1"><a href="#基本组成-1" class="headerlink" title="基本组成"></a>基本组成</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291508871.png" alt="image-20230529150843806"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291518707.png" alt="image-20230529151806640"></p><p>、</p><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><h4 id="基本组成-2"><a href="#基本组成-2" class="headerlink" title="基本组成"></a>基本组成</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291538254.png" alt="image-20230529153834194"></p><p>完成一条指令</p><ul><li>取指令：<strong>PC</strong>（程序计数器）存放当前欲执行指令的地址，具有计数功能（PC）+1-&gt;PC</li><li>分析指令：<strong>IR</strong>（指令寄存器）存放当前欲执行的指令</li><li>执行指令:<strong>CU</strong></li></ul><h3 id="计算机硬件的主要技术指标"><a href="#计算机硬件的主要技术指标" class="headerlink" title="计算机硬件的主要技术指标"></a>计算机硬件的主要技术指标</h3><h4 id="机器字长"><a href="#机器字长" class="headerlink" title="机器字长"></a>机器字长</h4><p><strong>CPU</strong>一次能处理数据位数与<strong>CPU</strong>中的寄存器位数有关</p><h4 id="运算速度"><a href="#运算速度" class="headerlink" title="运算速度"></a>运算速度</h4><ul><li>主频</li><li>核数，每个核支持的线程数</li><li>吉普森法</li><li>CPI：执行一条指令所需时钟周期数</li><li>MIPS：每秒执行百万条指令</li><li>FLOPS：每秒浮点运算次数</li></ul><h4 id="存储容量"><a href="#存储容量" class="headerlink" title="存储容量"></a>存储容量</h4><p>存放二进制信息的总位数</p><h5 id="主存容量"><a href="#主存容量" class="headerlink" title="主存容量"></a>主存容量</h5><ul><li>存储单元个数×存储字长</li><li>字节数</li></ul><h5 id="辅存容量"><a href="#辅存容量" class="headerlink" title="辅存容量"></a>辅存容量</h5><p>字节数</p><h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>总线是连接各个部件的信息传输线，是各个部件共享的的传输介质</p><h4 id="信息的传送"><a href="#信息的传送" class="headerlink" title="信息的传送"></a>信息的传送</h4><p>串行：传输数据一位一位传输，传输距离比较长</p><p>并行：传输数据多位传输，需要多根总线，传输距离比较短</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>以存储器为中心的双总线结构框图</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301339464.png" alt="image-20230530133908385"></p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="片内总线"><a href="#片内总线" class="headerlink" title="片内总线"></a>片内总线</h5><p>芯片内部的总线</p><h5 id="系统总线"><a href="#系统总线" class="headerlink" title="系统总线"></a>系统总线</h5><p>计算机各部件之间的信息传输线</p><ul><li>数据总线：双向，与机器字长、存储字长有关</li><li>地址总线：单向，与存储地址、I&#x2F;O地址有关</li><li>控制总线：有出 有入</li></ul><p>有出：存储器读，存储器写，总线允许、中断确认</p><p>有入：中断请求、总线请求</p><h5 id="通信总线"><a href="#通信总线" class="headerlink" title="通信总线"></a>通信总线</h5><p>用于计算机系统之间或计算机系统与其他系统（如控制仪表、移动通信）之间的通信</p><p>按传输方式分为两类</p><ul><li>串行通信总线</li><li>并行通信总线</li></ul><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>机械特性：尺寸、形状、管脚数及排列顺序</p><p>电气特性：传输方向和有效的电平范围</p><p>功能特性：每根传输线的功能</p><ul><li>地址</li><li>数据</li><li>控制</li></ul><p>时间特性：信号的时序关系</p><h4 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h4><ol><li>总线宽度：数据线的根数</li><li>标准传输率：每秒传输的最大字节数（MBps）</li><li>时钟同步&#x2F;异步：同步、不同步</li><li>总线复用：地址线与数据线复用</li><li>信号线数：地址线、数据线和控制线的总和</li><li>总线控制方式：突发、自动、仲裁、逻辑、计数</li><li>其他指标:负载能力</li></ol><h4 id="总线标准"><a href="#总线标准" class="headerlink" title="总线标准"></a>总线标准</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301356355.png" alt="image-20230530135654251"></p><h4 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h4><h5 id="单总线结构"><a href="#单总线结构" class="headerlink" title="单总线结构"></a>单总线结构</h5><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301400732.png" alt="image-20230530140038637"></p><h5 id="多总线结构"><a href="#多总线结构" class="headerlink" title="多总线结构"></a>多总线结构</h5><p>双总线结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301401336.png" alt="image-20230530140137230"></p><p>三总线结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301403921.png" alt="image-20230530140308828"></p><p>另一种三总线结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301404412.png" alt="image-20230530140427320"></p><p>四总线结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301406060.png" alt="image-20230530140626965"></p><h4 id="总线控制"><a href="#总线控制" class="headerlink" title="总线控制"></a>总线控制</h4><h5 id="总线判优控制"><a href="#总线判优控制" class="headerlink" title="总线判优控制"></a>总线判优控制</h5><h6 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h6><p>主设备（模块）对总线有控制权</p><p>从设备（模块）响应从主设备发来的总线命令</p><h6 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h6><ul><li>集中式</li><li>分布式</li></ul><h5 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h5><ul><li>链式查询</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301415758.png" alt="image-20230530141517661"></p><p>缺点：优先级事先确定，与位置有关，对电路故障敏感</p><p>优点：结构简单，增加设备很容易，优先级算法简单，可靠性设计容易实现，速度慢</p><p>应用：微型计算机、嵌入式系统</p><ul><li>计数器定时查询</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301418371.png" alt="image-20230530141834281"></p><p>优点：优先级确定灵活</p><p>缺点：速度较慢</p><ul><li>独立请求方式</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301423882.png" alt="image-20230530142337784"></p><h5 id="总线通信控制"><a href="#总线通信控制" class="headerlink" title="总线通信控制"></a>总线通信控制</h5><h6 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h6><p>解决通信双方协调配合问题</p><h6 id="总线传输周期"><a href="#总线传输周期" class="headerlink" title="总线传输周期"></a>总线传输周期</h6><ul><li>申请分配阶段：主模块申请，总线仲裁决定</li><li>寻址阶段：主模块向从模块给出地址和命令</li><li>传数阶段：主模块和从模块交换数据</li><li>结束阶段：主从模块撤销有关信息</li></ul><h4 id="总线通信的四种方式"><a href="#总线通信的四种方式" class="headerlink" title="总线通信的四种方式"></a>总线通信的四种方式</h4><ul><li>同步通信：由统一时标控制数据传送，应用于总线长度比较短，各个模块存取时间比较一致</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301529660.png" alt="image-20230530152933567"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301530248.png" alt="image-20230530153004164"></p><ul><li>异步通信：采用应答方式，没有公共时钟标准</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301534669.png" alt="image-20230530153408573"></p><ul><li>半同步通信：同步、异步结合</li></ul><p>同步：发送方用系统时钟前沿发信号、接收方用系统时钟后沿判断、识别</p><p>异步：允许不同速度的模块和谐工作，增加一条“等待”响应信号wait</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301543480.png" alt="image-20230530154328379"></p><h5 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h5><p>一个总线传输周期（以输入数据为例）</p><p>主模块发地址、命令 占用总线</p><p>从模块准备数据 不占用总线 总线空闲</p><p>从模块向主模块发数据 占用总线</p><ul><li>分离式通信：充分挖掘系统总线每个瞬间的潜力</li></ul><p>一个总线周期</p><ul><li>子周期1：主模块申请占用总线，使用完后即放弃总线的使用权</li><li>子周期2：从模块申请占用总线，将各种信息送至总线上</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301554087.png" alt="image-20230530155439004"></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编辑器</title>
      <link href="/2023/04/20/2023-4-20-%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2023/04/20/2023-4-20-%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="编辑器的学习"><a href="#编辑器的学习" class="headerlink" title="编辑器的学习"></a>编辑器的学习</h2><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><h4 id="设置自动保存"><a href="#设置自动保存" class="headerlink" title="设置自动保存"></a>设置自动保存</h4><p>1.打开vscode编辑器，点击左下角设置图标（齿轮形状），点击settings</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304202154534.png" alt="image-20230420215411474"></p><p>2.在用户设置窗口中搜索”auto save”，将“Files: Auto Save”设置为“afterDelay”，那么可以指定等待时间。例如，如果将“afterDelay”设置为5000，则表示编辑器将等待5秒钟后自动保存未保存的更改。</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304202155440.png" alt="image-20230420215546371"></p>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
          <category> vscode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编辑器</title>
      <link href="/2023/04/20/2023-5-29-%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2023/04/20/2023-5-29-%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="编辑器的学习"><a href="#编辑器的学习" class="headerlink" title="编辑器的学习"></a>编辑器的学习</h2><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li>本页查找：Ctrl+F</li><li>查找和替换：Ctrl+R</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
          <category> idea </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM的学习</title>
      <link href="/2023/04/20/2023-4-20-SSM/"/>
      <url>/2023/04/20/2023-4-20-SSM/</url>
      
        <content type="html"><![CDATA[<h2 id="SSM的学习"><a href="#SSM的学习" class="headerlink" title="SSM的学习"></a>SSM的学习</h2><h3 id="spingboot整合ssm"><a href="#spingboot整合ssm" class="headerlink" title="spingboot整合ssm"></a>spingboot整合ssm</h3><h4 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/image-20230420202721323.png"></p><h4 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h4><p>错误通常出现在 Maven 项目中，表示 Maven 在解析依赖关系时无法找到 <code>org.springframework:spring-tx:5.3.7</code> 这个库的版本</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>1.检查你的 Maven 配置文件 pom.xml 中是否有正确的库依赖声明，并且版本号是否正确。</p><p>比如我的项目对应的boot版本类型是2.4.5，Mybatis版本类型是2.2.0</p><p>2.确保你的 Internet 连接正常，并且可以访问 Maven 的仓库</p><h3 id="编写测试方法对查询功能进行测试"><a href="#编写测试方法对查询功能进行测试" class="headerlink" title="编写测试方法对查询功能进行测试"></a>编写测试方法对查询功能进行测试</h3><h4 id="遇到问题-1"><a href="#遇到问题-1" class="headerlink" title="遇到问题"></a>遇到问题</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304212256706.png" alt="image-20230421225606540"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304212257630.png" alt="image-20230421225720541"></p><h4 id="分析问题-1"><a href="#分析问题-1" class="headerlink" title="分析问题"></a>分析问题</h4><p>关于Spring MVC配置的异常。提示信息中提到了”No ServletContext set”，表明在执行WebMvcConfigurationSupport类中的resourceHandlerMapping方法时，无法获取到ServletContext对象，从而导致了异常</p><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><p>注释掉@EnableWebMvc ，具体原因未知，有待探索</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小车</title>
      <link href="/2023/04/20/2023-4-24-%E5%B0%8F%E8%BD%A6/"/>
      <url>/2023/04/20/2023-4-24-%E5%B0%8F%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="小车"><a href="#小车" class="headerlink" title="小车"></a>小车</h2><h3 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h3><h4 id="遇到的问题一"><a href="#遇到的问题一" class="headerlink" title="遇到的问题一"></a>遇到的问题一</h4><p>对于同一个场景测试完再次测试时，会弹出服务器端发生错误的提示信息</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241425987.png" alt="image-20230424142514565"></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>返回上一级目录再回到当前页面测试场景或者点击浏览器的刷新按钮刷新页面</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241428667.png" alt="image-20230424142831278"></p><h4 id="遇到问题二"><a href="#遇到问题二" class="headerlink" title="遇到问题二"></a>遇到问题二</h4><p>打开场景后，出现黑屏，鼠标光标不停闪烁或者鼠标光标变成蓝色圈圈一直旋转</p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><p>等待其自动退出或者强制关闭电脑，然后重启你的电脑</p><h4 id="遇到的问题三"><a href="#遇到的问题三" class="headerlink" title="遇到的问题三"></a>遇到的问题三</h4><p>如果已经下载安装过客户端，在之后的场景又出现下载安装客户端</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241737623.png" alt="image-20230424173740252"></p><h4 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h4><p>无需重复安装，刷新界面，然后点击测试</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241749899.png" alt="image-20230424174927601"></p>]]></content>
      
      
      <categories>
          
          <category> 小车 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三篇文章</title>
      <link href="/2023/04/10/2023-4-13-C/"/>
      <url>/2023/04/10/2023-4-13-C/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第三篇文章"><a href="#这是我的第三篇文章" class="headerlink" title="这是我的第三篇文章"></a>这是我的第三篇文章</h2><p>你的sql语句打印出来看长啥样了吗没有，但是我测试过了没问题，问题就是我不知道怎么去出结果集里面的数据，那个循环会取出数据库里面所有的数据，你测试过程给我看，这样测试的？我打印出来了测试用单元测试，你这样测试多慢？哼，找到就行了呗，习惯，现在用junit。你写单元测试，这和单元测试有什么关系，养成习惯，规范一点，能不能先解决问题，来不及了，来得及，你不是为了完成作业，哼</p><p>你测试dao看service干啥，我看看咋了</p><p>你看，他老是给我打出所有，而且还把我id给改了，你这样看得舒服吗嗯，一串信息放在一起，你</p><p>胃痛，今晚就不应该吃那个冰淇淋，是你早上吃的太少了，我吃了两个为啥我不疼，好痛下次让你更疼</p><p>为啥有的有# 有的没有，不知道看你哪些写错了</p><p>你有没有想过为啥你的sql是灰色的，不知道移上去看看，IDEA功能很强大</p><p>我知道这个，但是我不知道咋用</p><p>好了，现在错误更多了，快睡觉吧一招回到解放前，我本来不报错了，哈哈哈</p><p>ctrl+f 搜索</p><p>junit测试：</p><ol><li>选择要测试的将光标移上去，然后按Alt+enter打开选项，选择要测试的方法，可以全选，</li><li>要测试哪个方法，先看看这个方法里面有哪些参数，然后创建对象比如GoodDaoImpl对象，调用这个方法，把参数传进去进行测试</li><li>一个一个set太麻烦了，可以使用插件：getAllsetter，使用方法：光标放到对象上面，然后按alt+enter，generate all setter with no </li><li>得到结果，不要直接使用sout输出，先List&lt;T&gt; goods &#x3D;…然后再 print一条一条显示goodsList.forEach(System.out::println);</li></ol><p>断点调试</p><ol><li>在你想要程序一步一步走的地方打上断点，</li><li>然后用调试方式运行测试</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二篇文章</title>
      <link href="/2023/04/10/2023-4-13-Hexo/"/>
      <url>/2023/04/10/2023-4-13-Hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第二篇文章"><a href="#这是我的第二篇文章" class="headerlink" title="这是我的第二篇文章"></a>这是我的第二篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/04/10/2023-4-13-Java/"/>
      <url>/2023/04/10/2023-4-13-Java/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四篇文章</title>
      <link href="/2023/04/10/2023-4-13-Python/"/>
      <url>/2023/04/10/2023-4-13-Python/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第四篇文章"><a href="#这是我的第四篇文章" class="headerlink" title="这是我的第四篇文章"></a>这是我的第四篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe {    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;}#page-header {    background: transparent !important;}/* 白天模式遮罩透明 */#footer::before {    background: transparent !important;}#page-header::before {    background: transparent !important;}/* 夜间模式遮罩透明 */[data-theme="dark"] #footer::before {    background: transparent !important;}[data-theme="dark"] #page-header::before {    background: transparent !important;}/* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {    background: #1e1e1e;    color: antiquewhite;}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {    background: #3ecdf1;    color: #f2f2f2;}@font-face {    /* 为载入的字体取名字(随意) */    font-family: 'YSHST';    /* 字体文件地址(相对或者绝对路径都可以) */    src: url(/font/霞鹜文楷.woff2);    /* 定义加粗样式(加粗多少) */    font-weight: normal;    /* 定义字体样式(斜体/非斜体) */    font-style: normal;    /* 定义显示样式 */    font-display: block;}/* 翻页按钮居中 */#pagination {    width: 100%;    margin: auto;}/* 一级菜单居中 */#nav .menus_items {    position: absolute !important;    width: fit-content !important;    left: 50% !important;    transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {    display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(5) .menus_item_child {    left: -38px;}/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {    animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {    animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {    animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {    animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {    0% {        text-shadow: #5636ed 0 0 15px;    }    12.5% {        text-shadow: #11ee5e 0 0 15px;    }    25% {        text-shadow: #f14747 0 0 15px;    }    37.5% {        text-shadow: #f1a247 0 0 15px;    }    50% {        text-shadow: #f1ee47 0 0 15px;    }    50% {        text-shadow: #b347f1 0 0 15px;    }    62.5% {        text-shadow: #002afa 0 0 15px;    }    75% {        text-shadow: #ed709b 0 0 15px;    }    87.5% {        text-shadow: #39c5bb 0 0 15px;    }    100% {        text-shadow: #5636ed 0 0 15px;    }}@keyframes light_10px {    0% {        text-shadow: #5636ed 0 0 10px;    }    12.5% {        text-shadow: #11ee5e 0 0 10px;    }    25% {        text-shadow: #f14747 0 0 10px;    }    37.5% {        text-shadow: #f1a247 0 0 10px;    }    50% {        text-shadow: #f1ee47 0 0 10px;    }    50% {        text-shadow: #b347f1 0 0 10px;    }    62.5% {        text-shadow: #002afa 0 0 10px;    }    75% {        text-shadow: #ed709b 0 0 10px;    }    87.5% {        text-shadow: #39c5bb 0 0 10px;    }    100% {        text-shadow: #5636ed 0 0 10px;    }}@keyframes light_5px {    0% {        text-shadow: #5636ed 0 0 5px;    }    12.5% {        text-shadow: #11ee5e 0 0 5px;    }    25% {        text-shadow: #f14747 0 0 5px;    }    37.5% {        text-shadow: #f1a247 0 0 15px;    }    50% {        text-shadow: #f1ee47 0 0 5px;    }    50% {        text-shadow: #b347f1 0 0 5px;    }    62.5% {        text-shadow: #002afa 0 0 5px;    }    75% {        text-shadow: #ed709b 0 0 5px;    }    87.5% {        text-shadow: #39c5bb 0 0 5px;    }    100% {        text-shadow: #5636ed 0 0 5px;    }}/* 侧边栏个人信息卡片动态渐变色 */#aside-content>.card-widget.card-info {    background: linear-gradient(-45deg,            #e8d8b9,            #eccec5,            #a3e9eb,            #bdbdf0,            #eec1ea);    box-shadow: 0 0 5px rgb(66, 68, 68);    position: relative;    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}@-moz-keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}@keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content>.card-widget.card-info {    background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content>.card-widget.card-info>#card-info-btn {    background-color: #3eb8be;    border-radius: 8px;}/*菜单图标大小*/svg.menu_icon {    width: 1.28em;    height: 1.28em;    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}/*社交图标大小*/svg.social_icon {    width: 1.20em;    height: 1.20em;    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><div id="gitZone"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { now.setTime(now.getTime() + 1e3); var e = new Date("04/010/2023 00:00:00"), t = Math.trunc(234e8 + (now - e) / 1e3 * 17), a = (t / 1496e5).toFixed(6), o = new Date("04/12/2023 00:00:00"), n = (now - o) / 1e3 / 60 / 60 / 24, r = Math.floor(n), i = (now - o) / 1e3 / 60 / 60 - 24 * r, s = Math.floor(i); 1 == String(s).length && (s = "0" + s); var d = (now - o) / 1e3 / 60 - 1440 * r - 60 * s, l = Math.floor(d); 1 == String(l).length && (l = "0" + l); var g = (now - o) / 1e3 - 86400 * r - 3600 * s - 60 * l, b = Math.round(g); 1 == String(b).length && (b = "0" + b); let c = ""; c = s < 18 && s >= 9 ? `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>` : `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = c) } setInterval((() => { createtime() }), 1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() { window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame; var n, e, i, h, t = .05, s = document.getElementById("universe"), o = !0, a = "180,184,240", r = "226,225,142", d = "226,225,224", c = []; function f() { n = window.innerWidth, e = window.innerHeight, i = .216 * n, s.setAttribute("width", n), s.setAttribute("height", e) } function u() { h.clearRect(0, 0, n, e); for (var t = c.length, i = 0; i < t; i++) { var s = c[i]; s.move(), s.fadeIn(), s.fadeOut(), s.draw() } } function y() { this.reset = function () { this.giant = m(3), this.comet = !this.giant && !o && m(10), this.x = l(0, n - 10), this.y = l(0, e), this.r = l(1.1, 2.6), this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t, this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120), this.fadingOut = null, this.fadingIn = !0, this.opacity = 0, this.opacityTresh = l(.2, 1 - .4 * (this.comet + 1 - 1)), this.do = l(5e-4, .002) + .001 * (this.comet + 1 - 1) }, this.fadeIn = function () { this.fadingIn && (this.fadingIn = !(this.opacity > this.opacityTresh), this.opacity += this.do) }, this.fadeOut = function () { this.fadingOut && (this.fadingOut = !(this.opacity < 0), this.opacity -= this.do / 2, (this.x > n || this.y < 0) && (this.fadingOut = !1, this.reset())) }, this.draw = function () { if (h.beginPath(), this.giant) h.fillStyle = "rgba(" + a + "," + this.opacity + ")", h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1); else if (this.comet) { h.fillStyle = "rgba(" + d + "," + this.opacity + ")", h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1); for (var t = 0; t < 30; t++)h.fillStyle = "rgba(" + d + "," + (this.opacity - this.opacity / 20 * t) + ")", h.rect(this.x - this.dx / 4 * t, this.y - this.dy / 4 * t - 2, 2, 2), h.fill() } else h.fillStyle = "rgba(" + r + "," + this.opacity + ")", h.rect(this.x, this.y, this.r, this.r); h.closePath(), h.fill() }, this.move = function () { this.x += this.dx, this.y += this.dy, !1 === this.fadingOut && this.reset(), (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0) }, setTimeout(function () { o = !1 }, 50) } function m(t) { return Math.floor(1e3 * Math.random()) + 1 < 10 * t } function l(t, i) { return Math.random() * (i - t) + t } f(), window.addEventListener("resize", f, !1), function () { h = s.getContext("2d"); for (var t = 0; t < i; t++)c[t] = new y, c[t].reset(); u() }(), function t() { document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark' && u(), window.requestAnimationFrame(t) }() };dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
