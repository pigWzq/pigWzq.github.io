<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/12/04/2023-12-4-%E5%AE%89%E5%8D%93%E5%A4%8D%E4%B9%A0/"/>
      <url>/2023/12/04/2023-12-4-%E5%AE%89%E5%8D%93%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: 移动互联网技术</span><br><span class="line">description: 安卓复习</span><br><span class="line">date: 2023-12-4 15:28:00</span><br><span class="line">update: 2023-12-4 15:58:00</span><br><span class="line">tags:</span><br><span class="line">  - 计算机</span><br><span class="line">categories:</span><br><span class="line">  - 安卓</span><br><span class="line">swiper_index: 16</span><br></pre></td></tr></table></figure><h2 id="安卓复习"><a href="#安卓复习" class="headerlink" title="安卓复习"></a>安卓复习</h2><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><ol><li><p><strong>请结合android的体系结构说明，为什么Android选择Java作为上层应用的开发语言。</strong></p><p>四层结构</p><ul><li>应用层：自带应用，拨号应用，短信应用，浏览器等</li><li>应用框架层：为开发者提供了大量的API</li><li>系统运行库层<ul><li>Libraries类库：提供SQLite、Media等功能</li><li>Android Runtime<ul><li>Core Libraries 核心库：提供Java编程的核心库</li><li>Davlik 虚拟机：用来执行Android程序的。每一个Android应用程序都是在一个独立的Davlik虚拟机实例中执行的。</li></ul></li></ul></li><li>Linux内核层：内存管理，进程管理，网络协议，以及驱动模型等核心服务</li></ul><p>原因</p><ul><li><p>广泛的生态系统，Java是一种广泛使用的语言，有庞大而成熟的开发者社区和丰富的第三方库支持。开发人员可以更快速地构建和扩展Android应用程序，解决问题时可以利用大量开源资源。</p></li><li><p>跨平台，通过JVM，安卓应用程序可以再不同硬件和操作系统上运行，便于开发者更高效的开发并将应用程序发布到不同设备上</p></li><li><p>性能优化，安卓平台通过引入JIT编译器，AOT编译器等技术来提升java应用程序的性能，这些优化措施使java在安卓平台上可以提供高效的运行和响应能力</p></li><li><p>良好的安全性，Java具有严格的安全性措施，例如内存管理，异常处理和访问控制等机制，为移动应用程序提供可靠的安全保护，防止恶意代码和漏洞的利用</p></li><li><p>对新手友好，Java语言相对于其他语言来说，相对容易学习和理解，采用简洁明了的语法，提供强大的面向对象编程功能，且拥有丰富的文档和教k程资源，使得初学者和新手开发者可以更容易地进入Android应用开发领域。</p></li></ul></li><li><p><strong>请说明Android Studio和 Android SDK的关系。</strong></p><ul><li>Android Studio是安卓应用开发工具</li><li>Android SDK是一个开发包，提供开发工具给开发者开发安卓</li><li>Android Studio内置了Android SDK</li></ul></li><li><p><strong>AVD Manager,SDK Mannager,DDMS分别是干什么的？</strong></p><ul><li>AVD Manager：创建和管理Android虚拟设备的工具</li><li>SDK Mannager：开发工具包中的一个核心组件，用于管理和更新Android SDK的各种组件</li><li>DDMS：监控和调试Android设备或模拟器上运行的应用程序的调试工具</li></ul></li><li><p><em><strong>请结合HelloWorld程序说明Android中是如何基于MVC模式进行开发的？</strong></em></p></li></ol><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><ol><li><p><em><strong>除了课堂上介绍的设置的监听器的方法，还有哪些办法实现按钮的响应？</strong></em></p></li><li><p><strong>增加两个按钮（prev，next）实现问题的遍历。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TextView mQuestion;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mCurrentIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] mQuestionBank = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;</span><br><span class="line">            R.string.question_australia,</span><br><span class="line">            R.string.question_oceans,</span><br><span class="line">            R.string.question_mideast,</span><br><span class="line">            R.string.question_africa,</span><br><span class="line">            R.string.question_americas,</span><br><span class="line">            R.string.question_asia,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> Button mBtnPrev;</span><br><span class="line">    <span class="keyword">private</span> Button mMBtnNext;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mQuestion = findViewById(R.id.question_text);</span><br><span class="line">        mQuestion.setText(mQuestionBank[mCurrentIndex]);</span><br><span class="line">        mBtnPrev = findViewById(R.id.btnPrev);</span><br><span class="line">        mBtnPrev.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                mCurrentIndex = (mCurrentIndex - <span class="number">1</span> + mQuestionBank.length) % mQuestionBank.length;</span><br><span class="line">                mQuestion.setText(mQuestionBank[mCurrentIndex]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mMBtnNext = findViewById(R.id.btnNext);</span><br><span class="line">        mMBtnNext.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                mCurrentIndex = (mCurrentIndex + <span class="number">1</span>) % mQuestionBank.length;</span><br><span class="line">                mQuestion.setText(mQuestionBank[mCurrentIndex]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>问题描述已经分离在资源文件中，如何将answer也分离在资源文件中？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Question</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mTextId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mAnswerId;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Question</span><span class="params">(<span class="type">int</span> textId, <span class="type">int</span> answerId)</span> &#123;</span><br><span class="line">        mTextId = textId;</span><br><span class="line">        mAnswerId = answerId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mTextId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTextId</span><span class="params">(<span class="type">int</span> textId)</span> &#123;</span><br><span class="line">        mTextId = textId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAnswerId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mAnswerId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnswerId</span><span class="params">(<span class="type">int</span> answerId)</span> &#123;</span><br><span class="line">        mAnswerId = answerId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Question&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;mTextId=&quot;</span> + mTextId +</span><br><span class="line">                <span class="string">&quot;, mAnswerId=&quot;</span> + mAnswerId +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Question[] mQuestionBank = <span class="keyword">new</span> <span class="title class_">Question</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Question</span>(R.string.question_australia,R.string.false_answer),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Question</span>(R.string.question_oceans,R.string.true_answer),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Question</span>(R.string.question_mideast,R.string.true_answer),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Question</span>(R.string.question_africa,R.string.true_answer),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Question</span>(R.string.question_americas,R.string.true_answer),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Question</span>(R.string.question_asia,R.string.true_answer),</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//选择True</span></span><br><span class="line">        mMBtnTrue = findViewById(R.id.btnTrue);</span><br><span class="line">        mMBtnTrue.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mQuestionBank[mCurrentIndex].getAnswerId() == R.string.true_answer) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.correct_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.incorrect_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//选择False</span></span><br><span class="line">        mMMBtnFalse = findViewById(R.id.btnFalse);</span><br><span class="line">        mMMBtnFalse.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mQuestionBank[mCurrentIndex].getAnswerId() == R.string.false_answer) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.correct_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.incorrect_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>如果要增加新的问题及其答案，是否需要修改Java代码？能否不修改Java代码，仅修改资源文件就实现增加新的问题。提示：Array类型的资源.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;string-array name=<span class="string">&quot;questions&quot;</span>&gt;</span><br><span class="line">    &lt;item&gt;Canberra is the capital of Australia.&lt;/item&gt;</span><br><span class="line">    &lt;item&gt;The Pacific Ocean is larger than the Atlantic Ocean.&lt;/item&gt;</span><br><span class="line">    &lt;item&gt;The Suez Canal connects the Red Sea and the Indian Ocean.&lt;/item&gt;</span><br><span class="line">    &lt;item&gt;The source of the Nile River is in Egypt.&lt;/item&gt;</span><br><span class="line">    &lt;item&gt;The Amazon River is the longest river in the Americas.&lt;/item&gt;</span><br><span class="line">    &lt;item&gt;Lake Baikal is the world\<span class="string">&#x27;s oldest and deepest freshwater lake.&lt;/item&gt;</span></span><br><span class="line"><span class="string">&lt;/string-array&gt;</span></span><br><span class="line"><span class="string">&lt;string-array name=&quot;answers&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;item&gt;false&lt;/item&gt;</span></span><br><span class="line"><span class="string">    &lt;item&gt;true&lt;/item&gt;</span></span><br><span class="line"><span class="string">    &lt;item&gt;true&lt;/item&gt;</span></span><br><span class="line"><span class="string">    &lt;item&gt;true&lt;/item&gt;</span></span><br><span class="line"><span class="string">    &lt;item&gt;true&lt;/item&gt;</span></span><br><span class="line"><span class="string">    &lt;item&gt;true&lt;/item&gt;</span></span><br><span class="line"><span class="string">&lt;/string-array&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Question</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String mQuestionText;</span><br><span class="line">    <span class="keyword">private</span> String mAnswerText;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Question</span><span class="params">(String questionText, String answerText)</span> &#123;</span><br><span class="line">        mQuestionText = questionText;</span><br><span class="line">        mAnswerText = answerText;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getQuestionText</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mQuestionText;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setQuestionText</span><span class="params">(String questionText)</span> &#123;</span><br><span class="line">        mQuestionText = questionText;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAnswerText</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mAnswerText;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnswerText</span><span class="params">(String answerText)</span> &#123;</span><br><span class="line">        mAnswerText = answerText;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    mQuestion = findViewById(R.id.question_text);</span><br><span class="line">    String[] questions = getResources().getStringArray(R.array.questions);</span><br><span class="line">    String[] answers = getResources().getStringArray(R.array.answers);</span><br><span class="line">    Question[] mQuestionBank = <span class="keyword">new</span> <span class="title class_">Question</span>[questions.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; questions.length; i++) &#123;</span><br><span class="line">        mQuestionBank[i] = <span class="keyword">new</span> <span class="title class_">Question</span>(questions[i], answers[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    mQuestion.setText(mQuestionBank[mCurrentIndex].getQuestionText());</span><br><span class="line">    <span class="comment">//上一题</span></span><br><span class="line">    mBtnPrev = findViewById(R.id.btnPrev);</span><br><span class="line">    mBtnPrev.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            mCurrentIndex = (mCurrentIndex - <span class="number">1</span> + mQuestionBank.length) % mQuestionBank.length;</span><br><span class="line">            mQuestion.setText(mQuestionBank[mCurrentIndex].getQuestionText());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>用户答完某题后，禁掉对应题目的True和False作答按钮，即，一个题目只允许作答一次；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] mAnswerFlag = <span class="keyword">new</span> <span class="title class_">int</span>[mQuestionBank.length];<span class="comment">//0表示未回答，1表示回答正确，2表示回答错误</span></span><br><span class="line">        <span class="comment">//上一题</span></span><br><span class="line">        mBtnPrev = findViewById(R.id.btnPrev);</span><br><span class="line">        mBtnPrev.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                mCurrentIndex = (mCurrentIndex - <span class="number">1</span> + mQuestionBank.length) % mQuestionBank.length;</span><br><span class="line">                mQuestion.setText(mQuestionBank[mCurrentIndex].getTextId());</span><br><span class="line">                <span class="keyword">if</span> (mAnswerFlag[mCurrentIndex] == <span class="number">0</span>) &#123;</span><br><span class="line">                    mMBtnTrue.setEnabled(<span class="literal">true</span>);</span><br><span class="line">                    mMMBtnFalse.setEnabled(<span class="literal">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mMBtnTrue.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                    mMMBtnFalse.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//下一题</span></span><br><span class="line">        mMBtnNext = findViewById(R.id.btnNext);</span><br><span class="line">        mMBtnNext.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                mCurrentIndex = (mCurrentIndex + <span class="number">1</span>) % mQuestionBank.length;</span><br><span class="line">                mQuestion.setText(mQuestionBank[mCurrentIndex].getTextId());</span><br><span class="line">                <span class="keyword">if</span> (mAnswerFlag[mCurrentIndex] == <span class="number">0</span>) &#123;</span><br><span class="line">                    mMBtnTrue.setEnabled(<span class="literal">true</span>);</span><br><span class="line">                    mMMBtnFalse.setEnabled(<span class="literal">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mMBtnTrue.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                    mMMBtnFalse.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//选择True</span></span><br><span class="line">        mMBtnTrue = findViewById(R.id.btnTrue);</span><br><span class="line">        mMBtnTrue.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mQuestionBank[mCurrentIndex].getAnswerId() == R.string.true_answer) &#123;</span><br><span class="line">                    mAnswerFlag[mCurrentIndex] = <span class="number">1</span>;</span><br><span class="line">                    mMBtnTrue.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                    mMMBtnFalse.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.correct_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mAnswerFlag[mCurrentIndex] = <span class="number">2</span>;</span><br><span class="line">                    mMBtnTrue.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                    mMMBtnFalse.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.incorrect_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//选择False</span></span><br><span class="line">        mMMBtnFalse = findViewById(R.id.btnFalse);</span><br><span class="line">        mMMBtnFalse.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mQuestionBank[mCurrentIndex].getAnswerId() == R.string.false_answer) &#123;</span><br><span class="line">                    mAnswerFlag[mCurrentIndex] = <span class="number">1</span>;</span><br><span class="line">                    mMMBtnFalse.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                    mMBtnTrue.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.correct_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mAnswerFlag[mCurrentIndex] = <span class="number">2</span>;</span><br><span class="line">                    mMMBtnFalse.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                    mMBtnTrue.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.incorrect_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>用户答完全部的题目后，toast消息提示答对题目的百分比评分；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录回答正确的题目数</span></span><br><span class="line">    <span class="comment">//选择True</span></span><br><span class="line">    mMBtnTrue = findViewById(R.id.btnTrue);</span><br><span class="line">    mMBtnTrue.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mQuestionBank[mCurrentIndex].getAnswerId() == R.string.true_answer) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                mAnswerFlag[mCurrentIndex] = <span class="number">1</span>;</span><br><span class="line">                mMBtnTrue.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                mMMBtnFalse.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.correct_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mAnswerFlag[mCurrentIndex] = <span class="number">2</span>;</span><br><span class="line">                mMBtnTrue.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                mMMBtnFalse.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.incorrect_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mCurrentIndex==mQuestionBank.length-<span class="number">1</span>)&#123;</span><br><span class="line">                Double res=(count/(mQuestionBank.length*<span class="number">1.0</span>))*<span class="number">100</span>;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;正确率为&quot;</span>+res+<span class="string">&quot;%&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//选择False</span></span><br><span class="line">    mMMBtnFalse = findViewById(R.id.btnFalse);</span><br><span class="line">    mMMBtnFalse.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mQuestionBank[mCurrentIndex].getAnswerId() == R.string.false_answer) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                mAnswerFlag[mCurrentIndex] = <span class="number">1</span>;</span><br><span class="line">                mMMBtnFalse.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                mMBtnTrue.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.correct_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mAnswerFlag[mCurrentIndex] = <span class="number">2</span>;</span><br><span class="line">                mMMBtnFalse.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                mMBtnTrue.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.incorrect_toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mCurrentIndex==mQuestionBank.length-<span class="number">1</span>)&#123;</span><br><span class="line">                Double res=(count/(mQuestionBank.length*<span class="number">1.0</span>))*<span class="number">100</span>;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;正确率为&quot;</span>+res+<span class="string">&quot;%&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h3><ol><li><p><strong>请给MiniQuiz增加一个Activity，在这个新增的Activity提示答案；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.CheatActivity&quot;</span>&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;题目&quot;</span>/&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;你确定要提示答案吗？&quot;</span>/&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;答案&quot;</span>/&gt;</span><br><span class="line">    &lt;Button</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;提示答案&quot;</span>/&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">        mMBtnCheat = findViewById(R.id.btnCheat);</span><br><span class="line">        mMBtnCheat.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>, CheatActivity.class);</span><br><span class="line">                <span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">                bundle.putString(<span class="string">&quot;question&quot;</span>, getResources().getString(mQuestionBank[mCurrentIndex].getTextId()));</span><br><span class="line">                bundle.putString(<span class="string">&quot;answer&quot;</span>, getResources().getString(mQuestionBank[mCurrentIndex].getAnswerId()));</span><br><span class="line">                intent.putExtras(bundle);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheatActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TextView mQuestionCheat;</span><br><span class="line">    <span class="keyword">private</span> Button mBtnShowAnswer;</span><br><span class="line">    <span class="keyword">private</span> TextView mMAnswerCheat;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_cheat);</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> getIntent().getExtras();</span><br><span class="line">        <span class="type">String</span> <span class="variable">question</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;question&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;answer&quot;</span>);</span><br><span class="line">        mQuestionCheat = findViewById(R.id.question_cheat);</span><br><span class="line">        mQuestionCheat.setText(question);</span><br><span class="line">        mMAnswerCheat = findViewById(R.id.answer_cheat);</span><br><span class="line">        mBtnShowAnswer = findViewById(R.id.show_answer_button);</span><br><span class="line">        mBtnShowAnswer.setOnClickListener(view -&gt; &#123;</span><br><span class="line">            mMAnswerCheat.setText(answer);</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Cheat is wrong&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(CheatActivity.<span class="built_in">this</span>, MainActivity.class);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>再新增一个Activty，答完最后一个题目的时候，提示用户一共回答正确和错误的汇总情况，以及使用了提示答案的情况；在这个新增的Acity中共用户选择“退出程序”或者“重新开始答题”。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击提示答案返回原界面回传作弊次数</span></span><br><span class="line"><span class="comment">//CheatActivity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheatActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TextView mQuestionCheat;</span><br><span class="line">    <span class="keyword">private</span> Button mBtnShowAnswer;</span><br><span class="line">    <span class="keyword">private</span> TextView mMAnswerCheat;</span><br><span class="line">    <span class="keyword">private</span> Button mMBtnBack;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">isCheated</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//0表示未作弊，1表示作弊</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_cheat);</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> getIntent().getExtras();</span><br><span class="line">        <span class="type">int</span> <span class="variable">mCurrentIndex</span> <span class="operator">=</span> bundle.getInt(<span class="string">&quot;mCurrentIndex&quot;</span>);</span><br><span class="line">        mQuestionCheat = findViewById(R.id.question_cheat);</span><br><span class="line">        mQuestionCheat.setText(MainActivity.mQuestionBank[mCurrentIndex].getTextId());</span><br><span class="line">        mMAnswerCheat = findViewById(R.id.answer_cheat);</span><br><span class="line">        mBtnShowAnswer = findViewById(R.id.show_answer_button);</span><br><span class="line">        mBtnShowAnswer.setOnClickListener(view -&gt; &#123;</span><br><span class="line">            isCheated = <span class="number">1</span>;</span><br><span class="line">            mMAnswerCheat.setText(MainActivity.mQuestionBank[mCurrentIndex].getAnswerId());</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Cheat is wrong&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//回传是否作弊</span></span><br><span class="line">        mMBtnBack = findViewById(R.id.btn_cheat_back);</span><br><span class="line">        mMBtnBack.setOnClickListener(view -&gt; &#123;</span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">            <span class="type">Bundle</span> <span class="variable">bundle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">            bundle1.putInt(<span class="string">&quot;isCheated&quot;</span>, isCheated);</span><br><span class="line">            intent.putExtras(bundle1);</span><br><span class="line">            setResult(Activity.RESULT_OK, intent);</span><br><span class="line">            finish();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MainActivity</span></span><br><span class="line">    <span class="keyword">private</span> ActivityResultLauncher&lt;Intent&gt; mRegister;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] isCheated = <span class="keyword">new</span> <span class="title class_">int</span>[mQuestionBank.length];<span class="comment">//0表示未作弊，1表示作弊</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mCheatCount=<span class="number">0</span>;</span><br><span class="line">        mRegister = registerForActivityResult(<span class="keyword">new</span> <span class="title class_">ActivityResultContracts</span>.StartActivityForResult(), result -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(result!=<span class="literal">null</span>)&#123;</span><br><span class="line">                Intent intent=result.getData();</span><br><span class="line">                <span class="keyword">if</span>(intent!=<span class="literal">null</span> &amp;&amp; result.getResultCode()== Activity.RESULT_OK)&#123;</span><br><span class="line">                    Bundle bundle=intent.getExtras();</span><br><span class="line">                    <span class="comment">//是否作弊</span></span><br><span class="line">                    isCheated[mCurrentIndex] = bundle.getInt(<span class="string">&quot;isCheated&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mMBtnCheat = findViewById(R.id.btnCheat);</span><br><span class="line">        mMBtnCheat.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>, CheatActivity.class);</span><br><span class="line">                <span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">                bundle.putInt(<span class="string">&quot;mCurrentIndex&quot;</span>, mCurrentIndex);</span><br><span class="line">                intent.putExtras(bundle);</span><br><span class="line">                mRegister.launch(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.SummaryActivity&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/questionRes_summary&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:padding=<span class="string">&quot;24dp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/cheatCount_summary&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:padding=<span class="string">&quot;24dp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/btnQuit&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;Quit&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/btnRestart&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;Restart&quot;</span> /&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(mCurrentIndex==mQuestionBank.length-<span class="number">1</span>)&#123;</span><br><span class="line">    Double res=(count/(mQuestionBank.length*<span class="number">1.0</span>))*<span class="number">100</span>;</span><br><span class="line">    Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,SummaryActivity.class);</span><br><span class="line">    Bundle bundle=<span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">    bundle.putInt(<span class="string">&quot;count&quot;</span>,count);</span><br><span class="line">    bundle.putDouble(<span class="string">&quot;res&quot;</span>,res);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; isCheated.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isCheated[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            mCheatCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bundle.putInt(<span class="string">&quot;cheatCount&quot;</span>,mCheatCount);</span><br><span class="line">    intent.putExtras(bundle);</span><br><span class="line">    startActivity(intent);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SummaryActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView mQuestionRes;</span><br><span class="line">    <span class="keyword">private</span> TextView mCheatSummary;</span><br><span class="line">    <span class="keyword">private</span> Button mMBtnQuit;</span><br><span class="line">    <span class="keyword">private</span> Button mMMBtnRestart;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_summary);</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> getIntent().getExtras();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> bundle.getInt(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        Double res=bundle.getDouble(<span class="string">&quot;res&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">cheatCount</span> <span class="operator">=</span> bundle.getInt(<span class="string">&quot;cheatCount&quot;</span>);</span><br><span class="line">        mQuestionRes = findViewById(R.id.questionRes_summary);</span><br><span class="line">        mQuestionRes.setText(<span class="string">&quot;回答正确的题目数为：&quot;</span>+count+<span class="string">&quot;,&quot;</span>+<span class="string">&quot;回答错误的题目数为&quot;</span>+(MainActivity.mQuestionBank.length-count)+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;正确率为：&quot;</span>+res+<span class="string">&quot;%,&quot;</span>+<span class="string">&quot;错误率为：&quot;</span>+(<span class="number">100</span>-res)+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">        mCheatSummary = findViewById(R.id.cheatCount_summary);</span><br><span class="line">        mCheatSummary.setText(<span class="string">&quot;作弊次数为：&quot;</span>+cheatCount);</span><br><span class="line">        mMBtnQuit = findViewById(R.id.btnQuit);</span><br><span class="line">        mMBtnQuit.setOnClickListener(view -&gt; &#123;</span><br><span class="line">            Intent home=<span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_MAIN);</span><br><span class="line">            home.addCategory(Intent.CATEGORY_HOME);</span><br><span class="line">            startActivity(home);</span><br><span class="line">        &#125;);</span><br><span class="line">        mMMBtnRestart = findViewById(R.id.btnRestart);</span><br><span class="line">        mMMBtnRestart.setOnClickListener(view -&gt; &#123;</span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(SummaryActivity.<span class="built_in">this</span>, MainActivity.class);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在整个运行过程中，请使用Log显示Activity生命周期状态变化，并在实验报告中分析其状态变化的条件和原因。</strong></p><ul><li><p>一个Activity正常启动时，会按顺序执行<strong>onCreate-&gt;onStart-&gt;onResume</strong>,然后这个Activity is running，就可以和用户交互了</p></li><li><p>当Another activity comes in front of the activity时，即跳转到另外一个界面，执行<strong>onPause</strong>，原界面不可见了,<strong>onStop</strong></p></li><li><p>当在新的界面中按返回按钮，则会按顺序执行<strong>onStop-&gt;onRestart-&gt;onStart-&gt;onResume</strong>,返回原界面</p></li><li><p>如果在跳转新界面过程中原界面还未来得及完全消失按返回键，则会按顺序执行<strong>onPause-&gt;onResume</strong>,此时原界面Activity is running</p></li><li><p>如果其他应用需要内存，退在后台运行的应用将被系统杀掉，在点到原界面重新进来时，会按顺序执行<strong>onStop-&gt;onCreate</strong></p></li><li><p>onCreate:创建活动。把页面布局加载进内存，进入了初始状态。</p></li><li><p>onStart:开始活动。把活动页面显示在屏幕上，进入了就绪状态。</p></li><li><p>onResume:恢复活动。活动页面进入活跃状态，能够与用户正常交互，例如允许响应用户的点击动作、允许用户输入文字等等。</p></li><li><p>onPause:暂停活动。页面进入暂停状态，无法与用户正常交互。</p></li><li><p>onStop:停止活动。页面将不在屏幕上显示。</p></li><li><p>onDestroy:销毁活动。回收活动占用的系统资源，把页面从内存中清除。</p></li><li><p>onRestart:重启活动。重新加载内存中的页面数据。</p></li><li><p>onNewlntent:重用已有的活动实例。</p></li></ul></li></ol><p>​4.<strong>在以上程序运行的过程中，进行横屏和竖屏的切换，要求，无论程序在什么时候切换，都可以正确运行。</strong></p><p>为了避免横竖屏切换时重新加载界面的情况，Android设计了一种配置变更机制，在指定的环境配置发生变更之时，无需重启活动页面，只需执行特定的变更行为。该机制的实现过程分为两步：</p><ul><li><p>修改AndroidManifest,xml,给activity节点增加android:configChanges属性</p><table><thead><tr><th>configChanges属性的取值</th><th>说明</th></tr></thead><tbody><tr><td>orientation</td><td>屏幕方向发生改变</td></tr><tr><td>screenLayout</td><td>屏幕的显示发生改变，例如在全屏和分屏之间切换</td></tr><tr><td>screenSize</td><td>屏幕大小发生改变，例如在竖屏与横屏之间切换</td></tr><tr><td>keyboard</td><td>键盘发生改变，例如使用了外部键盘</td></tr><tr><td>keyboardHidden</td><td>软键盘弹出或隐藏</td></tr><tr><td>navigation</td><td>导航方式发生改变，例如采用了轨迹球导航</td></tr><tr><td>fontScale</td><td>字体比例发生改变，例如在系统设置中调整默认字体</td></tr><tr><td>locale</td><td>设备的本地位置发生改变，例如切换了系统语言</td></tr><tr><td>uiMode</td><td>用户界面的模式发生改变，例如开启了夜间模式</td></tr></tbody></table></li><li><p>修改活动页面的Java代码，重写活动的onConfigurationChanged方法，补充对应的代码处理逻辑。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">        &lt;activity</span><br><span class="line">            android:name=<span class="string">&quot;.MainActivity&quot;</span></span><br><span class="line">            android:exported=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:configChanges=<span class="string">&quot;orientation|screenLayout|screenSize&quot;</span>&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;category android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line"><span class="comment">//MainActivity</span></span><br><span class="line"><span class="comment">//在配置项变更时触发，比如屏幕方向发生变更等</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfigurationChanged</span><span class="params">(<span class="meta">@NonNull</span> Configuration newConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">        <span class="keyword">switch</span> (newConfig.orientation)&#123;</span><br><span class="line">            <span class="keyword">case</span> Configuration.ORIENTATION_PORTRAIT:</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>,<span class="string">&quot;现在是竖屏&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Configuration.ORIENTATION_LANDSCAPE:</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>,<span class="string">&quot;现在是横屏&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="实验四"><a href="#实验四" class="headerlink" title="实验四"></a>实验四</h3><ol><li><p><strong>实现CiriminalIntent的Fragment的竖屏界面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//activity_main.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;FrameLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    android:id=<span class="string">&quot;@+id/fragment_container&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fragment_crime.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_margin=<span class="string">&quot;16dp&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.CrimeFragment&quot;</span>&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        style=<span class="string">&quot;?android:listSeparatorTextViewStyle&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;标题&quot;</span> /&gt;</span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=<span class="string">&quot;@+id/crime_title&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:hint=<span class="string">&quot;请输入标题&quot;</span>/&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        style=<span class="string">&quot;?android:listSeparatorTextViewStyle&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;细节&quot;</span> /&gt;</span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/crime_date&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;选择日期&quot;</span> /&gt;</span><br><span class="line">    &lt;CheckBox</span><br><span class="line">        android:id=<span class="string">&quot;@+id/crime_solved&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;解决了&quot;</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CrimeFragment</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CrimeFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Crime mCrime;</span><br><span class="line">    <span class="keyword">private</span> TextView mTvTitle;</span><br><span class="line">    <span class="keyword">private</span> CheckBox mChkSolved;</span><br><span class="line">    <span class="keyword">private</span> Button mBtnDate;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Rename parameter arguments, choose names that match</span></span><br><span class="line">    <span class="comment">// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ARG_PARAM1</span> <span class="operator">=</span> <span class="string">&quot;param1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ARG_PARAM2</span> <span class="operator">=</span> <span class="string">&quot;param2&quot;</span>;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Rename and change types of parameters</span></span><br><span class="line">    <span class="keyword">private</span> String mParam1;</span><br><span class="line">    <span class="keyword">private</span> String mParam2;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CrimeFragment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Required empty public constructor</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use this factory method to create a new instance of</span></span><br><span class="line"><span class="comment">     * this fragment using the provided parameters.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param1 Parameter 1.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param2 Parameter 2.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A new instance of fragment CrimeFragment.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Rename and change types and number of parameters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CrimeFragment <span class="title function_">newInstance</span><span class="params">(String param1, String param2)</span> &#123;</span><br><span class="line">        <span class="type">CrimeFragment</span> <span class="variable">fragment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CrimeFragment</span>();</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">args</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">        args.putString(ARG_PARAM1, param1);</span><br><span class="line">        args.putString(ARG_PARAM2, param2);</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">if</span> (getArguments() != <span class="literal">null</span>) &#123;</span><br><span class="line">            mParam1 = getArguments().getString(ARG_PARAM1);</span><br><span class="line">            mParam2 = getArguments().getString(ARG_PARAM2);</span><br><span class="line">        &#125;</span><br><span class="line">        mCrime = <span class="keyword">new</span> <span class="title class_">Crime</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="line"><span class="params">                             Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">v</span> <span class="operator">=</span> inflater.inflate(R.layout.fragment_crime, container, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//todo 对view做一些设置</span></span><br><span class="line">        mTvTitle = v.findViewById(R.id.crime_title);</span><br><span class="line">        mChkSolved = v.findViewById(R.id.crime_solved);</span><br><span class="line">        mBtnDate = v.findViewById(R.id.crime_date);</span><br><span class="line">        mTvTitle.setText(mCrime.getId().toString());</span><br><span class="line">        mBtnDate.setText(mCrime.getDate().toString());</span><br><span class="line">        mChkSolved.setChecked(mCrime.isSolved());</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">FragmentManager</span> <span class="variable">fm</span> <span class="operator">=</span> getSupportFragmentManager();</span><br><span class="line">        <span class="type">Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> fm.findFragmentById(R.id.fragment_container);</span><br><span class="line">        <span class="keyword">if</span> (fragment == <span class="literal">null</span>) &#123;</span><br><span class="line">            fragment = <span class="keyword">new</span> <span class="title class_">CrimeFragment</span>();</span><br><span class="line">            fm.beginTransaction().add(R.id.fragment_container, fragment).commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现CiriminalIntent的Fragment的横屏界面</strong></p><p>在res中新建目录layout-land目录，创建与竖屏布局文件同名的文件fragment_crime.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_margin=<span class="string">&quot;16dp&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.CrimeFragment&quot;</span>&gt;</span><br><span class="line">    &lt;!-- TODO: Update blank fragment layout --&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        style=<span class="string">&quot;?android:listSeparatorTextViewStyle&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;标题&quot;</span> /&gt;</span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=<span class="string">&quot;@+id/crime_title&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:hint=<span class="string">&quot;请输入标题&quot;</span>/&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        style=<span class="string">&quot;?android:listSeparatorTextViewStyle&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;细节&quot;</span> /&gt;</span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/crime_date&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;选择日期&quot;</span> /&gt;</span><br><span class="line">    &lt;CheckBox</span><br><span class="line">        android:id=<span class="string">&quot;@+id/crime_solved&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;解决了&quot;</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>在Activity中加载一个Fragment的基本流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p><strong>使用Fragment设计UI有哪些好处？</strong></p></li></ol><h3 id="实验五"><a href="#实验五" class="headerlink" title="实验五"></a>实验五</h3><ol><li><p><strong>实现一个班级名单的列表视图，每个列表项包含：个人照片，学号和姓名，电话；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity</span></span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span><br><span class="line">    &lt;FrameLayout</span><br><span class="line">        android:id=<span class="string">&quot;@+id/fragment_container&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span>/&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StudentFragment</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StuFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; mStudentList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    String[] ids = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;210107101&quot;</span>, <span class="string">&quot;210107102&quot;</span>, <span class="string">&quot;210107103&quot;</span>, <span class="string">&quot;210107104&quot;</span>, <span class="string">&quot;210107105&quot;</span>, <span class="string">&quot;210107106&quot;</span>&#125;;</span><br><span class="line">    String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王二&quot;</span>, <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;小红&quot;</span>, <span class="string">&quot;小明&quot;</span>&#125;;</span><br><span class="line">    String[] phones = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;1976090901&quot;</span>, <span class="string">&quot;1976090902&quot;</span>, <span class="string">&quot;1976090903&quot;</span>, <span class="string">&quot;1976090904&quot;</span>, <span class="string">&quot;1976090905&quot;</span>, <span class="string">&quot;1976090906&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] images = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;R.drawable.aa, R.drawable.bb, R.drawable.cc, R.drawable.dd, R.drawable.ee, R.drawable.ff,R.drawable.gg,R.drawable.hh,R.drawable.ii,R.drawable.jj&#125;;</span><br><span class="line">    <span class="keyword">private</span> TextView mStuId;</span><br><span class="line">    <span class="keyword">private</span> TextView mMStuName;</span><br><span class="line">    <span class="keyword">private</span> TextView mMStuPhone;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> StuAdapter mStuAdapter;</span><br><span class="line">    <span class="keyword">private</span> Button mBtnAdd;</span><br><span class="line">    <span class="keyword">private</span> ImageView mMStuImg;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="line"><span class="params">                             Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="comment">// Inflate the layout for this fragment</span></span><br><span class="line">        View view=inflater.inflate(R.layout.fragment_stu, container, <span class="literal">false</span>);</span><br><span class="line">        mMStuImg = view.findViewById(R.id.img_stu);</span><br><span class="line">        <span class="comment">//选择随机头像</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span>[] random=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        mMStuImg.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                random[<span class="number">0</span>]=<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>);</span><br><span class="line">                mMStuImg.setImageResource(images[random[<span class="number">0</span>]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mStuId = view.findViewById(R.id.stu_id);</span><br><span class="line">        mMStuName = view.findViewById(R.id.stu_name);</span><br><span class="line">        mMStuPhone = view.findViewById(R.id.stu_phone);</span><br><span class="line">        mBtnAdd = view.findViewById(R.id.btn_add);</span><br><span class="line">        mBtnAdd.setOnClickListener(v-&gt;&#123;</span><br><span class="line">            String editId=<span class="keyword">new</span> <span class="title class_">String</span>(mStuId.getText().toString());</span><br><span class="line">            String editName=<span class="keyword">new</span> <span class="title class_">String</span>(mMStuName.getText().toString());</span><br><span class="line">            String editPhone=<span class="keyword">new</span> <span class="title class_">String</span>(mMStuPhone.getText().toString());</span><br><span class="line">            Student editStudent=<span class="keyword">new</span> <span class="title class_">Student</span>(random[<span class="number">0</span>],editId,editName,editPhone);</span><br><span class="line">            mStudentList.add(editStudent);</span><br><span class="line">            mStuId.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mMStuName.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mMStuPhone.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mStuAdapter.notifyDataSetChanged();</span><br><span class="line">        &#125;);</span><br><span class="line">        mRecyclerView = view.findViewById(R.id.recyclerview);</span><br><span class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(getActivity()));</span><br><span class="line">        mStuAdapter = <span class="keyword">new</span> <span class="title class_">StuAdapter</span>();</span><br><span class="line">        mRecyclerView.setAdapter(mStuAdapter);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(i, ids[i], names[i], phones[i]);</span><br><span class="line">            mStudentList.add(student);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">StuAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;StuHolder&gt;&#123;</span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> StuHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">            View view=View.inflate(getContext(),R.layout.item,<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StuHolder</span>(view);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> StuHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> mStudentList.get(position);</span><br><span class="line">            holder.mImgView.setImageResource(images[student.getImgId()]);</span><br><span class="line">            holder.mItemId.setText(student.getId());</span><br><span class="line">            holder.mMItemName.setText(student.getName());</span><br><span class="line">            holder.mMItemPhone.setText(student.getPhone());</span><br><span class="line">            holder.mBtnDel.setOnClickListener(v-&gt; &#123;</span><br><span class="line">                mStudentList.remove(position);</span><br><span class="line">                mStuAdapter.notifyDataSetChanged();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mStudentList.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StuHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView mItemId;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView mMItemName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView mMItemPhone;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Button mBtnDel;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ImageView mImgView;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">StuHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            mImgView = itemView.findViewById(R.id.item_img);</span><br><span class="line">            mItemId = (TextView)itemView.findViewById(R.id.item_id);</span><br><span class="line">            mMItemName = (TextView)itemView.findViewById(R.id.item_name);</span><br><span class="line">            mMItemPhone = (TextView)itemView.findViewById(R.id.item_phone);</span><br><span class="line">            mBtnDel = (Button)itemView.findViewById(R.id.btn_del);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fragment_stu.xml</span></span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:fitsSystemWindows=<span class="string">&quot;true&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;105dp&quot;</span></span><br><span class="line">            android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line">            &lt;EditText</span><br><span class="line">                android:id=<span class="string">&quot;@+id/stu_id&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;35dp&quot;</span></span><br><span class="line">                android:ems=<span class="string">&quot;10&quot;</span></span><br><span class="line">                android:hint=<span class="string">&quot;请输入学号&quot;</span></span><br><span class="line">                android:inputType=<span class="string">&quot;text&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;13dp&quot;</span>/&gt;</span><br><span class="line">            &lt;EditText</span><br><span class="line">                android:id=<span class="string">&quot;@+id/stu_name&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;35dp&quot;</span></span><br><span class="line">                android:ems=<span class="string">&quot;10&quot;</span></span><br><span class="line">                android:hint=<span class="string">&quot;请输入姓名&quot;</span></span><br><span class="line">                android:inputType=<span class="string">&quot;text&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;13dp&quot;</span>/&gt;</span><br><span class="line">            &lt;EditText</span><br><span class="line">                android:id=<span class="string">&quot;@+id/stu_phone&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;35dp&quot;</span></span><br><span class="line">                android:ems=<span class="string">&quot;10&quot;</span></span><br><span class="line">                android:hint=<span class="string">&quot;请输入电话&quot;</span></span><br><span class="line">                android:inputType=<span class="string">&quot;text&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;13dp&quot;</span>/&gt;</span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line">        &lt;!-- TODO: Update blank fragment layout --&gt;</span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;105dp&quot;</span></span><br><span class="line">            android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/img_stu&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;155dp&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;105dp&quot;</span></span><br><span class="line">                android:src=<span class="string">&quot;@drawable/aa&quot;</span> /&gt;</span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;80dp&quot;</span></span><br><span class="line">            android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">            android:gravity=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">            &lt;Button</span><br><span class="line">                android:id=<span class="string">&quot;@+id/btn_add&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_marginTop=<span class="string">&quot;12dp&quot;</span></span><br><span class="line">                android:text=<span class="string">&quot;添加&quot;</span>/&gt;</span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/recyclerview&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//item.xml</span></span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span>&gt;</span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/item_img&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;75dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;75dp&quot;</span></span><br><span class="line">        android:src=<span class="string">&quot;@drawable/aa&quot;</span> /&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;75dp&quot;</span></span><br><span class="line">        android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/item_id&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;250dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;25dp&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;TextView&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;15dp&quot;</span> /&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/item_name&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;250dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;25dp&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;TextView&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;15dp&quot;</span> /&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/item_phone&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;250dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;25dp&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;TextView&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;15dp&quot;</span> /&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;75dp&quot;</span></span><br><span class="line">        android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=<span class="string">&quot;@+id/btn_del&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;删除&quot;</span> /&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>可以删除列表项，添加列表项；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line">            holder.mBtnDel.setOnClickListener(v-&gt; &#123;</span><br><span class="line">                mStudentList.remove(position);</span><br><span class="line">                mStuAdapter.notifyDataSetChanged();</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">        mBtnAdd.setOnClickListener(v-&gt;&#123;</span><br><span class="line">            String editId=<span class="keyword">new</span> <span class="title class_">String</span>(mStuId.getText().toString());</span><br><span class="line">            String editName=<span class="keyword">new</span> <span class="title class_">String</span>(mMStuName.getText().toString());</span><br><span class="line">            String editPhone=<span class="keyword">new</span> <span class="title class_">String</span>(mMStuPhone.getText().toString());</span><br><span class="line">            Student editStudent=<span class="keyword">new</span> <span class="title class_">Student</span>(random[<span class="number">0</span>],editId,editName,editPhone);</span><br><span class="line">            mStudentList.add(editStudent);</span><br><span class="line">            mStuId.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mMStuName.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mMStuPhone.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mStuAdapter.notifyDataSetChanged();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>可以从列表项拨打对应的电话号码。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法onBindViewHolder</span></span><br><span class="line"><span class="comment">//拨打电话</span></span><br><span class="line">            holder.mMItemPhone.setOnClickListener(view -&gt; &#123;</span><br><span class="line">                String phone=mStudentList.get(position).getPhone();</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">                intent.setAction(<span class="string">&quot;android.intent.action.DIAL&quot;</span>);</span><br><span class="line">                <span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> Uri.parse(<span class="string">&quot;tel:&quot;</span> + phone);</span><br><span class="line">                intent.setData(uri);</span><br><span class="line">                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="实验六"><a href="#实验六" class="headerlink" title="实验六"></a>实验六</h3><ol><li><p><strong>将班级名单以SQLite的方式保存在本地，每个列表项包含：学号和姓名，电话；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//activity_main.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:id=<span class="string">&quot;@+id/fragment_container&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span><br><span class="line">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br><span class="line"><span class="comment">//MainActivity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> getFilesDir() + <span class="string">&quot;/student.db&quot;</span>;</span><br><span class="line">        <span class="type">SQLiteDatabase</span> <span class="variable">database</span> <span class="operator">=</span> openOrCreateDatabase(s, MODE_PRIVATE, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (database != <span class="literal">null</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;数据库创建成功&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;数据库创建失败&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">        FragmentManager fm=getSupportFragmentManager();</span><br><span class="line">        StuFragment fragment=(StuFragment)fm.findFragmentById(R.id.fragment_container);</span><br><span class="line">        <span class="keyword">if</span>(fragment==<span class="literal">null</span>)&#123;</span><br><span class="line">            fragment=<span class="keyword">new</span> <span class="title class_">StuFragment</span>();</span><br><span class="line">            fm.beginTransaction().add(R.id.fragment_container,fragment).commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fragment_stu.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:id=<span class="string">&quot;@+id/frameLayout&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.StuFragment&quot;</span>&gt;</span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=<span class="string">&quot;@+id/editName&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;72dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;60dp&quot;</span></span><br><span class="line">        android:ems=<span class="string">&quot;10&quot;</span></span><br><span class="line">        android:inputType=<span class="string">&quot;text&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=<span class="string">&quot;@+id/editPhone&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;72dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;128dp&quot;</span></span><br><span class="line">        android:ems=<span class="string">&quot;10&quot;</span></span><br><span class="line">        android:inputType=<span class="string">&quot;text&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/textView4&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;28dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;144dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;电话&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/textView3&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;28dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;88dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;姓名&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/textView&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;28dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;28dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;学号&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=<span class="string">&quot;@+id/editId&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;72dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;4dp&quot;</span></span><br><span class="line">        android:ems=<span class="string">&quot;10&quot;</span></span><br><span class="line">        android:inputType=<span class="string">&quot;text&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/btnFind&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;292dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;40dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;查询&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/btnAdd&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;292dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;108dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;添加&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/recyclerview&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;373dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;513dp&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;16dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;180dp&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br><span class="line"><span class="comment">//StuFragment</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StuFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; mStudentList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> TextView mMEditId;</span><br><span class="line">    <span class="keyword">private</span> TextView mMEditName;</span><br><span class="line">    <span class="keyword">private</span> TextView mMMEditPhone;</span><br><span class="line">    <span class="keyword">private</span> Button mBtnAdd;</span><br><span class="line">    <span class="keyword">private</span> Button mMBtnFind;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> StuAdapter mStuAdapter;</span><br><span class="line">    <span class="keyword">private</span> MyOpenHelper mMyOpenHelper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="line"><span class="params">                             Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        View view=inflater.inflate(R.layout.fragment_stu, container, <span class="literal">false</span>);</span><br><span class="line">        mMyOpenHelper = MyOpenHelper.getInstance(getActivity());</span><br><span class="line">        mMyOpenHelper.openWriteLink();</span><br><span class="line">        mMyOpenHelper.openReadLink();</span><br><span class="line">        mMEditId = view.findViewById(R.id.editId);</span><br><span class="line">        mMEditName = view.findViewById(R.id.editName);</span><br><span class="line">        mMMEditPhone = view.findViewById(R.id.editPhone);</span><br><span class="line">        mBtnAdd = view.findViewById(R.id.btnAdd);</span><br><span class="line">        mBtnAdd.setOnClickListener(v-&gt;&#123;</span><br><span class="line">            String id=mMEditId.getText().toString();</span><br><span class="line">            String name=mMEditName.getText().toString();</span><br><span class="line">            String phone=mMMEditPhone.getText().toString();</span><br><span class="line">            mMyOpenHelper.insert(<span class="keyword">new</span> <span class="title class_">Student</span>(id,name,phone));</span><br><span class="line">            mStudentList=mMyOpenHelper.queryAll();</span><br><span class="line">            mStuAdapter.notifyDataSetChanged();</span><br><span class="line">            mMEditId.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mMEditName.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mMMEditPhone.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        mMBtnFind = view.findViewById(R.id.btnFind);</span><br><span class="line">        mRecyclerView = view.findViewById(R.id.recyclerview);</span><br><span class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(getActivity()));</span><br><span class="line">        mStudentList=mMyOpenHelper.queryAll();</span><br><span class="line">        mStuAdapter = <span class="keyword">new</span> <span class="title class_">StuAdapter</span>();</span><br><span class="line">        mRecyclerView.setAdapter(mStuAdapter);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">StuAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;StuHolder&gt;&#123;</span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> StuHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">            View view=LayoutInflater.from(getActivity()).inflate(R.layout.item,parent,<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StuHolder</span>(view);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> StuHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">            Student student=mStudentList.get(position);</span><br><span class="line">            holder.mItemId.setText(student.getId());</span><br><span class="line">            holder.mMItemName.setText(student.getName());</span><br><span class="line">            holder.mMItemPhone.setText(student.getPhone());</span><br><span class="line">            holder.mMBtnDel.setOnClickListener(v-&gt;&#123;</span><br><span class="line">                mMyOpenHelper.delete(student.getId());</span><br><span class="line">                mStudentList=mMyOpenHelper.queryAll();</span><br><span class="line">                mStuAdapter.notifyDataSetChanged();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mStudentList.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StuHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView mItemId;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView mMItemName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView mMItemPhone;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Button mMBtnUpdate;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Button mMBtnDel;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">StuHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            mItemId = itemView.findViewById(R.id.itemId);</span><br><span class="line">            mMItemName = itemView.findViewById(R.id.itemName);</span><br><span class="line">            mMItemPhone = itemView.findViewById(R.id.itemPhone);</span><br><span class="line">            mMBtnUpdate = itemView.findViewById(R.id.btnUpdate);</span><br><span class="line">            mMBtnDel = itemView.findViewById(R.id.btnDel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MyOpenHelper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyOpenHelper</span> <span class="keyword">extends</span> <span class="title class_">SQLiteOpenHelper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_NAME</span> <span class="operator">=</span> <span class="string">&quot;student.db&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TABLE_NAME</span> <span class="operator">=</span> <span class="string">&quot;stu_info&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DB_VERSION</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyOpenHelper instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SQLiteDatabase</span> <span class="variable">mRDB</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SQLiteDatabase</span> <span class="variable">mWDB</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MyOpenHelper <span class="title function_">getInstance</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">MyOpenHelper</span>(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyOpenHelper</span><span class="params">(<span class="meta">@Nullable</span> Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, DB_NAME, <span class="literal">null</span>, DB_VERSION);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyOpenHelper</span><span class="params">(<span class="meta">@Nullable</span> Context context, <span class="meta">@Nullable</span> String name, <span class="meta">@Nullable</span> SQLiteDatabase.CursorFactory factory, <span class="type">int</span> version)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, name, factory, version);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> SQLiteDatabase <span class="title function_">openReadLink</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mRDB == <span class="literal">null</span> || !mRDB.isOpen()) &#123;</span><br><span class="line">            mRDB = instance.getReadableDatabase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mRDB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> SQLiteDatabase <span class="title function_">openWriteLink</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mWDB == <span class="literal">null</span> || !mWDB.isOpen()) &#123;</span><br><span class="line">            mWDB = instance.getWritableDatabase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mWDB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeLink</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mRDB != <span class="literal">null</span> &amp;&amp; mRDB.isOpen()) &#123;</span><br><span class="line">            mRDB.close();</span><br><span class="line">            mRDB = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mWDB != <span class="literal">null</span> &amp;&amp; mWDB.isOpen()) &#123;</span><br><span class="line">            mWDB.close();</span><br><span class="line">            mWDB = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase sqLiteDatabase)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;create table stu_info(id  primary key ,name ,phone )&quot;</span>;</span><br><span class="line">        sqLiteDatabase.execSQL(sql);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpgrade</span><span class="params">(SQLiteDatabase sqLiteDatabase, <span class="type">int</span> i, <span class="type">int</span> i1)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Student student)</span>&#123;</span><br><span class="line">        <span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">        values.put(<span class="string">&quot;id&quot;</span>,student.getId());</span><br><span class="line">        values.put(<span class="string">&quot;name&quot;</span>,student.getName());</span><br><span class="line">        values.put(<span class="string">&quot;phone&quot;</span>,student.getPhone());</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) mWDB.insert(TABLE_NAME,<span class="literal">null</span>,values);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Student&gt; studentList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> mRDB.query(TABLE_NAME, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">while</span> (cursor.moveToNext())&#123;</span><br><span class="line">            String id=cursor.getString(<span class="number">0</span>);</span><br><span class="line">            String name=cursor.getString(<span class="number">1</span>);</span><br><span class="line">            String phone=cursor.getString(<span class="number">2</span>);</span><br><span class="line">            Student student=<span class="keyword">new</span> <span class="title class_">Student</span>(id,name,phone);</span><br><span class="line">            studentList.add(student);</span><br><span class="line">        &#125;</span><br><span class="line">        cursor.close();</span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mWDB.delete(TABLE_NAME,<span class="string">&quot;id=?&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;id&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>可以删除列表项，添加列表项（数据更新到SQLite数据库）；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line">mBtnAdd.setOnClickListener(v-&gt;&#123;</span><br><span class="line">            String id=mMEditId.getText().toString();</span><br><span class="line">            String name=mMEditName.getText().toString();</span><br><span class="line">            String phone=mMMEditPhone.getText().toString();</span><br><span class="line">            mMyOpenHelper.insert(<span class="keyword">new</span> <span class="title class_">Student</span>(id,name,phone));</span><br><span class="line">            mStudentList=mMyOpenHelper.queryAll();</span><br><span class="line">            mStuAdapter.notifyDataSetChanged();</span><br><span class="line">            mMEditId.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mMEditName.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mMMEditPhone.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">holder.mMBtnDel.setOnClickListener(v-&gt;&#123;</span><br><span class="line">                mMyOpenHelper.delete(student.getId());</span><br><span class="line">                mStudentList=mMyOpenHelper.queryAll();</span><br><span class="line">                mStuAdapter.notifyDataSetChanged();</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>可以读取联系人(使用内容提供者)，将联系人的名字和电话号码读入到名单列表并插入数据库；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StuFragment  </span></span><br><span class="line"><span class="comment">//检查获取通讯录权限</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkPermission</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否有权限</span></span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(getContext(), android.Manifest.permission.READ_CONTACTS)</span><br><span class="line">                != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            ActivityCompat.requestPermissions(getActivity(), <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Manifest.permission.READ_CONTACTS&#125;, <span class="number">201</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        checkPermission();</span><br><span class="line">    &#125;</span><br><span class="line">    mMBtnFind.setOnClickListener(v -&gt; &#123;</span><br><span class="line">        List&lt;Student&gt; contacts = ContactUtils.getContacts(getActivity());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; contacts.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> contacts.get(i);</span><br><span class="line">            mMyOpenHelper.insert(student);</span><br><span class="line">        &#125;</span><br><span class="line">        mStudentList = mMyOpenHelper.queryAll();</span><br><span class="line">        mStuAdapter.notifyDataSetChanged();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContactUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID</span> <span class="operator">=</span> ContactsContract.CommonDataKinds.Phone.CONTACT_ID;<span class="comment">//联系人ID</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NUM</span> <span class="operator">=</span> ContactsContract.CommonDataKinds.Phone.NUMBER;<span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Uri</span> <span class="variable">phoneUri</span> <span class="operator">=</span> ContactsContract.CommonDataKinds.Phone.CONTENT_URI;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title function_">getContacts</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ContentResolver</span> <span class="variable">cr</span> <span class="operator">=</span> context.getContentResolver();</span><br><span class="line">        <span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> cr.query(phoneUri, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;ID, NUM, NAME&#125;, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">            <span class="comment">//随机生成id</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> String.valueOf((<span class="type">int</span>) (Math.random() * <span class="number">100000</span>));</span><br><span class="line">            <span class="meta">@SuppressLint(&quot;Range&quot;)</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cursor.getString(cursor.getColumnIndex(NAME));</span><br><span class="line">            <span class="meta">@SuppressLint(&quot;Range&quot;)</span> <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> cursor.getString(cursor.getColumnIndex(NUM));</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(id, name, num);</span><br><span class="line">            students.add(student);</span><br><span class="line">        &#125;</span><br><span class="line">        cursor.close();</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>支持在新的页面中学号和姓名，电话。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">holder.mMBtnUpdate.setOnClickListener(v-&gt;&#123;</span><br><span class="line">                Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(getActivity(),NewActivity.class);</span><br><span class="line">                intent.putExtra(<span class="string">&quot;id&quot;</span>,student.getId());</span><br><span class="line">                intent.putExtra(<span class="string">&quot;name&quot;</span>,student.getName());</span><br><span class="line">                intent.putExtra(<span class="string">&quot;phone&quot;</span>,student.getPhone());</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//activity_new.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.NewActivity&quot;</span>&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/newName&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;74dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;40dp&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;60dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;144dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;TextView&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/newId&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;74dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;40dp&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;60dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;72dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;TextView&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/newPhone&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;74dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;40dp&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;64dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;220dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;TextView&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/btnBack&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;返回&quot;</span></span><br><span class="line">        tools:layout_editor_absoluteX=<span class="string">&quot;204dp&quot;</span></span><br><span class="line">        tools:layout_editor_absoluteY=<span class="string">&quot;132dp&quot;</span> /&gt;</span><br><span class="line">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br><span class="line"><span class="comment">//NewActivity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TextView mNewId;</span><br><span class="line">    <span class="keyword">private</span> TextView mNewName;</span><br><span class="line">    <span class="keyword">private</span> TextView mNewPhone;</span><br><span class="line">    <span class="keyword">private</span> Button mBtnBack;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_new);</span><br><span class="line">        mNewId = findViewById(R.id.newId);</span><br><span class="line">        mNewName = findViewById(R.id.newName);</span><br><span class="line">        mNewPhone = findViewById(R.id.newPhone);</span><br><span class="line">        mBtnBack = findViewById(R.id.btnBack);</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line">        String id=intent.getStringExtra(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        String name=intent.getStringExtra(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String phone=intent.getStringExtra(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">        mNewId.setText(id);</span><br><span class="line">        mNewName.setText(name);</span><br><span class="line">        mNewPhone.setText(phone);</span><br><span class="line">        mBtnBack.setOnClickListener(v-&gt; &#123;</span><br><span class="line">            finish();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="实验七"><a href="#实验七" class="headerlink" title="实验七"></a>实验七</h3><ol><li><p><strong>在SQLite版本的班级名单基础上实现以下功能，设计修改列表项的Fragment页面，支持调用相机和读取图库中照片；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AndroidManifest.xml</span></span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.WRITE_CONTACTS&quot;</span> /&gt;</span><br><span class="line">    &lt;uses-permission android:name=<span class="string">&quot;android.permission.READ_CONTACTS&quot;</span> /&gt;</span><br><span class="line">    &lt;uses-permission android:name=<span class="string">&quot;android.permission.GET_ACCOUNTS&quot;</span> /&gt;</span><br><span class="line">    &lt;uses-permission android:name=<span class="string">&quot;android.permission.CALL_PHONE&quot;</span> /&gt;</span><br><span class="line">        &lt;provider</span><br><span class="line">            android:name=<span class="string">&quot;androidx.core.content.FileProvider&quot;</span></span><br><span class="line">            android:authorities=<span class="string">&quot;@string/file_provider&quot;</span></span><br><span class="line">            android:grantUriPermissions=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:exported=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">            &lt;meta-data</span><br><span class="line">                android:name=<span class="string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span><br><span class="line">                android:resource=<span class="string">&quot;@xml/file_paths&quot;</span>/&gt;</span><br><span class="line">        &lt;/provider&gt;</span><br><span class="line"><span class="comment">//xml文件夹下file_paths.xml</span></span><br><span class="line">&lt;paths&gt;</span><br><span class="line">    &lt;external-path</span><br><span class="line">        name=<span class="string">&quot;external_files&quot;</span></span><br><span class="line">        path=<span class="string">&quot;.&quot;</span> /&gt;</span><br><span class="line">&lt;/paths&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StuFragment</span></span><br><span class="line"><span class="comment">//为头像设置点击事件，选择头像是从拍照中获取还是从相册中获取</span></span><br><span class="line">        mImageView.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="keyword">final</span> String[] items=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;拍照&quot;</span>,<span class="string">&quot;相册&quot;</span>&#125;;</span><br><span class="line">            AlertDialog.Builder builder=<span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(getContext());</span><br><span class="line">            builder.setTitle(<span class="string">&quot;请选择头像获取方式&quot;</span>);</span><br><span class="line">            builder.setItems(items,<span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (which) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                            takePhoto();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            choosePhoto();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">choosePhoto</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);</span><br><span class="line">                    register.launch(intent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">takePhoto</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="type">File</span> <span class="variable">outputImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(getContext().getExternalCacheDir(), <span class="string">&quot;output_image.jpg&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (outputImage.exists()) outputImage.delete();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> getString(R.string.file_provider);</span><br><span class="line">                    imageUri = FileProvider.getUriForFile(getContext(), string, outputImage);</span><br><span class="line">                    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">                    intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);</span><br><span class="line">                    register.launch(intent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            builder.create().show();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>将拍摄的或选中的照片设置为该名单对应的头像，并在列表中更新显示；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StuFragment</span></span><br><span class="line"><span class="comment">//获取回传的图片设置成头像</span></span><br><span class="line">        register = registerForActivityResult(<span class="keyword">new</span> <span class="title class_">ActivityResultContracts</span>.StartActivityForResult(), result -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.getResultCode() == RESULT_OK) &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> result.getData();</span><br><span class="line">                <span class="comment">//判断是拍照还是选择照片</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (intent != <span class="literal">null</span> &amp;&amp; intent.getData() != <span class="literal">null</span>) &#123; <span class="comment">//选择照片</span></span><br><span class="line">                        <span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> intent.getData();</span><br><span class="line">                        <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> BitmapFactory.decodeStream(getContext().getContentResolver()</span><br><span class="line">                                .openInputStream(uri));</span><br><span class="line">                        mImageView.setImageBitmap(bitmap);</span><br><span class="line">                        image = bitmap2Bytes(bitmap);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;<span class="comment">//选择拍照</span></span><br><span class="line">                        <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> BitmapFactory.decodeStream(</span><br><span class="line">                                getContext().getContentResolver().openInputStream(imageUri));</span><br><span class="line">                        mImageView.setImageBitmap(bitmap);</span><br><span class="line">                        image = bitmap2Bytes(bitmap);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//为添加按钮设置点击事件，将输入的学生信息保存到数据库后展示到列表中</span></span><br><span class="line">mBtnAdd.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> mEditId.getText().toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> mEditName.getText().toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> mEditPhone.getText().toString();</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(id, name, phone,image);</span><br><span class="line">            mMyOpenHelper.insert(student1);</span><br><span class="line">            mStudentList = mMyOpenHelper.queryAll();</span><br><span class="line">            mStuAdapter.notifyDataSetChanged();</span><br><span class="line">            mEditId.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mEditName.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            mEditPhone.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//StuAdapter</span></span><br><span class="line"><span class="comment">//将bytes转换为Bitmap,将数组中的图片二进制转换成图片</span></span><br><span class="line">        <span class="keyword">private</span> Bitmap <span class="title function_">bytes2Bitmap</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> BitmapFactory.decodeByteArray(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> StuHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> mStudentList.get(position);</span><br><span class="line"></span><br><span class="line">            holder.mItemId.setText(student.getId());</span><br><span class="line">            holder.mItemName.setText(student.getName());</span><br><span class="line">            holder.mItemPhone.setText(student.getPhone());</span><br><span class="line">            <span class="type">byte</span>[] byteImage = student.getImage();</span><br><span class="line">            <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> bytes2Bitmap(byteImage);</span><br><span class="line">            holder.mImageView.setImageBitmap(bitmap);</span><br><span class="line"></span><br><span class="line">            holder.mBtnDel.setOnClickListener(v -&gt; &#123;</span><br><span class="line">                mMyOpenHelper.delete(student.getId());</span><br><span class="line">                mStudentList = mMyOpenHelper.queryAll();</span><br><span class="line">                mStuAdapter.notifyDataSetChanged();</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>将名单和图片文件的对应关系保存在SQLite数据库中，下次重启应用的时候可以看到名单的头像；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">insert</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">    <span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">    values.put(<span class="string">&quot;id&quot;</span>, student.getId());</span><br><span class="line">    values.put(<span class="string">&quot;name&quot;</span>, student.getName());</span><br><span class="line">    values.put(<span class="string">&quot;phone&quot;</span>, student.getPhone());</span><br><span class="line">    values.put(<span class="string">&quot;image&quot;</span>, student.getImage());</span><br><span class="line">    <span class="keyword">return</span> mWDB.insert(TABLE_NAME, <span class="literal">null</span>, values);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mWDB.delete(TABLE_NAME, <span class="string">&quot;id=?&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;id&#125;);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">    <span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">    values.put(<span class="string">&quot;name&quot;</span>, student.getName());</span><br><span class="line">    values.put(<span class="string">&quot;phone&quot;</span>, student.getPhone());</span><br><span class="line">    <span class="keyword">return</span> mWDB.update(TABLE_NAME, values, <span class="string">&quot;id=?&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;student.getId()&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> mRDB.query(TABLE_NAME, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> cursor.getString(<span class="number">0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cursor.getString(<span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> cursor.getString(<span class="number">2</span>);</span><br><span class="line">        <span class="type">byte</span>[] image = cursor.getBlob(<span class="number">3</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(id, name, phone,image);</span><br><span class="line">        list.add(student);</span><br><span class="line">    &#125;</span><br><span class="line">    cursor.close();</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>###实验八</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/11/10/git/"/>
      <url>/2023/11/10/git/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: git</span><br><span class="line">description: git</span><br><span class="line">date: 2023-11-10 15:59:00</span><br><span class="line">update: 2023-11-10 15:59:00</span><br><span class="line">tags:</span><br><span class="line">  - 计算机</span><br><span class="line">categories:</span><br><span class="line">  - git</span><br><span class="line">swiper_index: 15</span><br></pre></td></tr></table></figure><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户邮箱</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog或者git log</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr></tbody></table><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/10/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/10/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: 操作系统</span><br><span class="line">description: 操作系统</span><br><span class="line">date: 2023-10-28 11:45:00</span><br><span class="line">update: 2023-10-28 11:45:00</span><br><span class="line">tags:</span><br><span class="line">  - 课程</span><br><span class="line">categories:</span><br><span class="line">  - 操作系统</span><br><span class="line">swiper_index: 16</span><br></pre></td></tr></table></figure><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="进程的描述与控制"><a href="#进程的描述与控制" class="headerlink" title="进程的描述与控制"></a>进程的描述与控制</h2><h3 id="程序顺序执行"><a href="#程序顺序执行" class="headerlink" title="程序顺序执行"></a>程序顺序执行</h3><p>程序执行过程中通常存在顺序执行问题</p><ul><li>构成程序的若干个程序段之间</li><li>组成程序段的多条语句之间</li></ul><h4 id="程序顺序执行时的特征"><a href="#程序顺序执行时的特征" class="headerlink" title="程序顺序执行时的特征"></a>程序顺序执行时的特征</h4><ol><li><p>顺序性</p><p>处理机的操作，严格按照规定顺序执行</p></li><li><p>封闭性</p><ul><li>封闭环境下运行，程序独占全机资源</li><li>只有当前运行程序才能改变资源状态</li><li>程序执行结果不受外界因素的影响</li></ul></li><li><p>可再现性</p><p>只要程序执行时的环境和初始条件相同，程序重复执行结果相同</p></li></ol><h3 id="程序的并发执行"><a href="#程序的并发执行" class="headerlink" title="程序的并发执行"></a>程序的并发执行</h3><p>在一段时间里，多道程序一起共享计算机系统的资源，一起操作向前推进</p><h4 id="程序并发执行时的特征"><a href="#程序并发执行时的特征" class="headerlink" title="程序并发执行时的特征"></a>程序并发执行时的特征</h4><ol><li><p>间断性</p><p>”执行一暂停执行—执行”的活动规律</p></li><li><p>失去封闭性</p><p>系统资源共享及资源状态改变的多样性，致使程序运行失去封闭性，程序运行必然会受到其它程序的影响</p></li><li><p>不可再现性</p><p>并发执行的程序，计算结果与其执行速度及时间有关</p></li></ol><h3 id="进程的定义及特征"><a href="#进程的定义及特征" class="headerlink" title="进程的定义及特征"></a>进程的定义及特征</h3><h4 id="进程的引入"><a href="#进程的引入" class="headerlink" title="进程的引入"></a>进程的引入</h4><ul><li>并发、共享及多道程序环境</li><li>基于程序的概念已不能完整、有效地描述并发程序在内存中的运行状态</li><li>必须建立并发程序的新的描述和控制机制</li><li>基于程序段、数据段和进程控制块而引入进程的概念以对应程序的运行过程</li><li>进程控制块存放了进程标识符、进程运行的当前状态、程序和数据的地址以及关于该程序运行时的CPU环境信息</li></ul><h4 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h4><ol><li>进程是可并发执行的程序在一个数据集合上的运行过程，亦即进程实体的运行过程<br><strong>进程实体由程序段、数据段及进程控制块三部分构成</strong></li><li>进程是系统进行资源分配和调度的一个独立单位</li></ol><h4 id="进程的特征—-与程序的区别与联系"><a href="#进程的特征—-与程序的区别与联系" class="headerlink" title="进程的特征—-与程序的区别与联系"></a>进程的特征—-与程序的区别与联系</h4><ol><li><p>结构特征</p><p>程序段、数据段及进程控制块</p></li><li><p>动态性</p><p>生命周期及“执行”本质</p></li><li><p>并发性</p><p>共存于内存、宏观同时运行</p></li><li><p>独立性</p><p>调度、资源分配、运行</p></li><li><p>异步性</p><p>推进相互独立、速度不可预知</p></li></ol><h3 id="进程并发制约关系及临界区"><a href="#进程并发制约关系及临界区" class="headerlink" title="进程并发制约关系及临界区"></a>进程并发制约关系及临界区</h3><h4 id="并发进程间制约关系"><a href="#并发进程间制约关系" class="headerlink" title="并发进程间制约关系"></a>并发进程间制约关系</h4><p>资源共享关系—-间接制约</p><ul><li>多个进程彼此无关，完全不知道或只能间接感知其它进程的存在</li><li>系统须保证诸进程能互斥地访问临界资源</li><li>系统资源应统一分配，而不允许用户进程直接用</li></ul><p>相互合作关系—-直接制约<br>系统应保证相互合作的诸进程在执行次序上的协调和防止与时间有关的差错</p><h4 id="临界资源"><a href="#临界资源" class="headerlink" title="临界资源"></a>临界资源</h4><p>一段时间内只允许一个进程访问的资源。如 许多物理设备、变量及表格</p><h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><p>每个进程中访问临界资源的那段代码称为临界区<br>保证诸进程互斥地进入自己的临界区是实现它们对临界资源的互斥访问的充要条件（同一个临界资源）</p><h3 id="进程同步机制基本准则"><a href="#进程同步机制基本准则" class="headerlink" title="进程同步机制基本准则"></a>进程同步机制基本准则</h3><ol><li><p>空闲让进</p><p>当无进程处于临界区时，可允许一个请求进入临界区的进程立即进入自己的临界区</p></li><li><p>忙则等待</p><p>当已有进程进入自己的临界区时，所有企图进入临界区的进程必须等待</p></li><li><p>有限等待</p><p>对要求访问临界资源的进程，应保证该进程能在有限时间内进入自己的临界区</p></li><li><p>让权等待</p><p>当进程不能进入自己的临界区时，应释放处理机</p></li></ol><h3 id="进程互斥访问临界资源的软件解决方案"><a href="#进程互斥访问临界资源的软件解决方案" class="headerlink" title="进程互斥访问临界资源的软件解决方案"></a>进程互斥访问临界资源的软件解决方案</h3><h4 id="进程互斥算法1-设置访问编号"><a href="#进程互斥算法1-设置访问编号" class="headerlink" title="进程互斥算法1-设置访问编号"></a>进程互斥算法1-设置访问编号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Var turn：integer：=i；[全局变量]</span><br><span class="line"></span><br><span class="line">Pi：while turn!=i</span><br><span class="line"></span><br><span class="line">do no_op;</span><br><span class="line"></span><br><span class="line">临界区</span><br><span class="line"></span><br><span class="line">turn:=j;</span><br></pre></td></tr></table></figure><p>强制设置进程访问，违背了空闲让进</p><p>进不了临界区也没有让出处理器资源，违背了让权等待</p><h4 id="进程互斥算法2-设置访问标志"><a href="#进程互斥算法2-设置访问标志" class="headerlink" title="进程互斥算法2-设置访问标志"></a>进程互斥算法2-设置访问标志</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Var flagi,flagj:boolean:=false,false;[全局变量]</span><br><span class="line"></span><br><span class="line">Pi：while flagj</span><br><span class="line"></span><br><span class="line">do no_op;</span><br><span class="line"></span><br><span class="line">flagi:=true;</span><br><span class="line"></span><br><span class="line">临界区</span><br><span class="line"></span><br><span class="line">flagi:=false;</span><br></pre></td></tr></table></figure><p>违背了忙则等待和让权等待</p><h4 id="进程互斥算法3-设置欲访问标志"><a href="#进程互斥算法3-设置欲访问标志" class="headerlink" title="进程互斥算法3-设置欲访问标志"></a>进程互斥算法3-设置欲访问标志</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Var flagi,flagj:boolean:=false,false;[全局变量] </span><br><span class="line"></span><br><span class="line">Pi：flagi:=true;</span><br><span class="line"></span><br><span class="line">while flagj</span><br><span class="line"></span><br><span class="line">do no_op;</span><br><span class="line"></span><br><span class="line">临界区</span><br><span class="line"></span><br><span class="line">flagi:=false;</span><br></pre></td></tr></table></figure><p>违背了空闲让进、有限等待和让权等待</p><h4 id="进程互斥算法4-编号-标志（Peterson算法）"><a href="#进程互斥算法4-编号-标志（Peterson算法）" class="headerlink" title="进程互斥算法4-编号+标志（Peterson算法）"></a>进程互斥算法4-编号+标志（Peterson算法）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Var flagi,flagj:boolean:=false,false;[全局变量] </span><br><span class="line"></span><br><span class="line">turn：integer；</span><br><span class="line"></span><br><span class="line">Pi：flagi：=true；trun:=j;</span><br><span class="line"></span><br><span class="line">while(flagj and turn==j)</span><br><span class="line"></span><br><span class="line">do no_op;</span><br><span class="line"></span><br><span class="line">临界区</span><br><span class="line"></span><br><span class="line">flagi:=false;</span><br></pre></td></tr></table></figure><p>违背了让权等待</p><h3 id="整型信号量机制"><a href="#整型信号量机制" class="headerlink" title="整型信号量机制"></a>整型信号量机制</h3><p>整型信号量s（计算机资源可用的数量）除初始化外，仅能被两个标准的原子操作wait(s)和signal(s)亦即P&#x2F;V操作来访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wait(s)：while s&lt;=0 do no_op;</span><br><span class="line">    s:=s-1;</span><br><span class="line">signal(s):s:=s+1;</span><br></pre></td></tr></table></figure><p>违背了让权等待</p><h3 id="记录型信号量机制"><a href="#记录型信号量机制" class="headerlink" title="记录型信号量机制"></a>记录型信号量机制</h3><h4 id="信号量类型声明"><a href="#信号量类型声明" class="headerlink" title="信号量类型声明"></a>信号量类型声明</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type semphore=record//信号量</span><br><span class="line">value:integer;//&gt;=0表示对该信号量的可用资源数量，&lt;=0其绝对值表示阻塞队列的长度，即有多少个进程正在等待资源</span><br><span class="line">L:list of process;//当前等待使用资源的进程列表或者队列</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="wait（s）操作描述"><a href="#wait（s）操作描述" class="headerlink" title="wait（s）操作描述"></a>wait（s）操作描述</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">procedure wait(s)</span><br><span class="line">Var s:semphore;</span><br><span class="line">begin</span><br><span class="line">s.value:=s.value -1;</span><br><span class="line">if s.value&lt;0 then block(s.L);//&lt;0表示已经没有资源了，无资源则将该进程挂到阻塞队列</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="signal（s）操作描述"><a href="#signal（s）操作描述" class="headerlink" title="signal（s）操作描述"></a>signal（s）操作描述</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">procedure signal(s)</span><br><span class="line">Var s:semphore;</span><br><span class="line">begin</span><br><span class="line">s.value:=s.value 1;</span><br><span class="line">if s.value&lt;=0 then wakeup(s.L);//=0表示阻塞队列长度为|-1|，则需要唤醒被阻塞进程</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="AND型信号量集机制"><a href="#AND型信号量集机制" class="headerlink" title="AND型信号量集机制"></a>AND型信号量集机制</h3><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>对于多个进程要共享两个以上的资源的情况，记录型信号量机制侧可能由于使用不当而导致死锁的发生</p><p><strong>对于临界资源的互斥信号量的初始值为1</strong></p><h4 id="对策"><a href="#对策" class="headerlink" title="对策"></a>对策</h4><p>若干个临界资源的分配采取原子操作方式</p><h4 id="Swait（s1，s2，…，sn）操作"><a href="#Swait（s1，s2，…，sn）操作" class="headerlink" title="Swait（s1，s2，…，sn）操作"></a>Swait（s1，s2，…，sn）操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">procedure Swait(s1,s2,...sn)</span><br><span class="line">Var s1,s2,...,sn:semphore;</span><br><span class="line">begin</span><br><span class="line">if s1.value≥1 and..and s.value≥1</span><br><span class="line">then for i:=1 to n do</span><br><span class="line">si.value:=s .value -1;</span><br><span class="line">else blockProcessAndResetPC(sfirstless);//挂到第一个不能满足的信号量阻塞队列上，资源重新做申请操作</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="Swait详细"><a href="#Swait详细" class="headerlink" title="Swait详细"></a>Swait详细</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line">    Var zSbG:boolean:=false;</span><br><span class="line">    for i:=1 to n do</span><br><span class="line">    &#123;if (si.value &lt;1)</span><br><span class="line">    &#123;zSbG:=true;break;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (zSbG)</span><br><span class="line">    &#123;ResetPC();</span><br><span class="line">    block(si.L);&#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;for i:=1 to n do</span><br><span class="line">    si.value:=si.value -1;&#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="Ssignal（s1，s2，…，sn）操作"><a href="#Ssignal（s1，s2，…，sn）操作" class="headerlink" title="Ssignal（s1，s2，…，sn）操作"></a>Ssignal（s1，s2，…，sn）操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">procedure Ssignal(s1,s2,...,sn)</span><br><span class="line">Var s1,s2,...,sn semphore;</span><br><span class="line">begin</span><br><span class="line">for i:=1 to n do</span><br><span class="line">si.value:=si.value＋1;</span><br><span class="line">wakeup(si.L);</span><br><span class="line">endfor;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="一般信号量集机制"><a href="#一般信号量集机制" class="headerlink" title="一般信号量集机制"></a>一般信号量集机制</h3><h4 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h4><ul><li>记录型信号量及AND信号量集机制中，wait(s)和signal(s)操作仅能对信号量施以增1和减1的操作，即每次只能获得或释放一个单位的临界资源。当一次需d个某类临界资源时，便需要进行d次wait(s)操作，这显然是低效的。</li><li>此外，在有些情况下，要求当资源数量低于某一下限值时，便不予分配。故在每次分配之前，都必须测试该资源的数量是否不小于测试值t。</li><li>基于以上两点可以对AND信号量集机制进行扩充，形成一般化的“信号量集”机制。</li></ul><h4 id="Swait（s1，t1，d1，…，sn，tn，dn）操作"><a href="#Swait（s1，t1，d1，…，sn，tn，dn）操作" class="headerlink" title="Swait（s1，t1，d1，…，sn，tn，dn）操作"></a>Swait（s1，t1，d1，…，sn，tn，dn）操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">procedure Swait(s1,t1,d1,...,sn,tn,dn)</span><br><span class="line">Var s1,s2,...,sn:semphore;//信号量</span><br><span class="line">t,t2,…,tnd,d2,…,dn:integer;//d为申请多少资源，t为下限值</span><br><span class="line">begin</span><br><span class="line">ifs.value≥tand.…and sn.value≥tn</span><br><span class="line">then for i:=1 to n do</span><br><span class="line">si.value:=si.value -di;</span><br><span class="line">else blockProcessAndResetPC(sfirstless);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="Swait详细-1"><a href="#Swait详细-1" class="headerlink" title="Swait详细"></a>Swait详细</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line">Var zSbG:boolean:=false;</span><br><span class="line">for i:=1 to n do</span><br><span class="line">&#123;if (si.value &lt;t</span><br><span class="line">&#123;zSbG:=true;break;&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (zSbG)</span><br><span class="line">&#123;ResetPC();</span><br><span class="line">block(si.L);&#125;</span><br><span class="line">else</span><br><span class="line">&#123;for i:=1 to n do</span><br><span class="line">si.value:=si.value di;&#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="Ssignal（s1，d1，…，sn，dn）操作"><a href="#Ssignal（s1，d1，…，sn，dn）操作" class="headerlink" title="Ssignal（s1，d1，…，sn，dn）操作"></a>Ssignal（s1，d1，…，sn，dn）操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">procedure Ssignal(s1,d1,...sn,dn)</span><br><span class="line">Var s1,s2,...,s:semphore;</span><br><span class="line">d1,d2,…,dn:integer;,</span><br><span class="line">begin</span><br><span class="line">for i:=1 to n do</span><br><span class="line">si.value:=si.value d;</span><br><span class="line">wakeup(si.L);</span><br><span class="line">endfor;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="一般信号量集的几种特殊情况"><a href="#一般信号量集的几种特殊情况" class="headerlink" title="一般信号量集的几种特殊情况"></a>一般信号量集的几种特殊情况</h4><h5 id="Swait-s-d-d"><a href="#Swait-s-d-d" class="headerlink" title="Swait(s,d,d)"></a>Swait(s,d,d)</h5><p>信号量集中只有一个信号量，但它允许每次申请d个资源；当现有资源少于d个时，便不予分配</p><h5 id="Swait-s-1-1"><a href="#Swait-s-1-1" class="headerlink" title="Swait(s,1,1)"></a>Swait(s,1,1)</h5><p>此时的信号量集已退化为一般的记录型信号量</p><h5 id="Swait-s-1-0"><a href="#Swait-s-1-0" class="headerlink" title="Swait(s,1,0)"></a>Swait(s,1,0)</h5><ul><li>一种特殊且很有用的信号量，相当于可控开关</li><li>当s≥1时，允许多个进程进入某特定区；当s变为0后，将阻止任何进程进入该特定区</li></ul><h3 id="基于信号量机制解决进程并发问题的应用基础"><a href="#基于信号量机制解决进程并发问题的应用基础" class="headerlink" title="基于信号量机制解决进程并发问题的应用基础"></a>基于信号量机制解决进程并发问题的应用基础</h3><h4 id="利用信号量实现互斥—-主程序"><a href="#利用信号量实现互斥—-主程序" class="headerlink" title="利用信号量实现互斥—-主程序"></a>利用信号量实现互斥—-主程序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Var mutex:semphore:=1;//互斥信号量，且初始值必须为1</span><br><span class="line">begin</span><br><span class="line">parbegin//表示process1和process2可以并发执行</span><br><span class="line">processl;</span><br><span class="line">process2;</span><br><span class="line">parend</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="利用信号量实现互斥—-子程序"><a href="#利用信号量实现互斥—-子程序" class="headerlink" title="利用信号量实现互斥—-子程序"></a>利用信号量实现互斥—-子程序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">process1:</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">wait(mutex);</span><br><span class="line">临界区</span><br><span class="line">signal(mutex);</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h3><h4 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h4><ol><li><p>生产者一消费者问题是相互合作进程关系的一种抽象</p><ul><li>输入时的输入进程与计算进程</li><li>输出时的计算进程与输出进程</li></ul></li><li><p>生产者一消费者问题具有很大的代表性和实用价值</p><p>计算机系统一IPO系统</p></li></ol><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>一群生产者进程在生产数据，并将此数据提供给一群消费者进程去消费处理</li><li>为使二者可以并发执行，在它们之间设置了一个具有n个缓冲区的循环缓冲，生产者进程可以将它所生产的数据放入一个缓冲区中，消费者进程可以从一个缓冲区中取得一个数据消费</li><li>异步运行方式及彼此必须保持同步</li></ul><h4 id="问题剖析"><a href="#问题剖析" class="headerlink" title="问题剖析"></a>问题剖析</h4><h5 id="空缓冲区和满缓冲区"><a href="#空缓冲区和满缓冲区" class="headerlink" title="空缓冲区和满缓冲区"></a>空缓冲区和满缓冲区</h5><ul><li>空缓冲区是指未投放数据或虽曾投放数据但对应数据已被取走的缓冲区</li><li>满缓冲区则指已投放数据且对应数据尚未被取走的缓冲区</li></ul><h5 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h5><ul><li>当生产者进程要把所生产的数据送入循环缓冲时，首先应检查是否有空缓冲区存在，若有，则可向对应空缓冲区中投放数据，同时通知逍费者进程；否则只有等待。</li><li>当消费者进程要从循环缓冲中提取数据时，首先应检查是否有满缓冲区存在，若有，则从对应满缓冲区中提取数据，并通知生产者进程，否则只有等待</li></ul><h5 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h5><p>缓冲区及其“指针”是临界资源：多个生产者&#x2F;消费者进程</p><h4 id="程序变量设计"><a href="#程序变量设计" class="headerlink" title="程序变量设计"></a>程序变量设计</h4><h5 id="循环缓冲表示机制"><a href="#循环缓冲表示机制" class="headerlink" title="循环缓冲表示机制"></a>循环缓冲表示机制</h5><p>一维数组ouffer::array[0.n-l]of item;</p><h5 id="输入指针in"><a href="#输入指针in" class="headerlink" title="输入指针in"></a>输入指针in</h5><ul><li>指示下一个可以投放数据的缓冲区</li><li>初始值为0；变化方式：in:&#x3D;(in+1) mod n</li></ul><h5 id="输出指针out"><a href="#输出指针out" class="headerlink" title="输出指针out"></a>输出指针out</h5><ul><li>指示下一个可以获取数据的缓冲区</li><li>初始值为0；变化方式：out:&#x3D;(out+1) mod n</li></ul><h5 id="暂存数据"><a href="#暂存数据" class="headerlink" title="暂存数据"></a>暂存数据</h5><p>nextp&#x2F;nextc暂存每次要生产或消费的数据</p><h4 id="程序信号量的设计"><a href="#程序信号量的设计" class="headerlink" title="程序信号量的设计"></a>程序信号量的设计</h4><h5 id="循环缓冲（缓冲区及其指针）的互斥使用"><a href="#循环缓冲（缓冲区及其指针）的互斥使用" class="headerlink" title="循环缓冲（缓冲区及其指针）的互斥使用"></a>循环缓冲（缓冲区及其指针）的互斥使用</h5><p>互斥信号量mutex,初始值为1</p><h5 id="资源信号量"><a href="#资源信号量" class="headerlink" title="资源信号量"></a>资源信号量</h5><ul><li>empty表示循环缓冲中的空缓冲区的数量其初始值为n</li><li>full表示循环缓冲中的满缓冲区的数量，其初始值为0</li></ul><h4 id="主程序设计"><a href="#主程序设计" class="headerlink" title="主程序设计"></a>主程序设计</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Var buffer:array [0..n-1]of item;//循环缓冲</span><br><span class="line">in,out:integer :0,0;//输入输出指针</span><br><span class="line">mutex,empty,full semphore :=1,n,0</span><br><span class="line">begin</span><br><span class="line">parbegin</span><br><span class="line">producer1;..produceri;...producerY;</span><br><span class="line">consumer1;..consumerj;...;consumerX；</span><br><span class="line">parend</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="生产者子程序设计"><a href="#生产者子程序设计" class="headerlink" title="生产者子程序设计"></a>生产者子程序设计</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">produceri;:</span><br><span class="line">Var nextp:item;</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">produce an item in nextp;</span><br><span class="line">wait(empty);</span><br><span class="line">wait(mutex);</span><br><span class="line">buffer[in]:=nextp;in :=(in+1)mod n;</span><br><span class="line">signal(mutex);</span><br><span class="line">signal(full);</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="消费者子程序设计"><a href="#消费者子程序设计" class="headerlink" title="消费者子程序设计"></a>消费者子程序设计</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">consumerj:</span><br><span class="line">Var nextc:item;</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">wait(full);</span><br><span class="line">        wait(mutex);</span><br><span class="line">nextc:=buffer[out];out:=(out+1)mod n</span><br><span class="line">signal(mutex);</span><br><span class="line">signal(empty);</span><br><span class="line">consume.the item in nextc;</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="初步解决方案的反思"><a href="#初步解决方案的反思" class="headerlink" title="初步解决方案的反思"></a>初步解决方案的反思</h4><h5 id="关于相邻wait（signal）操作颠倒的分析"><a href="#关于相邻wait（signal）操作颠倒的分析" class="headerlink" title="关于相邻wait（signal）操作颠倒的分析"></a>关于相邻wait（signal）操作颠倒的分析</h5><p>在生产者一消费者问题中，如果将两个wait操作即wait(full)和wait(nutex)互换位置；或者是将signal((mutex)与signal(full)互换位置，结果会如何？</p><ol><li><p>wait(full)和wait(mutex)互换位置</p><ul><li><p>消费者wait(mutex)&#x3D;&gt;wait(full)</p></li><li><p>生产者wait(empty)&#x3D;&gt;wait(mutex)</p></li><li><p>时间节点：循环缓冲均为空缓冲区时</p></li><li><p>陷入死锁</p></li></ul></li><li><p>signal(mutex)与signal(full)互换位置</p><p>没有影响</p></li></ol><h5 id="关于signal操作缺失的分析"><a href="#关于signal操作缺失的分析" class="headerlink" title="关于signal操作缺失的分析"></a>关于signal操作缺失的分析</h5><p>在生产者一消费者问题中，如果缺少了signal(full)或signal(empty),对执行结果会有何影响？</p><ol><li>缺少了signal（full）<ul><li>生产者：开始—&gt;生产者生产数据填满n个缓冲区时—-&gt;陷入死锁</li><li>消费者：等待full信号量—-&gt;陷入死锁</li></ul></li><li>缺少了signal（empty）<ul><li>生产者：等待empty信号量—-&gt;陷入死锁</li><li>消费者：开始—-&gt;消费者取走了n个缓冲区数据时—-&gt;陷入死锁</li></ul></li></ol><h4 id="基于AND信号量的生产-x2F-消费者子程序设计"><a href="#基于AND信号量的生产-x2F-消费者子程序设计" class="headerlink" title="基于AND信号量的生产&#x2F;消费者子程序设计"></a>基于AND信号量的生产&#x2F;消费者子程序设计</h4><h5 id="生产者子程序"><a href="#生产者子程序" class="headerlink" title="生产者子程序"></a>生产者子程序</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">produceri;:</span><br><span class="line">Var nextp:item;</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">produce an item in nextp;</span><br><span class="line">Swait(empty,mutex);</span><br><span class="line">buffer[in]:=nextp;in :=(in+1)mod n;</span><br><span class="line">Ssignal(mutex,full);</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="消费者子程序"><a href="#消费者子程序" class="headerlink" title="消费者子程序"></a>消费者子程序</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">consumerj:</span><br><span class="line">Var nextc:item;</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">Swait(full,mutex);</span><br><span class="line">nextc:=buffer[out];out:=(out+1)mod n</span><br><span class="line">Ssignal(mutex,empty);</span><br><span class="line">consume.the item in nextc;</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="同步问题程序设计要领"><a href="#同步问题程序设计要领" class="headerlink" title="同步问题程序设计要领"></a>同步问题程序设计要领</h4><ul><li>每个并发子程序关于互斥信号量的wait与signal操作必须在同一子程序中成对出现</li><li>关于资源信号量的wait与signal操作同样需成对出现，但可以分别处于不同的并发子程序中</li><li>每个并发子程序中的多个wait操作的顺序不能颠倒，即资源信号量wait操作执行在前而互斥信号量wait操作执行在后，否则可能引起死锁</li><li>每个并发子程序中的多个signal操作的执行顺序无关紧要</li><li>非临界资源访问操作无需放到临界区中，且最好放到临界区外</li></ul><h4 id="ZGS版"><a href="#ZGS版" class="headerlink" title="ZGS版"></a>ZGS版</h4><h5 id="主程序设计-1"><a href="#主程序设计-1" class="headerlink" title="主程序设计"></a>主程序设计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Var buffer:array [0..n-1]of item;</span><br><span class="line">in,out:integer :=0,0;</span><br><span class="line">mutexP,mutexC,empty,full semphore :=1,1,n,0；</span><br><span class="line">begin</span><br><span class="line">parbegin</span><br><span class="line">producer;..produceri;...producery;</span><br><span class="line">consumer;...consumerj;...;consumerx;</span><br><span class="line">parend</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="生产者子程序设计ZGS版"><a href="#生产者子程序设计ZGS版" class="headerlink" title="生产者子程序设计ZGS版"></a>生产者子程序设计ZGS版</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">produceri:</span><br><span class="line">Var nextp:item;</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">produce an item in nextp;</span><br><span class="line">wait(empty);</span><br><span class="line">wait(mutexP);</span><br><span class="line">buffer[in]:=nextp;in :=(in+1)mod n;</span><br><span class="line">signal(mutexP);</span><br><span class="line">signal(full);</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="消费者子程序设计ZGS版"><a href="#消费者子程序设计ZGS版" class="headerlink" title="消费者子程序设计ZGS版"></a>消费者子程序设计ZGS版</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">consumerj:</span><br><span class="line">Var nextc:item;</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">wait(full);</span><br><span class="line">wait(mutexC);</span><br><span class="line">nextc:=buffer[out];out :=(out+1) mod n;</span><br><span class="line">signal(mutexC);</span><br><span class="line">signal(empty);</span><br><span class="line">consume the item in nextc;</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="哲学家进餐"><a href="#哲学家进餐" class="headerlink" title="哲学家进餐"></a>哲学家进餐</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>哲学家进餐问题是典型的同步问题</p><ul><li>五个哲学家共用一张圆桌，分别坐在环桌均匀摆放的五张椅子上，并全部实践着交替地进行思考和进餐的生活方式</li><li>圆桌上放有五支筷子，均匀排放在哲学家之间的位置上</li><li>哲学家饥饿时便试图去取用圆桌上最靠近他左右两端的两支筷子，且只有在同时拿到两支筷子时方可进餐，进餐完毕则把筷子放回原处，并继续进行思考</li></ul><h4 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h4><ol><li><p>筷子是临界资源<br>信号量数组chopstick[0..4],初始值均为1</p></li><li><p>第i个哲学家活动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Think;</span><br><span class="line">wait(chopstick[i]);</span><br><span class="line">wait(chopstick[(i+1)mod 5])</span><br><span class="line">Eat;</span><br><span class="line">signal(chopstick[i]);</span><br><span class="line">signal(chopstick[(i+1)mod 5]);</span><br></pre></td></tr></table></figure></li><li><p>上述解决方案在五个哲学家同时饥饿且各自拿起左边筷子的情况下会引起死锁</p></li><li><p>避免死锁的三种方法</p><ul><li>仅当哲学家左右两支筷子均可使用时，才允许他拿筷进餐</li><li>奇数号哲学家先拿左筷后拿右筷；而偶数号哲学家则相反</li><li>至多允许四个哲学家同时进餐，以保证至少有一个哲学家可以同时拿到两支筷子而进餐</li></ul></li></ol><h4 id="双筷齐举-AND型信号量"><a href="#双筷齐举-AND型信号量" class="headerlink" title="双筷齐举[AND型信号量]"></a>双筷齐举[AND型信号量]</h4><h5 id="主程序设计-2"><a href="#主程序设计-2" class="headerlink" title="主程序设计"></a>主程序设计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Var</span><br><span class="line">chopstick:array[0..4]of semphore:=(1,1,1,1,1)</span><br><span class="line">begin</span><br><span class="line">parbegin</span><br><span class="line">philosophy0;</span><br><span class="line">…;philosophyi;…</span><br><span class="line">philosophya;</span><br><span class="line">parend</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="子程序设计"><a href="#子程序设计" class="headerlink" title="子程序设计"></a>子程序设计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">philosophyi:</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">Think;</span><br><span class="line">Swait(chopstick[i],chopstick[(i+1)mod 5]);</span><br><span class="line">Eat;</span><br><span class="line">Ssignal(chopstick[i],chopstick[(i+1)mod 5]);</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="双筷齐举-记录型信号量"><a href="#双筷齐举-记录型信号量" class="headerlink" title="双筷齐举[记录型信号量]"></a>双筷齐举[记录型信号量]</h4><h5 id="主程序设计-3"><a href="#主程序设计-3" class="headerlink" title="主程序设计"></a>主程序设计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Var</span><br><span class="line">chopstick:array[0..4]of semphore:=(1,1,1,1,1)</span><br><span class="line">mutex:semphore:=1;</span><br><span class="line">begin</span><br><span class="line">parbegin</span><br><span class="line">philosophy0;</span><br><span class="line">…;philosophyi;…</span><br><span class="line">philosophya;</span><br><span class="line">parend</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="子程序设计-1"><a href="#子程序设计-1" class="headerlink" title="子程序设计"></a>子程序设计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">philosophyi:</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">Think;</span><br><span class="line">wait(mutex);</span><br><span class="line">wait(chopstick[i]);</span><br><span class="line">wait(chopstick[(i+1)mod 5]);</span><br><span class="line">signal(mutex);</span><br><span class="line">Eat;</span><br><span class="line">signal(chopstick[i]);</span><br><span class="line">signal(chopstick[(i+1)mod 5]);</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="奇偶有别-记录型信号量"><a href="#奇偶有别-记录型信号量" class="headerlink" title="奇偶有别[记录型信号量]"></a>奇偶有别[记录型信号量]</h4><h5 id="主程序设计-4"><a href="#主程序设计-4" class="headerlink" title="主程序设计"></a>主程序设计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Var</span><br><span class="line">chopstick:array[0..4]of semphore:=(1,1,1,1,1)</span><br><span class="line">begin</span><br><span class="line">parbegin</span><br><span class="line">philosophy0;</span><br><span class="line">…;philosophyi;…</span><br><span class="line">philosophya;</span><br><span class="line">parend</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="子程序设计-奇数"><a href="#子程序设计-奇数" class="headerlink" title="子程序设计[奇数]"></a>子程序设计[奇数]</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">philosophyi（i为奇数，即奇数号哲学家）：</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">Think;</span><br><span class="line">wait(chopstick[i]);</span><br><span class="line">wait(chopstick[(i+1)mod 5]);</span><br><span class="line">Eat;</span><br><span class="line">signal(chopstick[i]);</span><br><span class="line">signal(chopstick[(i+1)mod 5]);</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="子程序设计-偶数"><a href="#子程序设计-偶数" class="headerlink" title="子程序设计[偶数]"></a>子程序设计[偶数]</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">philosophyi（i为偶数，即偶数号哲学家）：</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">Think;</span><br><span class="line">wait(chopstick[(i+1)mod 5]);</span><br><span class="line">wait(chopstick[i]);</span><br><span class="line">Eat;</span><br><span class="line">signal(chopstick[(i+1)mod 5]);</span><br><span class="line">signal(chopstick[i]);</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="进餐限数-记录型信号量"><a href="#进餐限数-记录型信号量" class="headerlink" title="进餐限数[记录型信号量]"></a>进餐限数[记录型信号量]</h4><h5 id="主程序设计-5"><a href="#主程序设计-5" class="headerlink" title="主程序设计"></a>主程序设计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Var</span><br><span class="line">chopstick:array[0..4]of semphore:=(1,1,1,1,1);</span><br><span class="line">limit:semphore:=4;</span><br><span class="line">begin</span><br><span class="line">parbegin</span><br><span class="line">philosophy0;</span><br><span class="line">…;philosophyi;…</span><br><span class="line">philosophya;</span><br><span class="line">parend</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="子程序设计-2"><a href="#子程序设计-2" class="headerlink" title="子程序设计"></a>子程序设计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">philosophyi:</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">Think;</span><br><span class="line">wait(limit);</span><br><span class="line">wait(chopstick[i]);</span><br><span class="line">wait(chopstick[(i+1)mod 5]);</span><br><span class="line">signal(limit);</span><br><span class="line">Eat;</span><br><span class="line">signal(chopstick[i]);</span><br><span class="line">signal(chopstick[(i+1)mod 5]);</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="读者-写者"><a href="#读者-写者" class="headerlink" title="读者-写者"></a>读者-写者</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><ol><li>读者一写者问题是指保证任何写者进程必须与其它进程互斥地访问共享数据对象（数据文件或记录)的同步问题。<ul><li>存在多个进程共享一个数据对象</li><li>只要求读的进程称为读者进程</li><li>拥有写或修改要求的进程称为写者进程</li><li>允许多个读者进程同时执行读操作</li><li>任何写者进程的执行具有排它性</li></ul></li><li>读者一写者问题常用于测试新同步原语</li></ol><h4 id="程序信号量及变量设计"><a href="#程序信号量及变量设计" class="headerlink" title="程序信号量及变量设计"></a>程序信号量及变量设计</h4><ol><li><p>写者进程与其它进程的互斥执行</p><p>写互斥信号量wmutex,初始值为1</p></li><li><p>读者进程之间的并发执行</p><p>读者进程计数变量readercount,表示正在执行的读者进程数量，其初始值为0</p></li><li><p>读者进程计数变量的互斥访问</p><p>readercounti对于多个读者进程而言是临界资源，应为之设置读互斥信号量rmutex,其初始值为1</p></li></ol><h4 id="主程序设计-6"><a href="#主程序设计-6" class="headerlink" title="主程序设计"></a>主程序设计</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Var readercount:integer 0;</span><br><span class="line">rmutex,wmutex:semphore :=1,1;</span><br><span class="line">begin</span><br><span class="line">parbegin</span><br><span class="line">reader;...;readeri ;...readerm;</span><br><span class="line">writer;..;writerj;..;writern;</span><br><span class="line">parend</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="写者子程序设计"><a href="#写者子程序设计" class="headerlink" title="写者子程序设计"></a>写者子程序设计</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">writerj:</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">wait(wmutex);</span><br><span class="line">Perform write operation;</span><br><span class="line">signal(wmutex);</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="读者子程序设计"><a href="#读者子程序设计" class="headerlink" title="读者子程序设计"></a>读者子程序设计</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">readeri:</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">wait(rmutex);</span><br><span class="line">if readercount=0 then wait(wmutex);</span><br><span class="line">readercount:=readercount +1;</span><br><span class="line">signal(rmutex);</span><br><span class="line">Perform read operation;</span><br><span class="line">wait(rmutex);</span><br><span class="line">readercount:=readercount -1;</span><br><span class="line">if readercount=0 then signal(wmutex)</span><br><span class="line">signal(rmutex);</span><br><span class="line">until false:</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h4><ol><li>如果读者到来<ul><li>若为第一个读者：若无写者写，则开始读；否则插入wmutex队列等待</li><li>若非第一个读者：若前有读者在读（无论是否有写者已在等待)，新读者均开始读：否则插入rmutex队列[前面读者在等]等待</li></ul></li><li>如果写者到来<ul><li>无写者写且无读者读，则新写者开始写</li><li>有写者写或有读者读，则插入wmutex队列等待</li></ul></li></ol><h4 id="消除读者优先"><a href="#消除读者优先" class="headerlink" title="消除读者优先"></a>消除读者优先</h4><ol><li>一旦有写者到达，则后续的读者必须等待（无论当时是否有读者在读）</li><li>如果读者到来<ul><li>有写者写或有写者等，则新读者等待</li><li>无写者写且无写者等，则新读者可读</li></ul></li><li>如果写者到来<ul><li>无读者读且无写者写，则新写者可写</li><li>有读者读或有写者写，则新写者等待</li></ul></li></ol><h4 id="公平型读者-写者"><a href="#公平型读者-写者" class="headerlink" title="公平型读者-写者"></a>公平型读者-写者</h4><h5 id="主程序设计-7"><a href="#主程序设计-7" class="headerlink" title="主程序设计"></a>主程序设计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Var readercount:integer 0;</span><br><span class="line">S,rmutex,wmutex:semphore :=1,1,1;</span><br><span class="line">begin</span><br><span class="line">parbegin</span><br><span class="line">reader;...;readeri ;...readerm;</span><br><span class="line">writer;..;writerj;..;writern;</span><br><span class="line">parend</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="读者子程序设计-1"><a href="#读者子程序设计-1" class="headerlink" title="读者子程序设计"></a>读者子程序设计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">readeri:</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">wait(S);</span><br><span class="line">wait(rmutex);</span><br><span class="line">if readercount=0 then wait(wmutex);</span><br><span class="line">readercount:=readercount +1;</span><br><span class="line">signal(rmutex);</span><br><span class="line">signal(S);</span><br><span class="line">Perform read operation;</span><br><span class="line">wait(rmutex);</span><br><span class="line">readercount:=readercount -1;</span><br><span class="line">if readercount=0 then signal(wmutex)</span><br><span class="line">signal(rmutex);</span><br><span class="line">until false:</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="写者子程序设计-1"><a href="#写者子程序设计-1" class="headerlink" title="写者子程序设计"></a>写者子程序设计</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">writerj:</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">wait(S)；</span><br><span class="line">wait(wmutex);</span><br><span class="line">Signal(S);</span><br><span class="line">Perform write operation;</span><br><span class="line">signal(wmutex);</span><br><span class="line">until false;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="存储器管理"><a href="#存储器管理" class="headerlink" title="存储器管理"></a>存储器管理</h2><p><strong>程序的执行首先要加载装入到内存，然后程序的运行从内存提取加载到CPU执行，重点如何把程序里的地址转化成内存的物理单元的物理地址</strong></p><h3 id="用户程序处理过程"><a href="#用户程序处理过程" class="headerlink" title="用户程序处理过程"></a>用户程序处理过程</h3><p>源程序（符号名空间）</p><p><strong>编译程序</strong></p><p>目标模块（目标&#x2F;相对地址空间）</p><p><strong>链接程序</strong></p><p>装入模块（统一的目标地址空间）</p><p><strong>装入程序</strong></p><p>内存（物理地址空间）</p><h3 id="程序处理与内存管理"><a href="#程序处理与内存管理" class="headerlink" title="程序处理与内存管理"></a>程序处理与内存管理</h3><h4 id="程序地址空间及形成"><a href="#程序地址空间及形成" class="headerlink" title="程序地址空间及形成"></a>程序地址空间及形成</h4><ul><li>目标模块（由编译&#x2F;汇编得到）：相对地址</li><li>链接过程实现各目标模块相对地址的统一</li></ul><h4 id="内存管理逻辑部件"><a href="#内存管理逻辑部件" class="headerlink" title="内存管理逻辑部件"></a>内存管理逻辑部件</h4><ul><li>MMU负责将逻辑地址转换为物理地址</li><li>X86体系结构MMU支持分页和分段机制</li></ul><h4 id="内存管理模式"><a href="#内存管理模式" class="headerlink" title="内存管理模式"></a>内存管理模式</h4><p>实模式和保护模式</p><h2 id="操作系统概论"><a href="#操作系统概论" class="headerlink" title="操作系统概论"></a>操作系统概论</h2><h3 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h3><h4 id="INTERFACE（接口、界面、介面）"><a href="#INTERFACE（接口、界面、介面）" class="headerlink" title="INTERFACE（接口、界面、介面）"></a>INTERFACE（接口、界面、介面）</h4><p>接口是连接两个物体的边界，通过这个界面，两边可以很好地对话</p><ul><li>硬件-硬件：USB、VGA、HDML、</li><li>软件-硬件：指令集</li><li>软件-软件：Application Programming Interface（API）</li></ul><h4 id="VIRTUAL-MACHINE"><a href="#VIRTUAL-MACHINE" class="headerlink" title="VIRTUAL MACHINE"></a>VIRTUAL MACHINE</h4><p>操作系统向用户提供一个容易理解和使用的“计算机”（虚拟的)，用户对这个“计算机”的操作都将被操作系统转成对计算机硬件的操作</p><h4 id="操作系统功能"><a href="#操作系统功能" class="headerlink" title="操作系统功能"></a>操作系统功能</h4><h5 id="用户角度"><a href="#用户角度" class="headerlink" title="用户角度"></a>用户角度</h5><ul><li>提供良好的用户界面</li><li>标准的函数库</li><li>使得编程更加方便并且不<br>容易出错</li></ul><h5 id="系统角度"><a href="#系统角度" class="headerlink" title="系统角度"></a>系统角度</h5><ul><li>管理资源<ul><li>硬件资源（处理机，存储器，设备)</li><li>信息资源（文件）</li></ul></li><li>解决申请资源时产生的冲突</li><li>阻止错误的产生和对计算机不正当的使用</li></ul><h4 id="操作系统的定义"><a href="#操作系统的定义" class="headerlink" title="操作系统的定义"></a>操作系统的定义</h4><ol><li>操作系统在用户和计算机硬件之间扮演了中间人的角色</li><li>操作系统的目标是为提供一个方便高效执行代码的环境</li><li>操作系统是管理计算机硬件的软件</li></ol><h4 id="计算机系统的组成"><a href="#计算机系统的组成" class="headerlink" title="计算机系统的组成"></a>计算机系统的组成</h4><ul><li>memory</li><li>CPU</li><li>disk controller-&gt;disks</li><li>mouse、keyboard、printer、monitor-&gt;USB controller</li><li>monitor-&gt;graphics adapter(显示适配器)-&gt;显卡</li><li>Bus</li></ul><h5 id="主引导扇区（BOOT-SECTOR）"><a href="#主引导扇区（BOOT-SECTOR）" class="headerlink" title="主引导扇区（BOOT SECTOR）"></a>主引导扇区（BOOT SECTOR）</h5><ol><li>硬盘的0柱面、0磁头、1扇区称为主引导扇区，在这扇区里存放着一段代码：主引导记录MBR(Main Boot Record),它用于硬盘启动时将系统控制权转给用户指定的、在分区表中登记了某个操作系统分区</li><li>MBR的内容是在硬盘分区时由分区软件写入该扇区的，MBR不属于任何一个操作系统，不随操作系统的不同而不同，即使不同，MBR也不会夹带操作系统的性质，具有公共引导的特性</li></ol><h5 id="BOOTSTRAP-gt-OS自己把自己拉启动"><a href="#BOOTSTRAP-gt-OS自己把自己拉启动" class="headerlink" title="BOOTSTRAP-&gt;OS自己把自己拉启动"></a>BOOTSTRAP-&gt;OS自己把自己拉启动</h5><p>Pull oneself up by one’s bootstraps.</p><h5 id="BOOTSTRAP-OF-COMPUTER"><a href="#BOOTSTRAP-OF-COMPUTER" class="headerlink" title="BOOTSTRAP OF COMPUTER"></a>BOOTSTRAP OF COMPUTER</h5><ul><li>打开电源</li><li>CPU将控制权交给BIOS（基本输入输出系统，存放在CMOS中)</li><li>BIOS运行一个程序：通电自测试程序</li><li>BIOS确认所有外部设备：硬盘或扩充卡</li><li>BIOS找到磁盘的引导区，将其中的主引导程序bootloader装入内存。（主引导程序是一段代码，它可以将OS余下部分装入内存)</li><li>引导操作系统结束，操作系统接管计算机</li><li>操作系统等待事件发生…</li></ul><h5 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h5><ul><li>当有事件（Event)发生时，CPU会收到一个中断(Interrupt)信号，可以是硬中断也可以是软件中断。</li><li>CPU会停下正在做的事，转而执行中断处理程序执行完毕会回到之前被中断的地方继续执行。</li><li>操作系统是一个以中断驱动的系统</li></ul><h5 id="STORAGE-SYSTEM-存储系统"><a href="#STORAGE-SYSTEM-存储系统" class="headerlink" title="STORAGE SYSTEM(存储系统)"></a>STORAGE SYSTEM(存储系统)</h5><ol><li>CPU负责将指令(Instruction)从内存（Memory)读入，所以程序必须在内存中才能运行。</li><li>内存以字节为存储单位，每个字节都有一个地址与之对应。通过load&#x2F;store:指令即可访问指定地址的内存数据<ul><li>load:将内存数据装入寄存器(Register)</li><li>store:将寄存器数据写入内存</li></ul></li></ol><h5 id="I-x2F-O结构"><a href="#I-x2F-O结构" class="headerlink" title="I&#x2F;O结构"></a>I&#x2F;O结构</h5><ul><li>存储器只是众多IO设备中的一种，IO设备是计算机体系结构中种类最丰富的设备类型，而且他有着很强的扩展性。</li><li>管理IO设备是操作系统非常重要的组成部分，操作系统中有一个专门的O子系统负责完成这项工作。</li></ul><h4 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h4><h5 id="单处理器系统"><a href="#单处理器系统" class="headerlink" title="单处理器系统"></a>单处理器系统</h5><ul><li>Single-processor System</li><li>只有一颗主CPU,执行通用指令集。</li><li>带有其他专用处理器，为特定设备服务，如：磁盘、键盘、图形控制器等。<ul><li>它们能够执行的指令有限，不处理用户进程</li><li>操作系统会向它们发出任务，并监控它们的状态</li></ul></li></ul><h5 id="多处理器系统"><a href="#多处理器系统" class="headerlink" title="多处理器系统"></a>多处理器系统</h5><ul><li>Multiprocessor&#x2F;Multicore System</li><li>有两个或多个紧密通信的CPU,它们共享计算机总线、时钟、内存和外设等。<ul><li>非对称处理(Asymmetric multiprocessing)<br>对称处理(Symmetric MuliProcessing)</li></ul></li></ul><h5 id="集群系统"><a href="#集群系统" class="headerlink" title="集群系统"></a>集群系统</h5><ul><li>Clustered System</li><li>该系统由若干节点（node)通过网络连接在一起每个节点可为单处理器系统或多处理器系统，节点之间是松耦合(loosely coupled)关系。<ul><li>高可用性(high availability)</li><li>高性能计算(high-performance computing)</li></ul></li></ul><h4 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a>操作系统结构</h4><h5 id="单用户单模式"><a href="#单用户单模式" class="headerlink" title="单用户单模式"></a>单用户单模式</h5><p>输入500个字符（花78ms),经CPU处理52ms后，将结果2000个字符存到磁带上（花20ms),重复进行。CPU利用率&#x3D;52&#x2F;(78+52+20)≈35%</p><h5 id="多道程序设计"><a href="#多道程序设计" class="headerlink" title="多道程序设计"></a>多道程序设计</h5><ul><li>操作系统最重要的一点是具有多道程序(multiprogramming)能力。</li><li>单道程序不能让CPU和IO设备始终忙碌，多道程序设计通过安排任务使用得CPU总有一个执行任务，从而提高CPU利用率。</li><li>实现的硬件保证：处理器和IO设备具备并行工作的能力</li></ul><h5 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h5><ul><li>分时系统（time sharing)也称多任务系统(multi-tasking)，是多道程序设计的自然延伸。</li><li>允许多个用户共享一台计算机<ul><li>用户只有输入和输出设备</li><li>分时系统为每个用户轮流分配等量的CPU时间</li><li>用户从发出指令到得到即时结果的时间称为响应时间</li></ul></li><li>第一个分时系统CTSS由MIT于1962年开发出来</li></ul><h5 id="引发的其他模式"><a href="#引发的其他模式" class="headerlink" title="引发的其他模式"></a>引发的其他模式</h5><ul><li>处理器调度（CPU Scheduling)</li><li>交换(Swapping）</li><li>虚拟内存(Virtual Memory)</li><li>磁盘管理（Disk Management）</li><li>同步(Synchronization)</li><li>死锁(Deadlock)</li></ul><h3 id="操作系统提供的服务"><a href="#操作系统提供的服务" class="headerlink" title="操作系统提供的服务"></a>操作系统提供的服务</h3><h4 id="USER-INTERFACE"><a href="#USER-INTERFACE" class="headerlink" title="USER INTERFACE"></a>USER INTERFACE</h4><p>Almost all operating system have a user interface(UI).It offers a way for users to interface（交互） with OS.</p><h5 id="CLI（Command-Line-Interface）（命令行）"><a href="#CLI（Command-Line-Interface）（命令行）" class="headerlink" title="CLI（Command Line Interface）（命令行）"></a>CLI（Command Line Interface）（命令行）</h5><p>command interpreter(shell)命令解释器</p><h5 id="GUI-Graphic-User-Interface"><a href="#GUI-Graphic-User-Interface" class="headerlink" title="GUI(Graphic User Interface)"></a>GUI(Graphic User Interface)</h5><p>A user friendly graphical user interface.</p><h5 id="Batch-批处理"><a href="#Batch-批处理" class="headerlink" title="Batch(批处理)"></a>Batch(批处理)</h5><ul><li>It is a file which contains commands and directives.</li><li>Demonstration …</li></ul><h4 id="系统调用（SYSTEM-CALLS）"><a href="#系统调用（SYSTEM-CALLS）" class="headerlink" title="系统调用（SYSTEM CALLS）"></a>系统调用（SYSTEM CALLS）</h4><ol><li>系统调用提供了访问和使用操作系统所提供的服务的接口<ul><li>系统调用的实现代码是操作系统级的</li><li>这个接口通常是面向程序员的</li></ul></li><li>API(Application Programming Interface)):指明了参数和返回值的一组函数。<ul><li>应用程序App的开发人员通过透过API间接访问了系统调用</li><li>Windows API POSIX API JAVA API</li></ul></li></ol><h5 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h5><ul><li>每个系统调用都有一个唯一的数字编号，被称为系统调用</li><li>用户代码调用API时，API中会向系统调用接口指明其所要用的系统调用号，操作系统内核中维护了一张索引表，依据这个调用号可以检索到访系统调用代码在内核中的位置。</li></ul><h4 id="双重模式（DUAL-MODE）"><a href="#双重模式（DUAL-MODE）" class="headerlink" title="双重模式（DUAL MODE）"></a>双重模式（DUAL MODE）</h4><ol><li>现代计算机系统有一个特殊的硬件，用于划分系统的运行状态，至少需要两种单独运行模式：<ul><li>用户模式(user mode)：执行用户代码</li><li>内核模式(kernel mode):执行操作系统代码</li></ul></li><li>目的：确保操作系统正确的运行</li><li>实现方式：用一个硬件模式位来表示当前模式：0表示内核模式，1<br>表示用户模式。</li></ol><h3 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h3><h4 id="程序和进程"><a href="#程序和进程" class="headerlink" title="程序和进程"></a>程序和进程</h4><ul><li>A program is a passive entity,such as a file containing a list of instructions stored on disk(often called an executable file).</li><li>A program becomes a process when an executable file is loaded into memory.</li><li>A process is an active entity,with a program counter specifying the next instruction to execute an a set of associated resources</li></ul><h4 id="PROGRAM-COUNTER"><a href="#PROGRAM-COUNTER" class="headerlink" title="PROGRAM COUNTER"></a>PROGRAM COUNTER</h4><ul><li>程序计数器(PC)是一个CPU中的寄存器，里面存放下一条要执行指令的内存地址<br>在Intel x86和Itanium微处理器中，它叫做指令指针（Instruction Pointer,IP），有时又称为指令地址寄存器(instruction address register,IAR)、指令计数器</li><li>通常，CPU在取完一条指令之后会将PC寄存器的值加“1”，以计算下条要执行指令的地址。</li></ul><h4 id="PROCESS-IN-MEMORY"><a href="#PROCESS-IN-MEMORY" class="headerlink" title="PROCESS IN MEMORY"></a>PROCESS IN MEMORY</h4><ul><li>text：代码</li><li>data：全局和静态变量</li><li>stack：栈用于存放局部变量、函数返回地址</li><li>heap：堆用于程序运行时的动态内存分配</li></ul><h4 id="并发的进程"><a href="#并发的进程" class="headerlink" title="并发的进程"></a>并发的进程</h4><ul><li>Concurrency:the fact of two or more events or circumstances happening（存在） or existing at the same time.</li><li>并行：running at the same time</li><li>并发进程可能无法一次性执行完毕，会<strong>走走停停</strong>。</li><li>一个进程在执行过程中可能会被另一个进程替换占有CPU,这个过程称作“<strong>进程切换</strong>”</li></ul><h4 id="进程的定义-1"><a href="#进程的定义-1" class="headerlink" title="进程的定义"></a>进程的定义</h4><ol><li>进程是一个程序的一次执行过程<ul><li>能够具体完成的</li><li>是在某个数据集合上完成的</li><li>执行过程是可并发的</li></ul></li><li>进程是资源分配、保护和调度的基本单位</li></ol><h4 id="进程状态（PROCESS-STATE）"><a href="#进程状态（PROCESS-STATE）" class="headerlink" title="进程状态（PROCESS STATE）"></a>进程状态（PROCESS STATE）</h4><p>进程在执行期间自身的状态会发生变化，进程有三种基本状态，分别是：</p><ol><li>运行态(Running)：此时进程的代码在CPU上运行</li><li>就绪态(Ready):进程具备运行条件，等待分配CPU</li><li>等待态(Waiting)：进程在等待某些事件的发生（比如IO操作结束或是一个信号)</li></ol><h4 id="进程何时离开CPU"><a href="#进程何时离开CPU" class="headerlink" title="进程何时离开CPU"></a>进程何时离开CPU</h4><ol><li>内部事件<ul><li>进程<strong>主动放弃</strong>（yield）CPU，进入等待&#x2F;终止状态</li><li>例如使用I&#x2F;O设备，（非）正常结束如除以0</li></ul></li><li>外部事件<ul><li>进程被剥夺CPU使用权，进入就绪状态。这个动作叫<strong>抢占</strong>(preempt)。</li><li>例如时间片到达，高优先权进程到达。</li></ul></li></ol><h3 id="进程切换和进程调度"><a href="#进程切换和进程调度" class="headerlink" title="进程切换和进程调度"></a>进程切换和进程调度</h3><h4 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h4><p>并发进程中，一个进程在执行过程中可能会被另一个进程替换占有CPU,这个过程称作“<strong>进程切换</strong>”。</p><h4 id="中断技术（Interrupt）"><a href="#中断技术（Interrupt）" class="headerlink" title="中断技术（Interrupt）"></a>中断技术（Interrupt）</h4><p>中断是指程序执行过程中</p><ul><li>当发生某个事件时，中止CPU上现行程序的运行</li><li>引出该事件的处理程序执行</li><li>执行完毕返回源程序中断点继续执行</li></ul><h4 id="中断源"><a href="#中断源" class="headerlink" title="中断源"></a>中断源</h4><h5 id="外中断（interrupt）"><a href="#外中断（interrupt）" class="headerlink" title="外中断（interrupt）"></a>外中断（interrupt）</h5><p>来自处理器之外的硬件中断信号</p><ul><li>如时钟中断、键盘中断、外围设备中断</li><li>外部中断均是异步中断</li></ul><h5 id="内中断（异常Exception）"><a href="#内中断（异常Exception）" class="headerlink" title="内中断（异常Exception）"></a>内中断（异常Exception）</h5><p>来自于处理器内部，指令执行过程中发生的中断，属同步中断</p><ul><li>硬件异常：掉电、奇偶校验错误等</li><li>程序异常：非法操作、地址越界、断点、除数为0</li><li>系统调用</li></ul><h4 id="特权指令和非特权指令"><a href="#特权指令和非特权指令" class="headerlink" title="特权指令和非特权指令"></a>特权指令和非特权指令</h4><h5 id="特权指令"><a href="#特权指令" class="headerlink" title="特权指令"></a>特权指令</h5><p>只能在内核态运行的指令</p><ul><li>I&#x2F;O指令和停止整个系统指令</li><li>关闭所有中断</li><li>设置定时器</li><li>进程切换</li></ul><h5 id="非特权指令"><a href="#非特权指令" class="headerlink" title="非特权指令"></a>非特权指令</h5><p>只能运行在用户态</p><h4 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h4><ul><li>中断是用户态向核心态转换的唯一途径！系统调用实质上也是一种中断</li><li>OS提供LoadPSW指令装载用户进程返回用户状态</li></ul><h4 id="进程切换-1"><a href="#进程切换-1" class="headerlink" title="进程切换"></a>进程切换</h4><h5 id="切换时机"><a href="#切换时机" class="headerlink" title="切换时机"></a>切换时机</h5><ul><li>进程需要进入等待状态</li><li>进程被抢占CPU而进入就绪状态</li></ul><h5 id="切换过程"><a href="#切换过程" class="headerlink" title="切换过程"></a>切换过程</h5><ul><li>CPU从用户态切换到核心态</li><li>保存被中断进程的上下文信息（Context）</li><li>修改被中断进程的控制信息（如状态等）</li><li>将被中断的进程加入相应的状态队列</li><li>调度一个新的进程并恢复它的上下文信息</li></ul><p><strong>进程的上下文包含了进程在内存中的text、data、heap、stack和PCB</strong></p><p>运行实体：text、data、heap、stack</p><h4 id="进程控制块"><a href="#进程控制块" class="headerlink" title="进程控制块"></a>进程控制块</h4><p>PCB包含了一个指定进程的许多信息，包括如下</p><ul><li>进程状态</li><li>进程编号PID</li><li>PC值</li><li>寄存器的值</li><li>内存信息</li><li>打开的文件</li></ul><h4 id="进程调度（PROCESS-SCHEDULING）"><a href="#进程调度（PROCESS-SCHEDULING）" class="headerlink" title="进程调度（PROCESS SCHEDULING）"></a>进程调度（PROCESS SCHEDULING）</h4><p>进程在整个生命周期中会在各个调度队列中迁移，由操作系统的一个调度器（scheduler）来执行。</p><h4 id="fork（）函数"><a href="#fork（）函数" class="headerlink" title="fork（）函数"></a>fork（）函数</h4><p>用于创建一个新进程，该进程为当前进程的子进程，创建的方法：fork（）；</p><p>父进程在执行了fork后，将当前进程在内存中的所有数据原模原样复制一份，从fork（）开始并发执行fork（）之后的所有代码</p><p>fork（）的返回值：</p><ul><li>如果成功创建子进程，对于父子进程fork会返回不同的值，</li><li>对于父进程它的返回值是子进程的进程id值</li><li>对于子进程它的返回值是0</li><li>如果创建失败，返回值为-1</li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>进程中的执行流</p><ul><li>A thread is a basic unit of CPU utilization(利用）;it comprises a thread id,a program counter,a register set,and a stack</li><li>It shares with other threads belonging to the same process its code section,data section,and other operating-system resources,such as open files and signals（共享）</li><li>A traditional (or heavyweight（重量级）)process has a single thread of control,If a process has multiple threads（lightweight轻量级 ）of control,it can perform more than one task at a time.</li></ul><h4 id="采用多线程的优点"><a href="#采用多线程的优点" class="headerlink" title="采用多线程的优点"></a>采用多线程的优点</h4><ul><li>响应性</li><li>资源共享</li><li>经济</li><li>可伸缩性</li></ul><h4 id="多核编程"><a href="#多核编程" class="headerlink" title="多核编程"></a>多核编程</h4><p>在多处理器系统中，多核编程机制让应用程序可以更有效地将自身的多个执行任务（并发的线程）分散到不同的处理器上运行，以实现并行计算</p><h4 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h4><ul><li><p>用户线程ULT(User Level Thread)</p><p>ULT在user mode下运行，它的管理无需内核支持。</p></li><li><p>内核线程KLT(Kernel Level Thread)<br>KLT在kernel mode下运行，由操作系统支持与管理。</p></li></ul><h3 id="处理器调度"><a href="#处理器调度" class="headerlink" title="处理器调度"></a>处理器调度</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>多道程序设计的目的将CPU的利用率最大化。</li><li>多个进程同时存在于内存(并发)，当一个进程暂不使用CPU时，系统调度另一个进程占用CPU。</li></ul><h4 id="CPU调度程序"><a href="#CPU调度程序" class="headerlink" title="CPU调度程序"></a>CPU调度程序</h4><p>Whenever the CPU becomes idle（空闲）,the operating system must select one of the processes in the ready queue to be executed.The selection process is carried out by the CPU scheduler.</p><h4 id="抢占调度"><a href="#抢占调度" class="headerlink" title="抢占调度"></a>抢占调度</h4><p>非抢占调度（Nonpreemptive scheduling）</p><p>一旦某个进程得到CPU,就会一直占用到终止或等待状态。</p><p>抢占调度(Preemptive scheduling)</p><h4 id="调度算法性能的衡量"><a href="#调度算法性能的衡量" class="headerlink" title="调度算法性能的衡量"></a>调度算法性能的衡量</h4><ul><li>CPU利用率：CPU的忙碌程度</li><li>响应时间：从提交任务到第一次响应的时间（针对交互式系统）</li><li>等待时间：进程<strong>累积</strong>在就绪队列中等待的时间</li><li>周转时间：从提交到完成的时间</li><li>吞吐率：每个时钟单位处理的任务数</li><li>公平性：以合理的方式让各个进程共享CPU</li></ul><h4 id="调度性能指标"><a href="#调度性能指标" class="headerlink" title="调度性能指标"></a>调度性能指标</h4><ul><li>作业（job）&#x3D;进程(process）</li><li>假设作业提交给系统的时刻是ts,完成的时刻是tf,所需运行时间为tk,那么：</li><li>平均作业周转时间T(ti是单个作业的周转时间)</li><li>T&#x3D;求和ti（i&#x3D;1…n）×1&#x2F;n（ti&#x3D;tf-ts）</li></ul><h4 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h4><h5 id="先来先服务（FCFS-x2F-FIFO）"><a href="#先来先服务（FCFS-x2F-FIFO）" class="headerlink" title="先来先服务（FCFS&#x2F;FIFO）"></a>先来先服务（FCFS&#x2F;FIFO）</h5><ul><li><p>First-Come,First-Served(FCFS)</p><ul><li>早期系统里，FCFS意味着一个程序会一直运行到结束（尽管其中会出现等待I&#x2F;O的情况)</li><li>如今，当一个程序阻塞时会让出CPU</li></ul></li><li><p>例题</p><table><thead><tr><th>process</th><th>Time</th></tr></thead><tbody><tr><td>P1</td><td>28</td></tr><tr><td>P2</td><td>9</td></tr><tr><td>P3</td><td>3</td></tr></tbody></table><p>如果三个进程的到达顺序是：P1,P2,P3</p></li><li><p>等待时间分别是：P1&#x3D;0;P2&#x3D;28;P3&#x3D;37</p></li><li><p>平均等待时间是：(0+28+37)&#x2F;3&#x3D;22</p></li><li><p>平均作业周转时间是：(28+37+40)&#x2F;3&#x3D;35</p></li></ul><h6 id="先来先服务（续）"><a href="#先来先服务（续）" class="headerlink" title="先来先服务（续）"></a>先来先服务（续）</h6><p>如果换一种执行顺序的话：P3,P2,P1</p><ul><li>等待时间分别是：P1&#x3D;12；P2&#x3D;3;P3&#x3D;0</li><li>平均等待时间是：(12+3+0)&#x2F;3</li><li>平均周转时间是：(3+12+40)&#x2F;3&#x3D;18</li></ul><p>第二种排列方式比第一种要好，平均周转时间缩短为18</p><h6 id="先来先服务优缺点"><a href="#先来先服务优缺点" class="headerlink" title="先来先服务优缺点"></a>先来先服务优缺点</h6><ul><li>简单易行(+)</li><li>如果短作业处在长作业的后面将导致周围时间变长（-）。</li></ul><h5 id="时间片轮转（ROUND-ROBIN）"><a href="#时间片轮转（ROUND-ROBIN）" class="headerlink" title="时间片轮转（ROUND ROBIN）"></a>时间片轮转（ROUND ROBIN）</h5><p>针对分时系统</p><ul><li><p>每个进程都可以得到相同的CPU时间(CPU时间片，time slice),当时间片到达，进程将被剥夺CPU并加入就绪队列的尾部</p></li><li><p>抢占式调度算法P</p></li><li><p>n个就绪队列中的进程和时间片q→</p><ul><li>每个进程获得1&#x2F;n的CPU时间，大约是q个时间单位</li><li>没有进程等待时间会超过(n-1)q</li></ul></li><li><p>例题（时间片&#x3D;20）</p><table><thead><tr><th>Process</th><th>CPU Time</th></tr></thead><tbody><tr><td>P1</td><td>68</td></tr><tr><td>P2</td><td>53</td></tr><tr><td>P3</td><td>24</td></tr><tr><td>P4</td><td>8</td></tr></tbody></table><ul><li><p>等待时间分别是：</p><p>P1&#x3D;(68-20)+(112-88)+(145-32)&#x3D;85<br>P2&#x3D;(20-0)+(88-40)+(132-108)&#x3D;92<br>P3&#x3D;(40-0)+(108-60)&#x3D;88<br>P4&#x3D;(60-0)&#x3D;60</p></li><li><p>平均等待时间&#x3D;(85+92+88+60)&#x2F;4&#x3D;81.25</p></li><li><p>平均周转时间&#x3D;(153+145+112+68)&#x2F;4&#x3D;119.5</p></li><li><p>如果采用FCFS算法，平均等待时间83.5，平均周转时间121.75</p></li></ul></li></ul><h6 id="RR算法分析"><a href="#RR算法分析" class="headerlink" title="RR算法分析"></a>RR算法分析</h6><ol><li>时间片（time slice）取选<ul><li>取值太小：进程切换开销显著增大（不能小于进程切换的时间）</li><li>取值较大：响应速度下降（取值无穷大将退化成FCFS)</li><li>一般时间片的选取范围为10ms~100ms</li><li>上下文切换的时间大概为0.1ms~1ms（1%的CPU时间开销)</li></ul></li><li>RR算法优缺点<ul><li>公平算法(+)</li><li>对长作业带来额外的切换开销(-)</li></ul></li><li>RR不一定优于FCFS</li></ol><h5 id="最短作业优先（SJF）"><a href="#最短作业优先（SJF）" class="headerlink" title="最短作业优先（SJF）"></a>最短作业优先（SJF）</h5><ul><li>SJF(Shortest Job First)):下一次调度总是选择所需要CPU时间最短的那个作业（进程)。</li><li>抢占式SRTF</li></ul><h6 id="SJF-x2F-SRTF算法分析"><a href="#SJF-x2F-SRTF算法分析" class="headerlink" title="SJF&#x2F;SRTF算法分析"></a>SJF&#x2F;SRTF算法分析</h6><ul><li>该算法总是将短进程移到长进程之前执行，因此平均等待时间最小，该算法被证明是最优的。</li><li>饥饿现象：长进程可能长时间无法获得CPU</li><li>预测技术<ul><li>该算法需要事先知道进程所需的CPU时间</li><li>预测一个进程的CPU时间并非易事</li></ul></li><li>优缺点<ul><li>优化了响应时间(+)</li><li>难以预测作业CPU时间(-)</li><li>不公平算法(-)</li></ul></li></ul><h5 id="优先级调度（PRIORITY）"><a href="#优先级调度（PRIORITY）" class="headerlink" title="优先级调度（PRIORITY）"></a>优先级调度（PRIORITY）</h5><p>优先级通常为固定区间的数字，如[0,10]：</p><ul><li>数字大小与优先级高低的关系在不同系统中实现不一样，以Linux为例，0为最高优先级。</li><li>调度策略：下一次调度总是选择优先级最高的进程。</li><li>SJF是优先级调度的一个特例。</li><li>优先级调度可以是抢占式，也可以是非抢占式。</li></ul><h6 id="优先级的定义"><a href="#优先级的定义" class="headerlink" title="优先级的定义"></a>优先级的定义</h6><ol><li><p>静态优先级</p><p>优先级保持不变，但会出现不公平（饥饿）现象</p></li><li><p>动态优先级（退化Aging）</p><ul><li>根据进程占用CPU时间：当进程占有CPU时间愈长，则<br>慢慢降低它的优先级；</li><li>根据进程等待CPU时间：当进程在就绪队列中等待时间<br>愈长，则慢慢提升它的优先级。</li></ul></li><li><p>现代操作系统采用动静态结合的优先级</p></li></ol><h3 id="进程同步-1"><a href="#进程同步-1" class="headerlink" title="进程同步"></a>进程同步</h3><h4 id="并发进程-x2F-线程"><a href="#并发进程-x2F-线程" class="headerlink" title="并发进程&#x2F;线程"></a>并发进程&#x2F;线程</h4><p>在内存中同时存在的若干个进程&#x2F;线程，由操作系统的调度程序采用适当的策略将他（们）调度至CPU(s)上运行，同时维护他们的状态队列。</p><ul><li>多个并发进程&#x2F;线程从宏观上是同时在运行；</li><li>从微观上看，他们的运行过程是走走停停：</li><li>并发的进程&#x2F;线程之间是<strong>交替执行(Interleaving)。</strong></li></ul><h4 id="并发进程之间的关系"><a href="#并发进程之间的关系" class="headerlink" title="并发进程之间的关系"></a>并发进程之间的关系</h4><ol><li>独立关系<ul><li>并发进程分别在自己的变量集合上运行</li><li>例如：chrome进程和music进程</li></ul></li><li>交互关系<ul><li>并发进程执行过程中需要共享或是交换数据</li><li>例如：银行交易服务器上的receiver:进程和handler:进程</li><li>交互的并发进程之间又存在着<strong>竞争</strong>和<strong>协作</strong>的关系</li></ul></li></ol><h4 id="竞争（RACE）"><a href="#竞争（RACE）" class="headerlink" title="竞争（RACE）"></a>竞争（RACE）</h4><h4 id="协作（COOPERATION）"><a href="#协作（COOPERATION）" class="headerlink" title="协作（COOPERATION）"></a>协作（COOPERATION）</h4><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><ul><li>Asynchronous means RANDOM!</li><li>会引发竞争条件(Race Condition)：一种这样的情况：多个进程并发操作同一个数据导致执行结果依赖于特定的进程执行顺序。</li></ul><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><ul><li>Process Synchronization means a mechanism（机制） to maintain（维护） the consistency（一致性） of data shared in cooperative processes.</li><li>Synchronization Tool Kits<ul><li>Mutex lock(互斥锁)</li><li>Semaphore（信号量）</li></ul></li></ul><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><h4 id="临界区问题（CRITICAL-SECTION-PROBLEM）"><a href="#临界区问题（CRITICAL-SECTION-PROBLEM）" class="headerlink" title="临界区问题（CRITICAL-SECTION PROBLEM）"></a>临界区问题（CRITICAL-SECTION PROBLEM）</h4><ul><li>Each concurrent(并发) process has a segment of code,called a <strong>critical section</strong>,in which the process may be changing <strong>common variables</strong>（公共数据）,updating a table,writing a file,and so on.</li><li>The important feature of the system is that,when one process is executing in its critical section,no other process is allowed to execute in its critical section.That is,<strong>NO</strong> two processes are executing in their critical sections <strong>at the same time</strong>.</li><li><strong>The critical-section problem</strong> is to design a protocol（协议） that the processes can use to cooperate.</li></ul><h4 id="进程进出临界区协议"><a href="#进程进出临界区协议" class="headerlink" title="进程进出临界区协议"></a>进程进出临界区协议</h4><ul><li>进入临界区前在entry section要请求许可；</li><li>离开临界区后在exit section要归还许可。</li></ul><h4 id="临界区管理准则"><a href="#临界区管理准则" class="headerlink" title="临界区管理准则"></a>临界区管理准则</h4><ul><li>Mutual exclusion(Mutex):互斥</li><li>Progress:前进</li><li>Bounded waiting:有限等待</li></ul><p>简而言之</p><ul><li>有空让进</li><li>择一而入</li><li>无空等待</li><li>有限等待</li><li>让权等待</li></ul><h4 id="软件解决临界区管理"><a href="#软件解决临界区管理" class="headerlink" title="软件解决临界区管理"></a>软件解决临界区管理</h4><ul><li>实现需要较高的编程技巧</li><li>两个进程的实现代码是不对称的，当处理超过2个进程的时候，代码的复杂度会变得更大</li><li>两个著名的软件方案<ul><li>Peterson</li><li>Dekker</li></ul></li></ul><h4 id="MUTEX-LOCKS"><a href="#MUTEX-LOCKS" class="headerlink" title="MUTEX LOCKS"></a>MUTEX LOCKS</h4><p>Operating-systems designers build software tools to solve the critical-section problem.The simplest of these tools is the mutex lock.</p><ul><li>A process must acquire the lock before entering a critical section;</li><li>It must release the lock when it exits the critical section.</li></ul><h4 id="锁的基本操作"><a href="#锁的基本操作" class="headerlink" title="锁的基本操作"></a>锁的基本操作</h4><ul><li>上锁<ul><li>等待锁至打开状态</li><li>获取锁并锁上</li></ul></li><li>解锁</li><li>原子操作</li></ul><h4 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h4><ul><li><strong>Atomic operations</strong> mean the operation can <strong>NOT</strong> be interrupted while it’s running.</li><li>原子操作（愿语）是操作系统重要的组成部分，下面2条硬件指令都是原子操作，它们可以被用来实现对临界区的管理（也就是“锁”)。<ul><li>test_and _set()</li><li>compare_and_swap()</li></ul></li></ul><h4 id="锁的实现"><a href="#锁的实现" class="headerlink" title="锁的实现"></a>锁的实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool available = true;//unlocked</span><br><span class="line">lock()&#123;</span><br><span class="line">while(!ts(&amp;available))</span><br><span class="line">       do nothing;</span><br><span class="line">&#125;</span><br><span class="line">unlock()&#123;</span><br><span class="line">available = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">原子操作</span><br><span class="line">bool ts(bool *target)&#123;</span><br><span class="line">bool result =*target</span><br><span class="line">*target = false;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="忙式等待（BUSY-WAITING）"><a href="#忙式等待（BUSY-WAITING）" class="headerlink" title="忙式等待（BUSY WAITING）"></a>忙式等待（BUSY WAITING）</h4><ul><li>忙式等待是指占用CPU执行空循环实现等待</li><li>这种类型的互斥锁也被称为“自旋锁”(spin lock)<ul><li>缺点：浪费CPU周期，可以将进程插入等待队列以让出CPU的使用权；</li><li>优点：进程在等待时没有上下文切换，对于使用锁时间不长的进程，自旋锁还是可以接受的；在多处理器系统中，自旋锁的优势更加明显。</li></ul></li></ul><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><h4 id="信号量的定义"><a href="#信号量的定义" class="headerlink" title="信号量的定义"></a>信号量的定义</h4><ul><li>信号量(Semaphore)是一种比互斥锁更强大的同步工具，它可以提供更高级的方法来同步并发进程。<ul><li>1965年由荷兰学者Dijkstra提出</li></ul></li><li>A semaphore S is an integer variable（整型变量） that,apart from initialization（初始化赋值）,is accessed only through two standard atomic operations:P(proberen in Dutch)（测试）and V(verhogen in Dutch)（增加）.<ul><li>P：wait（）operation</li><li>V：signal（）operation</li></ul></li></ul><h4 id="信号量的实现"><a href="#信号量的实现" class="headerlink" title="信号量的实现"></a>信号量的实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">P(s)&#123;</span><br><span class="line">while(s&lt;=0)</span><br><span class="line">do nothing;</span><br><span class="line">S--;</span><br><span class="line">&#125;</span><br><span class="line">V(s)&#123;</span><br><span class="line">S++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="信号量的使用"><a href="#信号量的使用" class="headerlink" title="信号量的使用"></a>信号量的使用</h4><h5 id="BINARY-SEMAPHORE"><a href="#BINARY-SEMAPHORE" class="headerlink" title="BINARY SEMAPHORE"></a>BINARY SEMAPHORE</h5><p>顾名思义，二值信号量的值只能是0或1，通常将其初始化为1，用于实现互斥锁的功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = 1;</span><br><span class="line">process pi&#123;</span><br><span class="line">P(mutex);</span><br><span class="line">critical section</span><br><span class="line">V(mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="COUNTING-SEMAPHORE"><a href="#COUNTING-SEMAPHORE" class="headerlink" title="COUNTING SEMAPHORE"></a>COUNTING SEMAPHORE</h5><p>一般信号量的取值可以是任意数值，用于控制并发进程对共享资源的访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">semaphore road = 2;</span><br><span class="line">process Cari&#123;</span><br><span class="line">P(road);</span><br><span class="line">pass the fork</span><br><span class="line">in the road.</span><br><span class="line">V(road);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>信号量初始值&#x3D;0，用于进程同步</strong></p><h4 id="同步问题"><a href="#同步问题" class="headerlink" title="同步问题"></a>同步问题</h4><ul><li>同步问题实质是将异步的并发进程按照某种顺序执行</li><li>解决同步的本质就是要找到并发进程的交互点，利用P操作的等待特点来调节进程的执行速度；</li><li>通常初始值为0的信号量可以让进程直接进行等待状态，直到另一个进程唤醒他。</li></ul><h3 id="经典同步问题"><a href="#经典同步问题" class="headerlink" title="经典同步问题"></a>经典同步问题</h3><h4 id="生产-消费者问题"><a href="#生产-消费者问题" class="headerlink" title="生产-消费者问题"></a>生产-消费者问题</h4><p>生产者(P)与消费者(C)共用一个缓冲区，生产者不能往“满”的缓冲区中放产品，消费者不能从“空”的缓冲区中取产品。</p><h5 id="单缓冲解决方案"><a href="#单缓冲解决方案" class="headerlink" title="单缓冲解决方案"></a>单缓冲解决方案</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Semaphore empty = 1;</span><br><span class="line">//signal for producer</span><br><span class="line">Semaphore full = 0;</span><br><span class="line">//signal for consumer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Producer&#123;</span><br><span class="line">while (true)&#123;</span><br><span class="line">make a product;</span><br><span class="line">P(empty);</span><br><span class="line">put the product into buffer;</span><br><span class="line">V(full);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Consumer&#123;</span><br><span class="line">while (true)&#123;</span><br><span class="line">P(full);</span><br><span class="line">pick product from buffer;</span><br><span class="line">V(empty);</span><br><span class="line">consume the product;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="有界缓冲区（THE-BOUNDED-BUFFER-PROBLEM）"><a href="#有界缓冲区（THE-BOUNDED-BUFFER-PROBLEM）" class="headerlink" title="有界缓冲区（THE BOUNDED-BUFFER PROBLEM）"></a>有界缓冲区（THE BOUNDED-BUFFER PROBLEM）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">item B[k];</span><br><span class="line">semaphore empty = k;</span><br><span class="line">semaphore full = 0;</span><br><span class="line">int in = 0,out =0;</span><br><span class="line">semaphore mutex = 1;</span><br><span class="line"></span><br><span class="line">Process producer_i&#123;</span><br><span class="line">make a product;</span><br><span class="line">P(empty);</span><br><span class="line">P(mutex);</span><br><span class="line">B[in] = product;</span><br><span class="line">in=（in+1)%k;</span><br><span class="line">V(mutex);</span><br><span class="line">V(full);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Process consumeri&#123;</span><br><span class="line">P(full);</span><br><span class="line">P(mutex);</span><br><span class="line">product = B[out];</span><br><span class="line">out=（out+1)%k;</span><br><span class="line">V(mutex);</span><br><span class="line">V(empty);</span><br><span class="line">consume a product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>不要随意扩大临界区</p></li><li><p>同步信号量：empty和full的PV操作不在同一进程</p><p>互斥信号量：mutex的PV操作在同一进程</p></li></ol><h4 id="苹果橘子问题"><a href="#苹果橘子问题" class="headerlink" title="苹果橘子问题"></a>苹果橘子问题</h4><h5 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h5><ul><li>桌上有一只盘子，每次只能放入一只水果</li><li>爸爸专向盘子中放苹果，妈妈专向盘子中放桔子</li><li>儿子专等吃盘子中的桔子，女儿专等吃盘子里的苹果</li></ul><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">semaphore sp = 1;/*盘子里允许放一个水果*/</span><br><span class="line">semaphore sg1 = 0;/*盘子里没有桔子*/</span><br><span class="line">semaphore sg2 = 0；/*盘子里没有苹果*/</span><br><span class="line"></span><br><span class="line">Process father&#123;</span><br><span class="line">削一个苹果；</span><br><span class="line">P(sp);</span><br><span class="line">把苹果放入plate;</span><br><span class="line">V(sg2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Process daughter&#123;</span><br><span class="line">P(sg2);</span><br><span class="line">从plate中取苹果；</span><br><span class="line">V(sp);</span><br><span class="line">吃苹果；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Process mother&#123;</span><br><span class="line">剥一个桔子；</span><br><span class="line">P(sp)；</span><br><span class="line">把桔子放入plate；</span><br><span class="line">V(sg1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Process son&#123;</span><br><span class="line">P(sg1);</span><br><span class="line">从plate中取桔子；</span><br><span class="line">V(sp);</span><br><span class="line">吃桔子；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读者-写者问题（Reader，Writer）"><a href="#读者-写者问题（Reader，Writer）" class="headerlink" title="读者-写者问题（Reader，Writer）"></a>读者-写者问题（Reader，Writer）</h4><h5 id="Rules"><a href="#Rules" class="headerlink" title="Rules:"></a>Rules:</h5><ol><li>R和W：竞争</li><li>W和W：竞争</li><li>R和R：共享&#x2F;同时</li></ol><h5 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Semaphore rw=1;</span><br><span class="line">int reader_count=0;//正在读文件的读者数量</span><br><span class="line">Semaphore r_mutex=1;</span><br><span class="line">Reader_i&#123;</span><br><span class="line"> while(1)&#123;</span><br><span class="line"> P(r_mutex);</span><br><span class="line"> reader_count++;</span><br><span class="line">if(reader_count==1)&#123;</span><br><span class="line">P(rw);</span><br><span class="line">&#125;</span><br><span class="line">V(r_mutex);</span><br><span class="line">Read file;</span><br><span class="line">P(r_mutex);</span><br><span class="line">reader_count--;</span><br><span class="line">if(reader_count==0)&#123;</span><br><span class="line">V(rw);</span><br><span class="line">&#125;</span><br><span class="line">V(r_mutex);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Writer_i&#123;</span><br><span class="line">P(rw);</span><br><span class="line">Write file;</span><br><span class="line">V(rw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="理发师问题"><a href="#理发师问题" class="headerlink" title="理发师问题"></a>理发师问题</h4><h5 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h5><ul><li>有一个睡觉的理发师等待顾客唤醒理发</li><li>当顾客发现理发师在为其他顾客理发时就坐到椅子上等待</li><li>当椅子上都坐满了（椅子的最大值为MAX_CHAIRS），前来理发的新顾客离开</li></ul><h5 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Semaphore customer=0;//理发师正在理发的顾客</span><br><span class="line">Semaphore barber=1;//理发师目前是否可以理发</span><br><span class="line">Semaphore mutex=1;//互斥信号量</span><br><span class="line">int waiting=0;等待的顾客数量</span><br><span class="line"></span><br><span class="line">Barber&#123;</span><br><span class="line">P(customer);</span><br><span class="line">P(mutex);</span><br><span class="line">waiting--;</span><br><span class="line">V(mutex);</span><br><span class="line">cut hair;</span><br><span class="line">V(barber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Customer_i&#123;</span><br><span class="line">P(mutex);</span><br><span class="line">if(waiting&lt;MAX_CHAIRS)&#123;</span><br><span class="line">waiting++;</span><br><span class="line">V(mutex);</span><br><span class="line">P(barber);</span><br><span class="line">V(customer);</span><br><span class="line">get haircut;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">V(mutex);</span><br><span class="line">leaving;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h4><h5 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Semaphore chopstick[5]=&#123;1&#125;;</span><br><span class="line"></span><br><span class="line">Philosopher_i&#123;</span><br><span class="line">while(1)&#123;</span><br><span class="line">Thinking;</span><br><span class="line">P(chopstick[i]);</span><br><span class="line">P(chopstick[(i+1)%5]);</span><br><span class="line">Eating;</span><br><span class="line">V(chopstick[i]);</span><br><span class="line">V(chopstick[(i+1)%5]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h4 id="哲学家用餐死锁问题"><a href="#哲学家用餐死锁问题" class="headerlink" title="哲学家用餐死锁问题"></a>哲学家用餐死锁问题</h4><ul><li>当所有人同时拿到一侧的筷子时，发生永远等待现象（即死锁）</li><li>有若种办法可避免死锁：<ul><li>至多允许四个哲学家同时吃；</li><li>奇数号先取左手边的筷子，偶数号先取右手边的筷子；</li><li>每个哲学家取到手边的两根筷子才吃，否则一根也不取。</li></ul></li><li>进程访问资源流程：申请-&gt;使用-&gt;释放</li></ul><h4 id="DEADLOCK-定义"><a href="#DEADLOCK-定义" class="headerlink" title="DEADLOCK(定义)"></a>DEADLOCK(定义)</h4><ul><li>In a multiprogramming environment,several processes may compete for a finite（有限的） number of resources.</li><li>A process requests resources;if the resources are <strong>not available</strong> at that time,the process enters a <strong>waiting state</strong>.</li><li>Sometimes,a waiting process is never again able to change state,because the resources it has requested are held（占有） by other waiting processes.</li><li>This situation is called a <strong>deadlock</strong>.</li></ul><h4 id="死锁与饥饿"><a href="#死锁与饥饿" class="headerlink" title="死锁与饥饿"></a>死锁与饥饿</h4><ul><li><p>饥饿：进程长时间等待</p><p>e.g.低优先级进程总是等待高优先级所占有的进程</p></li><li><p>死锁：循环等待资源</p><ul><li>A和B分别占有打印机和扫描仪</li><li>同时分别申请扫描仪和打印机</li></ul></li><li><p>死锁&#x3D;&gt;饥饿（反之不亦然）</p><ul><li>饥饿可能终止</li><li>如果无外部干涉，死锁无法终止</li></ul></li></ul><h4 id="产生死锁的四个必要条件"><a href="#产生死锁的四个必要条件" class="headerlink" title="产生死锁的四个必要条件"></a>产生死锁的四个必要条件</h4><p>死锁发生，以下四个条件同时成立</p><ul><li><p>互斥使用</p><p>一个时刻，一个资源仅能被一个进程占有</p></li><li><p>不可剥夺</p><p>除了资源占有进程主动释放资源，其它进程都不可抢夺其资源</p></li><li><p>占有和等待</p><p>一个进程请求资源得不到满足等待时，不释放已占有资源</p></li><li><p>循环等待（上面三个条件同时存在产生的结果）</p><p>每一个进程分别等待它前一个进程所占有的资源</p></li></ul><h4 id="METHONDS-FOR-HANDLING-DEADLOCKS"><a href="#METHONDS-FOR-HANDLING-DEADLOCKS" class="headerlink" title="METHONDS FOR HANDLING DEADLOCKS"></a>METHONDS FOR HANDLING DEADLOCKS</h4><ul><li>Deadlocks are NOT allowed to appear.We must <strong>prevent</strong> or <strong>avoid</strong> deadlock state.</li><li>Deadlocks are allowed to appear,but the system can <strong>detect</strong>（检测） them and <strong>recover</strong>.</li><li>We <strong>pretend</strong> that deadlocks never occur in the system.</li></ul><h4 id="死锁的解决方案"><a href="#死锁的解决方案" class="headerlink" title="死锁的解决方案"></a>死锁的解决方案</h4><h5 id="死锁的防止-Prevention"><a href="#死锁的防止-Prevention" class="headerlink" title="死锁的防止(Prevention)"></a>死锁的防止(Prevention)</h5><p>破外四个必要条件之一</p><h5 id="死锁的避免-Avoidance"><a href="#死锁的避免-Avoidance" class="headerlink" title="死锁的避免(Avoidance)"></a>死锁的避免(Avoidance)</h5><p>允许四个必要条件同时存在，在并发进程中做出妥善安排避免死锁的发生</p><h5 id="死锁的检测和恢复（Detection-amp-Recovery）"><a href="#死锁的检测和恢复（Detection-amp-Recovery）" class="headerlink" title="死锁的检测和恢复（Detection&amp;Recovery）"></a>死锁的检测和恢复（Detection&amp;Recovery）</h5><p>允许死锁的发生，系统及时地检测死锁并解除它</p><h4 id="死锁的防止"><a href="#死锁的防止" class="headerlink" title="死锁的防止"></a>死锁的防止</h4><p>破坏死锁任一必要条件（可操作性太复杂）</p><ul><li><p>互斥使用&#x3D;&gt;允许资源共享使用</p><p>不可行</p></li><li><p>不可剥夺&#x3D;&gt;资源可被抢夺</p><p>不可行</p></li><li><p>占有和等待</p><p>可行</p><p>缺点：资源浪费</p></li><li><p>循环等待</p><p>可行</p><p>缺点：资源浪费</p></li></ul><h4 id="安全状态-SAFE-STATE"><a href="#安全状态-SAFE-STATE" class="headerlink" title="安全状态(SAFE STATE)"></a>安全状态(SAFE STATE)</h4><ul><li><strong>A state is safe</strong> if the system can allocate resources to each process (up to its maximum)in some order and still avoid a deadlock.More formally,a system is in a safe state only if there exists <strong>a safe sequence.</strong></li><li>If no such sequence exists,then the system state is said to be unsafe.</li><li>A safe state is NOT a deadlocked state.</li><li>An unsafe state MAY lead to a deadlock.</li></ul><h4 id="死锁的避免"><a href="#死锁的避免" class="headerlink" title="死锁的避免"></a>死锁的避免</h4><ul><li>系统对进程的每一次资源申请都进行详细的计算，根据结果决定是分配资源还是让其等待，确保系统始终处于安全状态，避免死锁的发生。</li><li>银行家算法（Banker’s algorithm)<ul><li>已知系统中所有资源的种类和数量</li><li>已知进程所需要的各类资源最大需求量</li><li>该算法可以计算出当前的系统状态是否安全（寻找安全序列)</li></ul></li></ul><h4 id="银行家算法-数据结构"><a href="#银行家算法-数据结构" class="headerlink" title="银行家算法-数据结构"></a>银行家算法-数据结构</h4><ul><li>Available:当前系统中可用资源数量</li><li>Max:每个进程的最大资源需求量</li><li>Allocation:已经分配给进程的资源数量</li><li>Need:每个进程还需要的资源数量</li></ul><h4 id="银行家算法的优缺点"><a href="#银行家算法的优缺点" class="headerlink" title="银行家算法的优缺点"></a>银行家算法的优缺点</h4><ul><li>优点：允许死锁必要条件同时存在</li><li>缺点：缺乏实用价值<ul><li>进程运行前就要求知道其所需资源的最大数量</li><li>要求进程是无关的，若考虑同步情况，可能会打乱安全序列</li><li>要求进入系统的进程个数和资源数固定</li></ul></li></ul><h4 id="死锁的检测与恢复"><a href="#死锁的检测与恢复" class="headerlink" title="死锁的检测与恢复"></a>死锁的检测与恢复</h4><ul><li>允许死锁发生，操作系统不断监视系统进展情况判断死锁是否发生</li><li>一旦死锁发生则采取专门的措施，解除死锁并以最小的代价恢复操作系统运行</li><li>死锁检测的时机<ul><li>当进程等待时检测死锁（系统开销大）</li><li>定时检测</li><li>系统资源利用率下降时检测死锁</li></ul></li></ul><h4 id="资源分配图表示法"><a href="#资源分配图表示法" class="headerlink" title="资源分配图表示法"></a>资源分配图表示法</h4><ul><li>资源类（资源的不同类型）</li><li>资源实例（存在于每个资源中）</li><li>进程</li><li>申请边</li><li>分配边</li></ul><h4 id="死锁定理"><a href="#死锁定理" class="headerlink" title="死锁定理"></a>死锁定理</h4><ul><li>如果能在“资源分配图”中消去某进程的所有请求边和分配边，则称该进程为<strong>孤立结点</strong>。<ul><li>可完全简化</li><li>不可完全简化</li></ul></li><li>系统为死锁状态的充分条件是：当且仅当该状态的进程一资源分配图”是不可完全简化的。该充分条件称为<strong>死锁定理</strong></li></ul><h4 id="死锁的解除"><a href="#死锁的解除" class="headerlink" title="死锁的解除"></a>死锁的解除</h4><ul><li><p>中止进程，强制回收资源</p><ul><li>交通问题：将某列火车吊起来</li><li>哲学家问题：将某个哲学家射死</li></ul></li><li><p>剥夺资源，但不中止进程</p></li><li><p>进程回退(roll back)</p><ul><li>就像DVD的回退，好像最近一段时间什么都没有发生过</li><li>交通问题：让某列火车倒车</li><li>哲学家问题：让某个哲学家放下一把叉子</li></ul></li><li><p>重新启动</p><p>没有办法的办法，但却是一个肯定有效的办法</p></li></ul><h4 id="HOW-OS-DO-TO-DEADLOCKS"><a href="#HOW-OS-DO-TO-DEADLOCKS" class="headerlink" title="HOW OS DO TO DEADLOCKS?"></a>HOW OS DO TO DEADLOCKS?</h4><ul><li>In the absence of algorithms to detect and recover from deadlocks,we may arrive at a situation in which the system is in a deadlocked state yet has no way of recognizing what has happened.In this case,the undetected deadlock will cause the system’s performance（执行效率） to deteriorate（恶化）,because resources are being held by processes that cannot run and because more and more processes,as they make requests for resources,will enter a deadlocked state.Eventually,the system will stop functioning and will need to be restarted manually（手动重启）</li><li>Although this method may not seem to be a viable（可行） approach to the deadlock problem,it is nevertheless used in most<br>operating systems.</li></ul><h3 id="进程内存空间"><a href="#进程内存空间" class="headerlink" title="进程内存空间"></a>进程内存空间</h3><h4 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h4><p>内存单元看到的地址，是指令和数据真实的内存地址，而逻辑地址是面向程序而言的</p><p>**物理地址&#x3D;基址+逻辑地址 **</p><h4 id="进程的内存映像"><a href="#进程的内存映像" class="headerlink" title="进程的内存映像"></a>进程的内存映像</h4><p>以32位机器为例，地址总线是32位，可寻址的最大内存空间是22 Bytes,即4 GBytes。每一个运行的进程都可以获得一个4GB的逻辑地址空间，这个空间被分成两个部分：内核空间和用户空间，其中用户空间分配到从0x00000000到0xC0000000共3GB的地址，而内核空间分配了0xC0000000到0 xFFFFFFFF高位的1GB地址</p><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><h4 id="MAIN-MEMORY（主存）"><a href="#MAIN-MEMORY（主存）" class="headerlink" title="MAIN MEMORY（主存）"></a>MAIN MEMORY（主存）</h4><ul><li><strong>Main memory</strong> is central to the operation of a modern computer system.</li><li>Memory consists of a large <strong>array of bytes（字节数组或者字节序列）,each with its own address.</strong></li><li>The CPU fetches instructions from memory according to the value of <strong>the program counter(PC)</strong>.These instructions may cause additional loading from and storing to specific memory addresses.</li><li>A typical <strong>instruction-execution cycle</strong>（指令执行周期）,for example,first <strong>fetches</strong>（取指） an instruction from memory.The instruction is then <strong>decoded</strong>（译码） and may cause operands to be fetched from memory.After the instruction has been <strong>executed</strong> on the operands,results may be stored back in memory.</li></ul><h4 id="高速缓存CACHE"><a href="#高速缓存CACHE" class="headerlink" title="高速缓存CACHE"></a>高速缓存CACHE</h4><p>高速缓存是一种存取速度比内存快，但容量比内存小的多的存储器，它可以加快访问物理内存的相对速度。</p><h4 id="保护操作系统和用户进程"><a href="#保护操作系统和用户进程" class="headerlink" title="保护操作系统和用户进程"></a>保护操作系统和用户进程</h4><p>用户进程不可以访问操作系统内存数据，以及用户进程空间之间不能互相影响</p><ul><li>通过硬件实现，因为操作系统一般不干预CPU对内存的访问<ul><li>base register:基址寄存器</li><li>limit register:限长寄存器</li></ul></li><li>上述两个寄存器的值只能被操作系统的<strong>特权指令</strong>加载</li></ul><h4 id="内存管理目标"><a href="#内存管理目标" class="headerlink" title="内存管理目标"></a>内存管理目标</h4><ul><li>存取速度</li><li>操作正确（分配和回收）</li><li>保护操作系统</li><li>保护用户进程</li><li>地址转换</li></ul><h4 id="地址空间和地址转换"><a href="#地址空间和地址转换" class="headerlink" title="地址空间和地址转换"></a>地址空间和地址转换</h4><ul><li><strong>逻辑地址</strong>：面向程序的地址，总是从0开始编址，每一条指令的逻辑地址就是与第1条指令之间的相对偏移，因此逻辑地址也叫<strong>相对地址</strong>或<strong>虚拟地址</strong>。</li><li><strong>物理地址</strong>：内存单元看到的实际地址，也称为绝对地址。</li><li>所有逻辑地址的集合称为<strong>逻辑地址空间</strong>，这些逻辑地址对应的所有物理地址集合称为<strong>物理地址空间</strong>。</li><li><strong>地址转换</strong>：由逻辑地址转换成物理地址。</li></ul><h4 id="地址转换时机"><a href="#地址转换时机" class="headerlink" title="地址转换时机"></a>地址转换时机</h4><h5 id="编译时"><a href="#编译时" class="headerlink" title="编译时"></a>编译时</h5><p>前提：提前知道这个程序要加载的物理内存的起始地址R</p><p>缺点：不允许被移动</p><h5 id="加载时"><a href="#加载时" class="headerlink" title="加载时"></a>加载时</h5><p>加载时知道基址R</p><p>缺点：不允许被移动</p><h5 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h5><p>逻辑地址-&gt;MMU-&gt;物理地址</p><h4 id="内存管理单元MMU"><a href="#内存管理单元MMU" class="headerlink" title="内存管理单元MMU"></a>内存管理单元MMU</h4><p>Memory-Management Unit完成逻辑地址到物理地址<strong>运行时</strong>的转换工作。</p><ul><li>重定位寄存器(relocation register)或基址寄存器（base register）</li></ul><h4 id="CONTIGUOUS-MEMORY-ALLOCATION（连续内存分配）"><a href="#CONTIGUOUS-MEMORY-ALLOCATION（连续内存分配）" class="headerlink" title="CONTIGUOUS MEMORY ALLOCATION（连续内存分配）"></a>CONTIGUOUS MEMORY ALLOCATION（连续内存分配）</h4><p>In contiguous memory allocation,each process is contained in a single section of memory that is contiguous to the section containing the next process.</p><ul><li>Memory allocation</li><li>Memory recycle</li><li>Memory protection</li></ul><h4 id="FIXED-SIZED-PARTITION（固定大小分区）"><a href="#FIXED-SIZED-PARTITION（固定大小分区）" class="headerlink" title="FIXED-SIZED PARTITION（固定大小分区）"></a>FIXED-SIZED PARTITION（固定大小分区）</h4><p>Memory is divided to several fixed-sized partitions. Each partition may contain exactly one process.</p><ul><li>缺点：存在碎片造成空间浪费</li></ul><h4 id="VARIABLE-PARTITION（可变分区）"><a href="#VARIABLE-PARTITION（可变分区）" class="headerlink" title="VARIABLE-PARTITION（可变分区）"></a>VARIABLE-PARTITION（可变分区）</h4><ul><li>In the variable-partition scheme,the operating system keeps two tables indicating which parts of memory are available and which are occupied.</li><li><strong>Initially</strong>,all memory is available for user processes and is considered one large block of available memory,<strong>a hole</strong>.（孔&#x2F;洞）</li><li><strong>Eventually</strong>,as you will see,memory contains a set of holes of various sizes.（不同大小孔洞的集合）</li></ul><h4 id="动态存储分配问题"><a href="#动态存储分配问题" class="headerlink" title="动态存储分配问题"></a>动态存储分配问题</h4><ul><li><p>首次适应</p><p>分配首个足够大的孔，效率最高</p></li><li><p>最佳适应</p><p>分配最小的足够大的孔，浪费最小</p></li><li><p>最坏适应</p><p>分配最大的孔，产生的剩余孔更可能被再利用</p></li></ul><h4 id="地址转换和保护"><a href="#地址转换和保护" class="headerlink" title="地址转换和保护"></a>地址转换和保护</h4><ul><li><p>两种连续分配方案的地址转换方式是相似的：</p><p>**物理地址&#x3D;基址+逻辑地址 **</p></li><li><p>地址保护策略：与限长limit进行比较</p></li></ul><h4 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h4><p>Fragmentation:some little pieces of memory hardly to be used.</p><ul><li>internal fragmentation（对于固定分区而言）</li><li>external fragmentation（对于可变分区而言）<ul><li>解决办法：compaction（紧凑&#x2F;压缩）</li><li>限制<ul><li>static relocation（静态地址转化不可以使用，运行时地址转换才能使用）</li><li>cost（开销）</li></ul></li></ul></li></ul><h3 id="分段和分页"><a href="#分段和分页" class="headerlink" title="分段和分页"></a>分段和分页</h3><h4 id="MOTIVATION"><a href="#MOTIVATION" class="headerlink" title="MOTIVATION"></a>MOTIVATION</h4><ul><li>Solution to fragmentation（碎片）:permit the logical address space of processes to be noncontiguous.（不连续)</li><li>The view of memory is different between<ul><li>logical (programmer’s ):a variable-sized segments(可变大小的段)</li><li>physical:a linear array of bytes（线性数组&#x2F;字节序列）</li></ul></li><li>The hardware could provide a memory mechanism that mapped the logical view to the actual physical memory.</li></ul><h4 id="程序员眼中的内存世界"><a href="#程序员眼中的内存世界" class="headerlink" title="程序员眼中的内存世界"></a>程序员眼中的内存世界</h4><ul><li>程序员看到的<ul><li>主函数和一组其他函数</li><li>各种数据结构：变量、结构体、对象、数组等</li><li>所有的模块都是名字来引用的</li></ul></li><li>因此他们认为在内存中，程序是由若干个大小不等的段构成的，每个段都有专门的用途，段的大小和用途相关。</li><li><strong>段和段之间不必连续存放（离散）</strong></li></ul><h4 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h4><p>逻辑地址：段号+段内位移</p><ul><li>段基址</li><li>段限长</li><li>段表</li></ul><p>转换成物理地址</p><ul><li>段内位移小于段限长，物理地址&#x3D;段基址+段内位移</li><li>段内位移大于段限长，error</li></ul><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>逻辑地址：页号+页内位移</p><p>物理地址&#x3D;页框号×页面大小+页内位移</p><p>若以二进制表示，物理地址：页框号+页内位移</p><h4 id="LOGICAL-ADDRESS（分页的逻辑地址）"><a href="#LOGICAL-ADDRESS（分页的逻辑地址）" class="headerlink" title="LOGICAL ADDRESS（分页的逻辑地址）"></a>LOGICAL ADDRESS（分页的逻辑地址）</h4><ul><li><p>The <strong>page size</strong>(like the <strong>frame size</strong>)is defined by the hardware.The size of a page is a power of 2,varying between 512 bytes and 1 GB per page,depending on the computer architecture.</p></li><li><p>The selection of a power of 2 as a page size makes the translation of a logical address into a page number and page offset <strong>particularly easy</strong>.</p></li><li><p>If the size of the <strong>logical address space is 2^m</strong>,and a <strong>page size is 2^n bytes</strong>, then the high-order m-n bits of a logical address designate the <strong>page number</strong>,and the n low-order bits designate the <strong>page offset</strong>.Thus,the logical address is as follows:</p><p>高位：m-n比特 表示有多少个页面</p><p>低位：n比特 表示页内位移</p><p>总共m个比特</p></li></ul><h4 id="分段和分页的区别"><a href="#分段和分页的区别" class="headerlink" title="分段和分页的区别"></a>分段和分页的区别</h4><table><thead><tr><th>分段</th><th>分页</th></tr></thead><tbody><tr><td>信息的逻辑单位</td><td>信息的物理单位</td></tr><tr><td>段长是任意的</td><td>页长由系统确定</td></tr><tr><td>段的起始地址可以从主存任一地址开始</td><td>页框起始地址只能以页框大小的整数倍开始</td></tr><tr><td>(段号，段内位移)构成了二维地址空间</td><td>(页号，页内位移)构成了一维地址空间</td></tr><tr><td>会产生外部碎片</td><td>消除了外部碎片，但会出现内部碎片</td></tr></tbody></table><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><h4 id="PAGE-TABLE"><a href="#PAGE-TABLE" class="headerlink" title="PAGE TABLE"></a>PAGE TABLE</h4><ul><li>The operating system maintains a copy of the <strong>page table</strong> for <strong>each process</strong>.</li><li>This copy is used to <strong>translate logical addresses to physical addresses</strong>.</li><li>It is also used by the CPU dispatcher（调度程序） to define the <strong>hardware page table</strong> when a process is to be allocated the CPU.</li><li>Paging therefore <strong>increases the context-switch time</strong>.（上下文切换开销）</li></ul><h4 id="HARDWARE-PAGE-TABLE"><a href="#HARDWARE-PAGE-TABLE" class="headerlink" title="HARDWARE PAGE TABLE"></a>HARDWARE PAGE TABLE</h4><ul><li><strong>The page table</strong> is <strong>kept in main memory</strong> and <strong>a page</strong> **table base register(PTBR) **（CPU中的寄存器）points to the page table.</li><li>Changing page tables requires changing only this one register,substantially reducing context-switch time.</li><li>With this scheme,<strong>two memory accesses</strong>（访问内存两次） are needed to access a byte (one for the page-table entry,one for the byte).</li></ul><h4 id="TLB（是一个硬件）"><a href="#TLB（是一个硬件）" class="headerlink" title="TLB（是一个硬件）"></a>TLB（是一个硬件）</h4><p>**TLB(Translation Look-aside Buffer) **（转换旁路&#x2F;后备缓冲区&#x2F;相联存储器）is a kind of small, fast-lookup hardware <strong>cache</strong>.It is used with page tables in the following way.</p><ul><li>The TLB contains **only a few of the page-table entries.**（仅包含部分的页表的页表项，就是快表）</li><li>When a logical address is generated by the CPU,its page number is presented to the TLB.</li><li><strong>If the page number is found</strong>,its frame number is <strong>immediately</strong> available and is used to access memory.（一次内存访问）</li><li>If <strong>TLB miss</strong>（未命中）,a memory reference to the page table must be made.（两次内存访问）</li></ul><h4 id="TLB-HIT-RATIO（命中率）"><a href="#TLB-HIT-RATIO（命中率）" class="headerlink" title="TLB HIT RATIO（命中率）"></a>TLB HIT RATIO（命中率）</h4><ul><li>The percentage of times（次数的比例） that the page number of interest is found in the TLB is called the <strong>hit ratio</strong>.</li><li>An <strong>80-percent hit ratio</strong>,for example,means that we find the desired page number in the TLB 80 percent of the time.If it takes <strong>100 nanoseconds</strong> to access memory,please find the <strong>effective memory-access time.</strong><ul><li>effective access time &#x3D; 0.80 x 100 + 0.20 x  200 &#x3D; 120 ns</li></ul></li></ul><h4 id="保护"><a href="#保护" class="headerlink" title="保护"></a>保护</h4><ul><li>为了防止地址转换时出现异常，可在页表每个条目设置一个“<strong>valid–invalid</strong>”比特位，用于表示该页的有效性。</li><li>这个方法可以被轻松扩展以提供更好的保护级别，如“只读”、“读写”、“可执行”等。</li></ul><h4 id="页表页"><a href="#页表页" class="headerlink" title="页表页"></a>页表页</h4><p>逻辑地址：页表页号+页号+页内位移</p><h4 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h4><ul><li>上面是一个32位地址采用<strong>两级页表</strong>的例子，页面大小是4 KBytes,第一级页表页的数量是1K个，每个页表页中包含的页面数量也是1K个。</li><li>下面是x86-64架构CPU采用的<strong>四级页表</strong>方案</li></ul><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><h4 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h4><ul><li><p>时间局部性(Temporal locality)</p><p>如果某个信息这次被访问，那它有可能在不久的未来被多次访问，</p></li><li><p>空间局部性(Spatial locality)</p><p>如果某个位置的信息被访问，那和它相邻的信息也很有可能被访问到，</p></li><li><p>内存局部性(Memory locality)</p><p>访问内存时，大概率会访问连续的块，而不是单一的内存地址，其实就是空间局部性在内存上的体现</p></li><li><p>分支局部性(Branch locality)</p><p>计算机中大部分指令是顺序执行，顺序执行和非顺序执行的比例大致是5：1</p></li><li><p>等距局部性(Equidistant locality)</p><p>等距局部性是指如果某个位置被访问，那和它相邻等距离的连续地址极有可<br>能会被访问到。</p></li></ul><h4 id="修改缓存数据"><a href="#修改缓存数据" class="headerlink" title="修改缓存数据"></a>修改缓存数据</h4><ul><li><p>Write through（直接写）</p><p>修改缓存数据的同时修改内存数据</p></li><li><p>Write back（回写）</p><p>只修改缓存数据，直到该数据要被清除出缓存再修改内存中的数据</p></li></ul><h4 id="缓存数据的淘汰"><a href="#缓存数据的淘汰" class="headerlink" title="缓存数据的淘汰"></a>缓存数据的淘汰</h4><ul><li>缓存的容量很小，当缓存满的时候，就需要将缓存中的部分数据淘汰，装入新的数据。</li><li>淘汰<ul><li>用得最少的</li><li>FIFO</li></ul></li></ul><h4 id="部分装入和部分对换"><a href="#部分装入和部分对换" class="headerlink" title="部分装入和部分对换"></a>部分装入和部分对换</h4><ul><li>部分装入<ul><li>进程运行时仅加戟部分进入内存，而不必全部装入</li><li>其余部分暂时放在swap space</li></ul></li><li>部分对换<ul><li>可以将进程部分对换出内存，用以腾出内存空间</li><li>对换出的部分暂时放在swap space</li></ul></li></ul><h4 id="VIRTUAL-MEMORY（虚拟内存）"><a href="#VIRTUAL-MEMORY（虚拟内存）" class="headerlink" title="VIRTUAL MEMORY（虚拟内存）"></a>VIRTUAL MEMORY（虚拟内存）</h4><ul><li><strong>Virtual memory</strong> is a technique that allows the execution of processes that are not completely in memory.（部分装入）</li><li>One major advantage of this scheme is that programs can be <strong>larger than physical memory.</strong></li><li>Further,virtual memory abstracts main memory into an extremely large,uniform array of storage,<strong>separating logical memory</strong> as viewed by the user <strong>from physical memory.</strong></li><li>This technique frees programmers from the concerns of memory-storage limitations.</li></ul><h4 id="DEMAND-PAGING（请求调页）"><a href="#DEMAND-PAGING（请求调页）" class="headerlink" title="DEMAND PAGING（请求调页）"></a>DEMAND PAGING（请求调页）</h4><ol><li>基于分页方案</li><li>页表：valid&#x2F;invalid</li><li>内存驻留</li><li>demand a page</li><li>paging</li></ol><ul><li>With demand-paged virtual memory,pages are loaded only when they are demanded during program execution.</li><li>Pages that are never accessed are thus never loaded into physical<br>memory.</li></ul><h4 id="请求调页步骤"><a href="#请求调页步骤" class="headerlink" title="请求调页步骤"></a>请求调页步骤</h4><ol><li>reference（引用）</li><li>trap：page fault（缺页中断）</li><li>接下来操作系统调页</li><li>page is on backing store（找页面）</li><li>bring in missing page（将缺失页面加载到内存当中）</li><li>reset page table（更新页表)</li><li>restart instruction</li></ol><h4 id="请求调页的性能"><a href="#请求调页的性能" class="headerlink" title="请求调页的性能"></a>请求调页的性能</h4><ul><li>假设访问内存时间为ma,处理一次缺页中断的时间记作page fault time,令p为缺页中断的出现几率，则有效访问时间的计算公式为：<ul><li>effective access time &#x3D;(1-p) x ma + p x page fault time</li></ul></li><li>若ma&#x3D;200ns,page fault time&#x3D;8ms，P&#x3D;0.001,则<ul><li>effective access time &#x3D;8200ms</li></ul></li><li><strong>缺页中断率p对性能影响重大</strong></li></ul><h4 id="页面置换"><a href="#页面置换" class="headerlink" title="页面置换"></a>页面置换</h4><p>当进程在执行过程中发生了缺页，在请求调页的时候发现内存已经没有空闲页框可用，操作系统在此时会做出一个处理：<strong>页面置换</strong>。</p><h4 id="页面置换策略"><a href="#页面置换策略" class="headerlink" title="页面置换策略"></a>页面置换策略</h4><h5 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h5><p>总是淘汰最先进入内存的页面，因为它在内存中待的时间最久。</p><p>优点</p><p>简单</p><p>缺点</p><p>与进程实际运行的规律不相适应，因为在进程中，有些页面经常被访问，比如：含有全局变量、常用函数、例程等的页面，FIFO算法并不能保证这些页面不被淘汰。</p><h5 id="OPTIMAL（最优）"><a href="#OPTIMAL（最优）" class="headerlink" title="OPTIMAL（最优）"></a>OPTIMAL（最优）</h5><p>总是淘汰最长时间不会再使用的页面。</p><ul><li>无法实现，因为无法预测未来</li></ul><h5 id="LRU-LEAST-RECENT-UNUSED）"><a href="#LRU-LEAST-RECENT-UNUSED）" class="headerlink" title="LRU (LEAST RECENT UNUSED）"></a>LRU (LEAST RECENT UNUSED）</h5><p>总是淘汰最近最少使用的页面。</p><p>优点</p><p>考虑程序访问的时间局部性，一般能有较好的性能，实际应用多。</p><p>缺点</p><p>实现会需要较多的硬件支持，会增加硬件成本。</p><h4 id="THRASHING（抖动）"><a href="#THRASHING（抖动）" class="headerlink" title="THRASHING（抖动）"></a>THRASHING（抖动）</h4><ul><li>If the process does not have the number of frames it needs to support pages in active use,it will quickly page-fault.At this point,it must replace some page.However, since all its pages are in active use,it must replace a page that will be needed again right away.Consequently,it quickly faults again,and again,and again,replacing pages that it must bring back in immediately</li><li>This high paging activity is called <strong>thrashing</strong>.<strong>A process is thrashing if it is spending more time paging than executing.</strong></li></ul><h4 id="抖动的原因"><a href="#抖动的原因" class="headerlink" title="抖动的原因"></a>抖动的原因</h4><ul><li>并发进程数量过多</li><li>进程页框分配不合理</li></ul><h4 id="PAGE-FAULT-FREQUENCY"><a href="#PAGE-FAULT-FREQUENCY" class="headerlink" title="PAGE FAULT FREQUENCY"></a>PAGE FAULT FREQUENCY</h4><p>PF称作<strong>页面故障（频）率</strong>，基于这个数据可以实施一个防止抖动的策略：动态调节分配给进程的页框数量。</p><h4 id="CONCLUDING-REMARKS"><a href="#CONCLUDING-REMARKS" class="headerlink" title="CONCLUDING REMARKS"></a>CONCLUDING REMARKS</h4><ul><li>Practically speaking,thrashing and the resulting swapping have a disagreeably large impact on performance.</li><li>The current best practice in implementing a computer facility is to include enough physical memory,whenever possible,to avoid thrashing and swapping.</li><li>From smartphones through mainframes,providing enough memory to keep all working sets in memory concurrently,except under extreme conditions,gives the best user experience.</li></ul><h3 id="大容量存储"><a href="#大容量存储" class="headerlink" title="大容量存储"></a>大容量存储</h3><h4 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h4><ul><li><p>磁道（track）：能被磁头访问的一组同心圆</p></li><li><p>扇区（sector）：磁道上的区域，数据存放的基本单位</p></li><li><p>柱面：所有盘片同一磁头下的磁道集合</p></li><li><p>恒角速度CAV</p><ul><li><p>每条磁道上的肩区数相等</p></li><li><p>不同磁道密度不同，但转速恒定</p></li><li><p>硬盘</p></li></ul></li><li><p>恒线速度CLV</p><ul><li><p>每条磁道上的数据密度相等</p></li><li><p>磁道密度相同，但转速不断变化</p></li><li><p>读一个扇区的情况下，数据在外转速慢，在内转速快</p></li><li><p>DVD&#x2F;CD</p></li></ul></li></ul><h4 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h4><ul><li>低级格式化（Low-level formatting）<ul><li>Physical formatting</li><li>为每个扇区使用特殊的数据结构进行填充，包括一个头部、数据区域和一个尾部。</li><li>头部和尾部包含一些控制信息，如扇区号、ECC码等。</li></ul></li><li>高级格式化(High-level formatting)<ul><li>Logical formatting</li><li>构建文件系统，在磁盘上初始化文件系统数据结构，如空闲和已分配空间表、一个空目录等。</li></ul></li></ul><h4 id="磁盘性能指标"><a href="#磁盘性能指标" class="headerlink" title="磁盘性能指标"></a>磁盘性能指标</h4><ul><li>查找一个物理块的顺序：柱面号、磁头号和扇区号<ul><li>寻道时间Ts:将磁头定位到正确磁道（柱面）上所花的时间，与盘片直径和传动臂速度相关，平均20ms</li><li>旋转延迟T:所查找的扇区转到磁头下所用的时间，与磁盘的旋转速度有关，一个10,000r&#x2F;m的磁盘平均旋转延迟为3ms。</li><li>传送时间T:传送扇区内的数据的时间，同样取决于磁盘的旋转速度，T&#x3D;b&#x2F;(rN)(b为要传送的字节数，N为一个磁道中的字节数，r为转速)</li></ul></li><li>总的平均存取时间Ta&#x3D;Ts+Tr+T</li></ul><h4 id="DISK-I-x2F-O-REQUEST"><a href="#DISK-I-x2F-O-REQUEST" class="headerlink" title="DISK I&#x2F;O REQUEST"></a>DISK I&#x2F;O REQUEST</h4><p>Whenever a process needs I&#x2F;O to or from the disk,it issues a system call to the operating system.The request specifies several pieces of information:</p><ul><li>Whether this operation is input or output </li><li>What the disk address for the transfer is（柱面、磁头、扇区）</li><li>What the memory address for the transfer is</li><li>What the number of sectors（扇区） to be transferred is</li></ul><h4 id="DISK-SCHEDULING（磁盘调度）"><a href="#DISK-SCHEDULING（磁盘调度）" class="headerlink" title="DISK SCHEDULING（磁盘调度）"></a>DISK SCHEDULING（磁盘调度）</h4><p>For a multiprogramming system with many processes the disk queue may often have several pending requests.Thus,when one request is completed,the operating system chooses which pending request to service next.How does the operating system make this choice?</p><h5 id="FCFS-SCHEDULING"><a href="#FCFS-SCHEDULING" class="headerlink" title="FCFS SCHEDULING"></a>FCFS SCHEDULING</h5><h5 id="SSTF-SCHEDULING（Shortest-Seek-Time-First-最短寻道时间优先"><a href="#SSTF-SCHEDULING（Shortest-Seek-Time-First-最短寻道时间优先" class="headerlink" title="SSTF SCHEDULING（Shortest-Seek-Time First 最短寻道时间优先)"></a>SSTF SCHEDULING（Shortest-Seek-Time First 最短寻道时间优先)</h5><ul><li>”磁臂粘连“现象-&gt;饥饿</li></ul><h5 id="SCAN-SCHEDULING（扫描算法）"><a href="#SCAN-SCHEDULING（扫描算法）" class="headerlink" title="SCAN SCHEDULING（扫描算法）"></a>SCAN SCHEDULING（扫描算法）</h5><ul><li>负载均衡</li></ul><h5 id="C-SCAN-SCHEDULING（循环扫描算法）"><a href="#C-SCAN-SCHEDULING（循环扫描算法）" class="headerlink" title="C-SCAN SCHEDULING（循环扫描算法）"></a>C-SCAN SCHEDULING（循环扫描算法）</h5><h5 id="LOOK-SCHEDULING（电梯算法）"><a href="#LOOK-SCHEDULING（电梯算法）" class="headerlink" title="LOOK SCHEDULING（电梯算法）"></a>LOOK SCHEDULING（电梯算法）</h5><h4 id="SELECTION-OF-A-ALGORITHM"><a href="#SELECTION-OF-A-ALGORITHM" class="headerlink" title="SELECTION OF A ALGORITHM"></a>SELECTION OF A ALGORITHM</h4><ul><li>FCFS is the simplest.</li><li>SSTF is common and has a natural appeal but it may cause a starvation problem.</li><li>SCAN and C-SCAN perform better for systems that place a heavy load on the disk.</li><li>How to know which algorithm is chosen by Linux?</li></ul><h4 id="LINUX-IO-SCHEDULER"><a href="#LINUX-IO-SCHEDULER" class="headerlink" title="LINUX IO SCHEDULER"></a>LINUX IO SCHEDULER</h4><ul><li>noop:it performs FCFS policy which is good enough for SSD.</li><li>deadline:it works by creating two queues:a read queue and a write queue.Each I&#x2F;O request has a time stamp(时间戳) associated that is used by the kernel for an expiration time.When an I&#x2F;O request reaches its deadline,it is pushed to the highest priority</li><li>cfq:Complete Fairness Queueing works by creating a per- process I&#x2F;O queue.（为每个进程维护一个队列）The goal of this I&#x2F;O scheduler is to provide a fair I&#x2F;O priority to each process.While the CFQ algorithm is complex,the gist of this scheduler is that after ordering the queues to reduce disk seeking,it services these per-process I&#x2F;O queues in a <strong>round-robin</strong> fashion.</li></ul><h3 id="I-x2F-O系统"><a href="#I-x2F-O系统" class="headerlink" title="I&#x2F;O系统"></a>I&#x2F;O系统</h3><h4 id="BUS"><a href="#BUS" class="headerlink" title="BUS"></a>BUS</h4><p>总线：一组线路和通过线路传输信息的一个协议</p><ul><li><p>并行：Multiple Lane</p><p>同一时刻发送多个比特，缺点占线面积大，比特与比特之间的干扰</p></li><li><p>串行：Single Lane</p><p>PCIe、SATA、USB</p></li></ul><h4 id="PERIPHERALS-COMPONENT-INTERCONNECT（外围设备-组件-相互连接）"><a href="#PERIPHERALS-COMPONENT-INTERCONNECT（外围设备-组件-相互连接）" class="headerlink" title="PERIPHERALS COMPONENT INTERCONNECT（外围设备 组件 相互连接）"></a>PERIPHERALS COMPONENT INTERCONNECT（外围设备 组件 相互连接）</h4><h4 id="PORTS（端口）"><a href="#PORTS（端口）" class="headerlink" title="PORTS（端口）"></a>PORTS（端口）</h4><ul><li>PCIe</li><li>SATA（硬盘）</li><li>USB(Universal Serial（串行） Bus)</li><li>VGA</li><li>HDMI</li><li>DVI</li><li>Thunder Blot</li></ul><h4 id="设备类型"><a href="#设备类型" class="headerlink" title="设备类型"></a>设备类型</h4><h5 id="块设备（block-device）"><a href="#块设备（block-device）" class="headerlink" title="块设备（block device）"></a>块设备（block device）</h5><ul><li>存取单位是一个block</li><li>如磁盘、磁带、DVD等</li></ul><h5 id="字符设备（character-device"><a href="#字符设备（character-device" class="headerlink" title="字符设备（character device)"></a>字符设备（character device)</h5><ul><li>存取单位是一个字符</li><li>如显示器、键盘、鼠标等</li></ul><h4 id="CONTROLLER"><a href="#CONTROLLER" class="headerlink" title="CONTROLLER"></a>CONTROLLER</h4><p>A <strong>controller</strong> is a collection of electronics（电子元件） that can operate a port,a bus,or a device.</p><ul><li>A <strong>serial-port controller is a simple device controller</strong>.It is a single chip (or portion of a chip)in the computer that controls the signals on the wires（线缆） of a serial port.</li><li>A <strong>SCSI bus controller is NOT simple</strong> because the SCSI protocol is complex.It typically contains a processor（微处理器）,microcode,and some private memory to enable it to process the SCSI protocol messages.</li><li>Some devices have their own <strong>built-in controllers</strong>.You will see a circuit board attached to one side of a disk drive.This board is the disk controller.It implements the disk side of the protocol for some kind of connection-SCSI or Serial Advanced Technology Attachment (SATA), for instance.It has microcode and a processor to do many tasks,such as bad-sector mapping（坏道）,prefetching（预先获取）,buffering（缓冲）,and caching（缓存）</li></ul><h4 id="如何对控制器发布命令"><a href="#如何对控制器发布命令" class="headerlink" title="如何对控制器发布命令"></a>如何对控制器发布命令</h4><p>控制器有一个或多个用于数据和控制信号的寄存器（存储二进制）。CPU通过读写这些寄存器来控制通信。</p><ul><li>控制寄存器：可以被主机发布命令或改变设备状态</li><li>状态寄存器：包含一些主机可读的位信息</li><li>数据寄存器：记录主机可读或写入的数据</li></ul><h4 id="I-x2F-O地址"><a href="#I-x2F-O地址" class="headerlink" title="I&#x2F;O地址"></a>I&#x2F;O地址</h4><p>I&#x2F;O地址：控制寄存器地址</p><p>编址方式</p><ul><li>I&#x2F;O独立编址：使用独立的I&#x2F;O指令，如IN、OUT;</li><li>内存映射编址：划出一块内存地址，将I&#x2F;O的端口地址映射进来，这样就可以使用访问内存指令对控制寄器进行读写。</li></ul><h4 id="I-x2F-O控制方式"><a href="#I-x2F-O控制方式" class="headerlink" title="I&#x2F;O控制方式"></a>I&#x2F;O控制方式</h4><h5 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h5><ol><li>步骤<ul><li>重复测试busy位，直到清零；</li><li>设置控制寄存器为write操作，并将要写入的字节X存入数据寄存器；</li><li>设置ready位</li><li>若ready位为1，则设置busy位</li><li>执行write命令，将字节X写入设备</li><li>清除ready位和busy位</li></ul></li><li>评价<ul><li>优点：逻辑简单</li><li>缺点：忙式等待</li></ul></li></ol><h5 id="中断-1"><a href="#中断-1" class="headerlink" title="中断"></a>中断</h5><ol><li>步骤<ul><li>CPU向I&#x2F;O控制器发布要启动I&#x2F;O控制器的命令，然后CPU执行其他任务去</li><li>I&#x2F;O设备就绪可以被执行，通过中断方式通知CPU</li><li>如果CPU收到这个中断， 中断处理程序处理数据，然后从中断返回</li><li>CPU恢复中断前的工作</li><li>循环以上步骤</li></ul></li><li>评价<ul><li>优点：CPU没有循环等待I&#x2F;O设备是否就绪</li><li>缺点：CPU的利用率依旧不高</li></ul></li></ol><h5 id="DMA直接内存访问"><a href="#DMA直接内存访问" class="headerlink" title="DMA直接内存访问"></a>DMA直接内存访问</h5><p>步骤</p><ul><li>CPU向磁盘控制器发出命令传递C个字节的磁盘数据到地址为X的内存区</li><li>磁盘控制器初始化DMA传输，向DMA控制器发送每个字节</li><li>DMA控制向X地址内存传输字节，增加内存地址并减少C的值</li><li>C&#x3D;0时，DMA发出中断，通知CPU传输完毕</li></ul><h4 id="CYCLE-STEALING（周期窃取）"><a href="#CYCLE-STEALING（周期窃取）" class="headerlink" title="CYCLE STEALING（周期窃取）"></a>CYCLE STEALING（周期窃取）</h4><ul><li>When the DMA controller seizes the memory bus,the CPU is momentarily prevented from accessing main memory.We call the DMA steals the CPU’s cycle.</li><li>Although this <strong>cycle stealing</strong> can slow down the CPU computation,offloading(卸载) the data-transfer work to a DMA controller generally improves the total system performance.</li></ul><h4 id="内核I-x2F-O结构"><a href="#内核I-x2F-O结构" class="headerlink" title="内核I&#x2F;O结构"></a>内核I&#x2F;O结构</h4><p>内核I&#x2F;O结构包括I&#x2F;O硬件和I&#x2F;O软件两个部分，I&#x2F;O软件的设计目标主要体现在：</p><ul><li>**高效率(efficiency)**：通过一些手段提高I&#x2F;O设备的访问效率。</li><li>**通用性（generality)**：屏蔽硬件细节，让用户使用统一的接口方便地使用不同的硬件。</li></ul><h4 id="设备驱动层"><a href="#设备驱动层" class="headerlink" title="设备驱动层"></a>设备驱动层</h4><p><strong>Device-driver layer</strong> makes the I&#x2F;O subsystem independent of the hardware through hiding the differences among device<br>controllers.（屏蔽底层硬件的差异性，向上提供统一接口）</p><h4 id="内核I-x2F-O子系统"><a href="#内核I-x2F-O子系统" class="headerlink" title="内核I&#x2F;O子系统"></a>内核I&#x2F;O子系统</h4><ul><li>Several services-<strong>scheduling</strong>（调度）,<strong>buffering</strong>（缓冲）,<strong>caching（缓存）</strong>, <strong>spooling</strong>（假脱机&#x3D;&gt;真联机）,<strong>device reservation</strong>（设备预留）,and <strong>error handling</strong>-are provided by the <strong>kernel’s I&#x2F;O subsystem</strong> and build on the hardware and device-driver infrastructure.</li><li>The I&#x2F;O subsystem is also responsible for <strong>protecting itself</strong> from errant processes（偏离正轨的进程） and malicious users.</li></ul><h5 id="BUFFERING"><a href="#BUFFERING" class="headerlink" title="BUFFERING"></a>BUFFERING</h5><p><strong>缓冲</strong>主要用于处理数据流的生产者和消费者速度不匹配问题。内存充当缓冲</p><h5 id="BUFFER-amp-CACHE"><a href="#BUFFER-amp-CACHE" class="headerlink" title="BUFFER &amp; CACHE"></a>BUFFER &amp; CACHE</h5><p>The difference between a buffer and a cache is that <strong>a buffer</strong> may hold the only existing copy of a data item, whereas <strong>a cache</strong>,by definition,holds a copy on faster storage of an item that resides elsewhere.</p><h5 id="SPOOLING"><a href="#SPOOLING" class="headerlink" title="SPOOLING"></a>SPOOLING</h5><p>A <strong>spool</strong> (Simultaneous Peripheral Operations On-Line)(外围设备操作同时在线）is a buffer that holds output for a device,such as a printer,that cannot accept interleaved（交替） data streams.Although a printer can serve only one job at a time,several applications may wish to print their output concurrently,without having their output mixed together. </p><h4 id="I-x2F-O请求的生命周期"><a href="#I-x2F-O请求的生命周期" class="headerlink" title="I&#x2F;O请求的生命周期"></a>I&#x2F;O请求的生命周期</h4><p>看视频最后的图片</p><h2 id="期末复习"><a href="#期末复习" class="headerlink" title="期末复习"></a>期末复习</h2><h3 id="OS目标"><a href="#OS目标" class="headerlink" title="OS目标"></a>OS目标</h3><ul><li><p>方便性：方便用户使用计算机</p></li><li><p>有效性：提高系统资源利用率和系统的吞吐量</p></li><li><p>可扩充性：有随着硬件的提升可适应能力</p></li><li><p>开放性</p></li></ul><h3 id="OS功能"><a href="#OS功能" class="headerlink" title="OS功能"></a>OS功能</h3><p>管理计算机资源：处理器管理、存储管理、设备管理、文件管理</p><p>用户与硬件的接口</p><h4 id="用户角度-1"><a href="#用户角度-1" class="headerlink" title="用户角度"></a>用户角度</h4><ul><li>提供良好的用户界面</li><li>提供标准的函数库</li><li>使得编程更加方便不容易出错</li></ul><h4 id="系统角度-1"><a href="#系统角度-1" class="headerlink" title="系统角度"></a>系统角度</h4><ul><li>管理资源</li><li>解决申请资源产生的冲突</li><li>阻止错误的产生和计算机不正当的使用</li></ul><h3 id="多道程序基本特点"><a href="#多道程序基本特点" class="headerlink" title="多道程序基本特点"></a>多道程序基本特点</h3><ul><li>多道：即计算机内存中同时存放几道相互独立的程序</li><li>宏观上并行：同时进入系统的几道程序都处于运行过程中，即它们先后开始了各自的运行，但都未运行完毕。</li><li>微观上串行：从微观上看，内存中的多道程序轮流地或分时地占有CPU。</li></ul><h3 id="分布式系统使用的场合"><a href="#分布式系统使用的场合" class="headerlink" title="分布式系统使用的场合"></a>分布式系统使用的场合</h3><ul><li>搜索引擎</li><li>社交网络</li><li>电子商务</li><li>云计算</li></ul><h3 id="进程与线程的关系"><a href="#进程与线程的关系" class="headerlink" title="进程与线程的关系"></a>进程与线程的关系</h3><ul><li>一个进程可以有多个线程，但至少有一个线程；而一个线程只能在一个进程的地址空间内活动。</li><li>资源分配给进程，同一个进程的所有线程共享该进程所有资源。</li><li>CPU分配给线程，即真正在处理器运行的是线程。</li><li>线程在执行过程中需要协作同步，不同进程的线程间要利用消息通信的办法实现同步。</li></ul><h3 id="页表项与什么有关"><a href="#页表项与什么有关" class="headerlink" title="页表项与什么有关"></a>页表项与什么有关</h3><p>总的比特数-页内偏移的比特数</p><h3 id="页内地址偏移与页表大小关系"><a href="#页内地址偏移与页表大小关系" class="headerlink" title="页内地址偏移与页表大小关系"></a>页内地址偏移与页表大小关系</h3><p>2^页内偏移的比特数&#x3D;页面大小</p><h3 id="决定地址结构"><a href="#决定地址结构" class="headerlink" title="决定地址结构"></a>决定地址结构</h3><p>页号+位移量</p><h3 id="动态分区管理算法的过程与评价，系统性能与影响、评价指标"><a href="#动态分区管理算法的过程与评价，系统性能与影响、评价指标" class="headerlink" title="动态分区管理算法的过程与评价，系统性能与影响、评价指标"></a>动态分区管理算法的过程与评价，系统性能与影响、评价指标</h3><h4 id="首次适应"><a href="#首次适应" class="headerlink" title="首次适应"></a>首次适应</h4><p>将空闲分区链以地址递增的顺序连接；在进行<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>分配时，从链首开始顺序查找，直到找到一块分区的大小可以满足需求     时，按照该作业的大小，从该分区中分配出内存，将剩下的空闲分区仍然链在空闲分区链中。</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>高址部分的大的空闲分区得到保留，为大作业的内存分配创造了条件；</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>每次都是优先利用低址部分的空闲分区，造成低址部分产生大量的外碎片。</li><li>每次都是从低址部分查找，使得查找空闲分区的开销增大</li></ul><h4 id="最佳适应"><a href="#最佳适应" class="headerlink" title="最佳适应"></a>最佳适应</h4><p>将空闲分区链中的空闲分区按照空闲分区由小到大的顺序排序，从而形成空闲分区链。每次从链首进行查找合适的空闲分区    为作业分配内存，这样每次找到的空闲分区是和作业大小最接近的，所谓“最佳”.</p><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><p>找到的空闲分区是大小最接近待分配内存作业大小的；</p><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><p>产生大量难以利用的外部碎片。</p><h4 id="最坏适应"><a href="#最坏适应" class="headerlink" title="最坏适应"></a>最坏适应</h4><p>将空闲分区链的分区按照从大到小的顺序排序形成空闲分区链，每次查找时只要看第一个空闲分区是否满足即可。</p><h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><p>效率高，分区查找方便；</p><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><p>大作业就找不到合适的空闲分区。</p><h3 id="页式内存中多级页表性质、带来的收益、损失"><a href="#页式内存中多级页表性质、带来的收益、损失" class="headerlink" title="页式内存中多级页表性质、带来的收益、损失"></a>页式内存中多级页表性质、带来的收益、损失</h3><p>多级页表，页目录表+页表</p><h4 id="收益"><a href="#收益" class="headerlink" title="收益"></a>收益</h4><p>节省大量内存</p><h4 id="损失"><a href="#损失" class="headerlink" title="损失"></a>损失</h4><p>需要访问三次内存；cpu每一条指令执行的时间其实大部分都是浪费在访问内存上</p><h3 id="段页式而没有页段式"><a href="#段页式而没有页段式" class="headerlink" title="段页式而没有页段式"></a>段页式而没有页段式</h3><h3 id="驱动程序谁编写"><a href="#驱动程序谁编写" class="headerlink" title="驱动程序谁编写"></a>驱动程序谁编写</h3><p>设备制造商</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2023/09/23/2023-9-23-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/09/23/2023-9-23-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><h3 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h3><p>网络 计算机用网络设备连起来</p><p>互联网 许多网络通过路由器连起来</p><p>因特网 全球最大的一个互联网</p><h3 id="因特网的组成"><a href="#因特网的组成" class="headerlink" title="因特网的组成"></a>因特网的组成</h3><p>边缘部分（计算机、平板、手机）</p><ul><li>客户服务器方式</li><li>对等方式p2p：客户端也可以作为服务器</li></ul><p>核心部分（路由器）</p><ul><li>电路交换：适用于数据量很大的实时性传输、核心路由器之间、应用如固定电话</li><li>报文交换</li><li>分组交换</li></ul><h3 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h3><h4 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h4><p>广域网（WAN）</p><p>城域网（MAN）</p><p>局域网（LAN）</p><p>个人区域网（PAN）</p><h4 id="使用者"><a href="#使用者" class="headerlink" title="使用者"></a>使用者</h4><p>公用网</p><p>专用网</p><h4 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h4><p>总线型</p><p>环型</p><p>星型</p><p>树型</p><p>网状</p><h4 id="交换方式"><a href="#交换方式" class="headerlink" title="交换方式"></a>交换方式</h4><p>电路交换</p><p>报文交换</p><p>分组交换</p><h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><p>资源子网</p><p>通信子网</p><p>接入网</p><h3 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h3><h4 id="1-速率"><a href="#1-速率" class="headerlink" title="1.速率"></a>1.速率</h4><p>连接在计算机网络上的主机在数字信道上传送数据位数的速率，也称data rate或bit rate 单位是b&#x2F;s，kb&#x2F;s，Mb&#x2F;s，Gb&#x2F;s</p><h4 id="2-带宽"><a href="#2-带宽" class="headerlink" title="2.带宽"></a>2.带宽</h4><p>数字信道上所传送的最高数据率，即最大速率，单位b&#x2F;s，kb&#x2F;s，Mb&#x2F;s，Gb&#x2F;s</p><h4 id="3-吞吐量"><a href="#3-吞吐量" class="headerlink" title="3.吞吐量"></a>3.吞吐量</h4><p>在单位时间内通过某个网络的数据量，即通过所有链路的网络流量，单位b&#x2F;s，Mb&#x2F;s等</p><h4 id="4-时延"><a href="#4-时延" class="headerlink" title="4.时延"></a>4.时延</h4><p>①发送时延：计算机发出数据的时间</p><p>发送时延&#x3D;数据块长度（比特）&#x2F;信道带宽（比特&#x2F;秒）</p><p>②传播时延：媒体上传输时消耗的时间</p><p>传播时延&#x3D;信道长度（米）&#x2F;信号在信道上的传播速率（米&#x2F;秒）</p><p>③处理时延：网络结点存储转发处理时间</p><p>④排队时延：网络结点缓存队列排队时间</p><h4 id="5-时延带宽积"><a href="#5-时延带宽积" class="headerlink" title="5.时延带宽积"></a>5.时延带宽积</h4><p>数据链路上能够承载的数据量</p><p>时延带宽积&#x3D;传播时延×带宽</p><h4 id="6-往返时间RTT"><a href="#6-往返时间RTT" class="headerlink" title="6.往返时间RTT"></a>6.往返时间RTT</h4><p>从发送方发送数据开始，到发送方收到接收方确认</p><h4 id="7-利用率"><a href="#7-利用率" class="headerlink" title="7.利用率"></a>7.利用率</h4><p>①信道利用率：有数据通过时间&#x2F;（有+无）数据通过时间</p><p>②网络利用率：信道利用率加权平均值</p><p>D&#x3D;D0&#x2F;1-U</p><p>D0表示网络空闲时的时延</p><p>D表示网络当前的时延</p><p>U表示信道利用率</p><h3 id="OSI参考模型（7层）"><a href="#OSI参考模型（7层）" class="headerlink" title="OSI参考模型（7层）"></a>OSI参考模型（7层）</h3><p>应用层 能够产生网络流量能够和用户交互的应用程序</p><p>表示层 加密、压缩、开发人员考虑的问题</p><p>会话层 服务和客户端建立的会话 查木马 netstat -nb</p><p>传输层 可靠传输建立会话 不可靠传输 流量控制</p><p>网络层 IP地址编址 选择最佳路径</p><p>数据链路层 数据如何封装 添加物理层地址 MAC</p><p>物理层 电压 接口标准</p><h3 id="网络排错"><a href="#网络排错" class="headerlink" title="网络排错"></a>网络排错</h3><p>底层往高层，逐一排查</p><h3 id="网络安全和OSI参考模型"><a href="#网络安全和OSI参考模型" class="headerlink" title="网络安全和OSI参考模型"></a>网络安全和OSI参考模型</h3><p>物理层安全</p><p>数据链路层安全 ADSL AP密码</p><p>网络层安全</p><p>应用层安全 SQL注入漏洞 长传漏洞</p><h3 id="开放系统信息交换涉及的几个概念"><a href="#开放系统信息交换涉及的几个概念" class="headerlink" title="开放系统信息交换涉及的几个概念"></a>开放系统信息交换涉及的几个概念</h3><p>实体（entity）：交换信息硬件和软件的进程</p><p>协议（protool）：控制两个对等实体通信的规则</p><p>服务（service）：下层向上层提供服务，上层需要使用下层提供的服务来实现本层的功能</p><p>服务访问点（SAP）：相邻两层实体间交换信息的地方</p><h3 id="五层协议对应的数据单元"><a href="#五层协议对应的数据单元" class="headerlink" title="五层协议对应的数据单元"></a>五层协议对应的数据单元</h3><p>应用层：传输数据单元PDU</p><p>运输层：运输层报文</p><p>网络层：IP数据报（IP分组）</p><p>数据链路层：数据帧</p><p>物理层：比特</p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h3 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h3><p>解决如何在连接各种计算机的传输媒体上传输数据比特流，主要任务时确定与传输媒体的接口的一些特性，如下</p><ul><li>机械特性：接口形状、大小、引线数目</li><li>电气特性：规定电压范围</li><li>功能特性：如规定-5V表示0，+5V表示1</li><li>过程特性：也称规程特性，规定建立连接时各个相关部件的工作步骤</li></ul><h3 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h3><h4 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h4><p>通信的目的是传送消息</p><ul><li><p>数据：运输消息的实体</p></li><li><p>信号：数据的电气或电磁的表现</p><p>模拟信号：消息的参数取值是连续的</p><p>数字信号：消息的参数取值是离散的</p></li><li><p>码元：在使用域的波形表示数字信号时，则表示不同离散数值的基本波形就成为码元</p></li></ul><h4 id="有关信道的几个基本概念"><a href="#有关信道的几个基本概念" class="headerlink" title="有关信道的几个基本概念"></a>有关信道的几个基本概念</h4><p>信道一般表示向一个方向传输信息的媒体，通信线路往往包含一条发送信息的信道和一条接收信息的信道</p><ul><li>单向通信（单工通信）：只能有一个方向的通信而没有反方向的交互。例如广播电台</li><li>双向交替通信（半双工通信）：通信双方都可以发送信息，但不能双方同时发送（当然也就不能同时接收）。例如对讲机</li><li>双向同时通信（全双工通信）：通信双方可以同时发送和接收信息。例如打电话</li></ul><h4 id="基带信号和带通信号"><a href="#基带信号和带通信号" class="headerlink" title="基带信号和带通信号"></a>基带信号和带通信号</h4><ul><li>基带信号（基本频带信号)：来自信源的信号。如计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。基带信号就是发出的直接表达了要传输的信息的信号，如我们说话的声波</li><li>带通信号：把基带信号经过载波调制后，把信号的频率范围搬到较高的频段以便在信道中传输（即仅在一段频率范围内能够通过信道）</li></ul><h4 id="几种最基本的调制方法"><a href="#几种最基本的调制方法" class="headerlink" title="几种最基本的调制方法"></a>几种最基本的调制方法</h4><ul><li>调幅（AM）：载波的振幅随基带数字信号而变化</li><li>调频（FM）：载波的频率随基带数字信号而变化</li><li>调相（PM）：载波的初始相位随基带数字信号而变化</li></ul><h4 id="常用的编码"><a href="#常用的编码" class="headerlink" title="常用的编码"></a>常用的编码</h4><ul><li><p>单极性不归零码：只使用一个电压值，用高电平表示1，没电压表示0</p></li><li><p>双极性不归零码：用正电平和负电平分别表示二进制数据的1和0，正负幅值相等</p></li><li><p>双极性归零码：正负零三个电平，信号本身携带同步信息</p></li><li><p>曼切斯特编码：bit中间有信号低-高跳变为0，bit中间有信号高-低跳变为1</p></li><li><p>差分曼切斯特编码：bit中间有信号跳变，bit与bit之间也有信号跳变，表示下一个bit为0， bit中间有信号跳变，bit与bit之间无信号跳变，表示下一个bit为1</p></li></ul><h4 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h4><ul><li>有失真，但可识别</li><li>失真大，无法识别</li></ul><h4 id="奈氏准则"><a href="#奈氏准则" class="headerlink" title="奈氏准则"></a>奈氏准则</h4><p>在任何信道中，码元传输的速率是有上限的，否则就会出现码间串扰的问题，使接收端对码元的判决成为不可能</p><p><strong>理想低通信道的最高码元传输速率&#x3D;2WBaud</strong></p><ul><li>W是理想低通信道的带宽，单位为Hz</li><li>Baud是波特，是码元传输速率的单位</li></ul><h4 id="信噪比"><a href="#信噪比" class="headerlink" title="信噪比"></a>信噪比</h4><p>香农用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率</p><p><strong>信道的极限信息传输速率C可表达为C&#x3D;Wlog2（1+S&#x2F;N）b&#x2F;s</strong></p><ul><li>W为信道带宽（Hz为单位）</li><li>S为信道内所传信号的平均功率</li><li>N为信道内部的高斯噪声功率</li></ul><h3 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h3><h4 id="导向传输媒体"><a href="#导向传输媒体" class="headerlink" title="导向传输媒体"></a>导向传输媒体</h4><p>导向传输媒体中，电磁波沿着固体媒体传播</p><p>1.双绞线</p><ul><li>屏蔽双绞线STP</li><li>无屏蔽双绞线UTP</li></ul><p>2.同轴电缆</p><ul><li>50Ω同轴电缆用于数字传输，由于多用于基带传输，也叫基带同轴电缆</li><li>75Ω同轴电缆由于模拟传输，即宽带同轴电缆</li></ul><p>3.光缆</p><h4 id="非导向传输媒体"><a href="#非导向传输媒体" class="headerlink" title="非导向传输媒体"></a>非导向传输媒体</h4><p>自由空间，其中的电磁波传输被成为无线传输。无线传输所使用的频段很广</p><p>短波通信主要靠电离层的反射，但短波通信的通信质量较差</p><p>微波在空间主要是直线传播</p><ul><li>地面微波接力通信</li><li>卫星通信</li></ul><h4 id="物理层设备-集线器（hub）"><a href="#物理层设备-集线器（hub）" class="headerlink" title="物理层设备-集线器（hub）"></a>物理层设备-集线器（hub）</h4><p>工作特点：只起到信号放大和重发作用，其目的是扩大网络的传输范围，而不具备信号的定向传送能力</p><p>最大传输距离：100m</p><p>集线器是一个大的冲突域</p><h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><p>复用是通信技术中的基本概念</p><p>1.频分复用FDM</p><p>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</p><p>频分复用的所有用户在同样的时间占用不同的带宽资源（“带宽”是频率带宽而不是数据的发送速率）</p><p>2.时分复用技术TDM：</p><p>将时间划分成一段段等长的时分复用帧（TDM帧），每个时分复用的用户在每一个TDM帧中所占用固定序号的时隙。</p><p>每一个用户所占用的时隙是周期性的出现（其周期就是TDM帧的长度对应的时间）</p><p>TDM信号也称等时信号。</p><p>时分复用的所有用户是在不同的时间占用同样的频带宽度</p><p>3.码分复用技术CDM</p><p>常用的名词是码分多址CDMA，例如手机通话就会使用到码分复用技术</p><p>每个比特时间划分为m个短的间隔，称为码片</p><h3 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h3><p>脉码调制PCM体制最初是为了在电话局之间的中继线上传送多路电话</p><h3 id="带宽接入技术"><a href="#带宽接入技术" class="headerlink" title="带宽接入技术"></a>带宽接入技术</h3><h4 id="xDSL技术"><a href="#xDSL技术" class="headerlink" title="xDSL技术"></a>xDSL技术</h4><p>把0-4kHz低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用</p><h4 id="光纤同轴混合网HFC网"><a href="#光纤同轴混合网HFC网" class="headerlink" title="光纤同轴混合网HFC网"></a>光纤同轴混合网HFC网</h4><p>在有线电视网CATV的基础上开发的一种居民宽带接入网</p><h4 id="FTTx技术"><a href="#FTTx技术" class="headerlink" title="FTTx技术"></a>FTTx技术</h4><ul><li>光纤到家FTTH</li><li>光纤到大楼FTTB</li><li>光纤到路边FTTC</li></ul><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="数据链路层的信道类型"><a href="#数据链路层的信道类型" class="headerlink" title="数据链路层的信道类型"></a>数据链路层的信道类型</h3><ol><li>点对点信道。使用一对一的点对点通信方式</li><li>广播信道。一对多的广播通信方式，因此过程比较复杂。</li></ol><h3 id="链路与数据链路"><a href="#链路与数据链路" class="headerlink" title="链路与数据链路"></a>链路与数据链路</h3><ul><li><p>链路（link）是一条点到点的物理线路段，中间没有任何其他点。</p><p>一条链路只是一条通路的一个组成部分。例如网线、电话线</p></li><li><p>数据链路（data link）除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。</p><p>最常用的方法就是使用适配器（即网卡）来实现这些协议的硬件和软件</p><p>一般适配器都包括了数据链路层和物理层这两层的功能</p></li></ul><h3 id="帧"><a href="#帧" class="headerlink" title="帧"></a>帧</h3><p>在两个对等的数据链路层之间画出一个数字管道，而在这条数字管道上传输的数据单位是帧</p><h3 id="基本问题"><a href="#基本问题" class="headerlink" title="基本问题"></a>基本问题</h3><h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><ul><li>封装成帧就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧，确定帧的界限</li><li>首部和尾部的一个重要作用就是进行帧定界</li></ul><h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><p>若传输的数据不是仅由“可打印字符”组成时，就会出问题</p><p><strong>用字符填充法解决透明传输的问题</strong></p><p>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC”。字节填充或者字符填充—-接收端的数据链路层在将数据送往网络层之前删除插入的转义字符</p><h4 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h4><p>传输过程中可能会产生<strong>比特差错</strong>：1可能会变成0而0也可能变成1</p><p>在一段时间内，传输错误的比特占所传输比特总数的比率为<strong>误码率</strong>BER</p><h5 id="循环冗余检验CRC"><a href="#循环冗余检验CRC" class="headerlink" title="循环冗余检验CRC"></a><strong>循环冗余检验CRC</strong></h5><p>在发送端，先把数据划分成组。在待传送的数据M（M的位数为k）后面再添加供差错检测用的n为冗余码一起发送</p><p>冗余码的计算</p><ul><li>用二进制的模2运算进行2^n乘M的运算，这相当于在M后面添加n个0</li><li>得到的（k+n）位的数除以事先选定好的长度为（n+1）位的除数P，得出商是Q而余数是R（FCS），余数R比除数P少一位，即R是n位。</li></ul><p>仅用循环冗余检验CRC差错检测技术只能做到<strong>无差错接受</strong>，要做到可靠传输就必须加上确认和重传机制。考虑：帧重复、帧丢失、帧乱序的情况。</p><p>可以说CRC是一种<strong>无比特差错</strong>，而不是<strong>无传输差错</strong>的检测机制</p><h5 id="帧检验序列FCS"><a href="#帧检验序列FCS" class="headerlink" title="帧检验序列FCS"></a><strong>帧检验序列FCS</strong></h5><p>在数据后面加上的冗余码称为帧检验序列FCS，循环冗余校验CRC和帧检验序列FCS并不等同</p><ul><li>CRC是一种常用的检错方法，而FCS是添加在数据后面的冗余码</li><li>FCS可以由CRC这种方法得出，但CRC并非原来获得FCS的唯一办法</li></ul><h3 id="PPP协议使用场合"><a href="#PPP协议使用场合" class="headerlink" title="PPP协议使用场合"></a>PPP协议使用场合</h3><p>PPP协议拨号有身份验证、记账的功能。全世界使用最多的数据链路层协议是点对点协议PPP，用户使用拨号电话接入因特网时，一般都是使用PPP协议。</p><h4 id="PPP协议三个组成部分"><a href="#PPP协议三个组成部分" class="headerlink" title="PPP协议三个组成部分"></a>PPP协议三个组成部分</h4><ul><li>数据链路层协议（HDLC）可以用于异步串行或者同步串行介质</li><li>使用LCP（链路控制协议）建立并维护数据链路连接，身份验证</li><li>网络控制协议（NCP）允许在点到点连接上使用多种网络层协议</li></ul><h4 id="PPP填充方法"><a href="#PPP填充方法" class="headerlink" title="PPP填充方法"></a>PPP填充方法</h4><ul><li>字节填充</li><li>零比特填充：在5个连1之后填入0</li></ul><h3 id="以太网的特点"><a href="#以太网的特点" class="headerlink" title="以太网的特点"></a>以太网的特点</h3><h4 id="局域网的特点与优点"><a href="#局域网的特点与优点" class="headerlink" title="局域网的特点与优点"></a>局域网的特点与优点</h4><p>局域网最主要的特点：网络为一个单位所拥有，且地理范围和站点数目均有限</p><p>主要优点</p><ul><li>广播功能，从一个站点可很方便的访问全网，局域网上的主机可以共享连接在局域网上的各种硬件和软件资源</li><li>便于系统的扩展和演变，设备的位置可灵活调整和改变</li><li>提高系统的可靠性、可用性和生存性</li></ul><h4 id="共享通信媒体"><a href="#共享通信媒体" class="headerlink" title="共享通信媒体"></a>共享通信媒体</h4><p>1.静态划分信道</p><ul><li>频分复用</li><li>时分复用</li><li>波分复用</li><li>码分复用</li></ul><p>2.动态媒体接入控制（多点接入）</p><ul><li>随机接入（主要被以太网采用）</li><li>受控接入，如多点线路探询或者轮询（目前已不被采用）</li></ul><h4 id="广播信道的数据链路层）载波监听多点接入-x2F-碰撞检测-以太网使用CSMA-x2F-CD协议"><a href="#广播信道的数据链路层）载波监听多点接入-x2F-碰撞检测-以太网使用CSMA-x2F-CD协议" class="headerlink" title="(广播信道的数据链路层）载波监听多点接入&#x2F;碰撞检测 以太网使用CSMA&#x2F;CD协议"></a>(广播信道的数据链路层）载波监听多点接入&#x2F;碰撞检测 以太网使用CSMA&#x2F;CD协议</h4><ul><li><strong>多点接入</strong>表示许多计算机以多点接入的方式连接在一根总线上</li><li><strong>载波监听</strong>是指每一个站在发送数据之前先要用电子技术检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发送碰撞</li></ul><h4 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h4><p>计算机边发送数据边检测信道上的信号电压大小</p><ul><li>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）</li><li>当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。</li><li>所谓碰撞就是发生了冲突，因此碰撞检测也成为冲突检测</li></ul><h4 id="检测到碰撞后"><a href="#检测到碰撞后" class="headerlink" title="检测到碰撞后"></a>检测到碰撞后</h4><ul><li>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来</li><li>每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立马停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送</li></ul><h4 id="重要特性"><a href="#重要特性" class="headerlink" title="重要特性"></a>重要特性</h4><p>使用CSMA&#x2F;CD协议的以太网不能进行全双工通信而只能进行双向交替通信</p><h4 id="争用期"><a href="#争用期" class="headerlink" title="争用期"></a>争用期</h4><p>最先发送数据帧的站，在发送数据帧后至多经过时间2τ就可知道发送的数据帧是否遭到了碰撞</p><p>经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发送碰撞。</p><ul><li>以太网的端到端往返时延2τ成为争用期，或碰撞窗口。通常，取51.2μs为争取期的长度</li><li>对于10Mb&#x2F;s以太网，在争用期内可发送512bit，即64字节</li><li>以太网发送数据时，若前64字节未发生冲突，则后续的数据就不会发生冲突</li></ul><h4 id="最短有效帧长"><a href="#最短有效帧长" class="headerlink" title="最短有效帧长"></a>最短有效帧长</h4><ul><li>如果发生冲突，就一定是在发送的前64字节之内</li><li>由于一检测到冲突就立即中止发送，这时已经发送出去的数据一定小于64字节</li><li>以太网规定了最短有效帧长为64字节，凡长度小于64字节的帧都是由于冲突而异常中止的无效帧</li></ul><h4 id="二进制指数类型退避算法"><a href="#二进制指数类型退避算法" class="headerlink" title="二进制指数类型退避算法"></a>二进制指数类型退避算法</h4><p>发生碰撞的站在停止发送数据之后，要推迟一个随机时间再发送数据</p><ul><li>确定基本退避时间，一般是争用期2τ</li><li>定义参数k，k&#x3D;Min[重传次数，10]</li><li>从整数集合[0，1，…，（2^k-1)]中随机取出一个数，记为r。重传所需时延就是r倍的基本退避时间</li><li>当重传16次仍不能成功时即丢弃该帧，并向高层报告</li></ul><h4 id="以太网的两个标准"><a href="#以太网的两个标准" class="headerlink" title="以太网的两个标准"></a>以太网的两个标准</h4><ol><li>DIX Ethernet V2标准世界上第一个局域网产品的规约</li><li>IEEE的802.3标准</li></ol><h4 id="以太网与数据链路层的两个子层"><a href="#以太网与数据链路层的两个子层" class="headerlink" title="以太网与数据链路层的两个子层"></a>以太网与数据链路层的两个子层</h4><p>802委员会将局域网的数据链路层拆分成两个子层</p><ul><li>逻辑链路控制LLC子层</li><li>媒体接入控制MAC子层</li></ul><h4 id="以太网提供的服务"><a href="#以太网提供的服务" class="headerlink" title="以太网提供的服务"></a>以太网提供的服务</h4><ul><li>不可靠的交付，即尽最大努力的交付</li><li>当接收站收到有差错的数据帧就丢弃此帧，其他什么也不做。差错的纠正由高层来决定</li><li>如果高层发现丢失了一些数据而进行重传，但以太网并不知道这是一个重传的帧，而是当作一个新的数据帧来发送</li></ul><h4 id="星型拓扑"><a href="#星型拓扑" class="headerlink" title="星型拓扑"></a>星型拓扑</h4><ul><li>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。不用电缆而使用无屏蔽双绞线。每个站需要用两对双绞线，分别用于发送和接收<br>这种以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做集线器（hub）</li><li>使用集线器的以太网在逻辑上仍是一个总线网，各工作站使用的还是CSMA&#x2F;CD协议，并共享逻辑上的总线。</li><li>集线器很像一个多接口的转发器，工作在物理层</li></ul><h4 id="以太网的信道利用率"><a href="#以太网的信道利用率" class="headerlink" title="以太网的信道利用率"></a>以太网的信道利用率</h4><p>以太网的信道被占用的情况：<br>争用期长度为2τ,即端到端传播时延的两倍。检测到碰撞后不发送干扰信号。<br>帧长为L(bit),数据发送速率为C(b&#x2F;s),因而帧的发送时间为L&#x2F;C&#x3D;T0(s)。</p><h4 id="对以太网参数的要求"><a href="#对以太网参数的要求" class="headerlink" title="对以太网参数的要求"></a>对以太网参数的要求</h4><ul><li>当数据率一定时，以太网的连线的长度受到限制，否则τ的数值会太大</li><li>以太网的帧长不能太短，否则T0的值会太小，使a值太大。</li></ul><h4 id="信道利用率的最大值"><a href="#信道利用率的最大值" class="headerlink" title="信道利用率的最大值"></a>信道利用率的最大值</h4><p>Smax&#x3D;T0&#x2F;T0+τ&#x3D;1&#x2F;1+a</p><h3 id="MAC层（ipconfig-x2F-all）"><a href="#MAC层（ipconfig-x2F-all）" class="headerlink" title="MAC层（ipconfig &#x2F;all）"></a>MAC层（ipconfig &#x2F;all）</h3><p>在局域网中，硬件地址又称物理地址，或者MAC地址</p><h4 id="发往本站的帧包括以下三种帧"><a href="#发往本站的帧包括以下三种帧" class="headerlink" title="发往本站的帧包括以下三种帧"></a>发往本站的帧包括以下三种帧</h4><ul><li>单播帧（一对一）</li><li>广播帧（一对全体）</li><li>多播帧（一对多）</li></ul><h4 id="无效的MAC帧"><a href="#无效的MAC帧" class="headerlink" title="无效的MAC帧"></a>无效的MAC帧</h4><ul><li>帧的长度不是整数个字节</li><li>用收到的帧检验序列FCS查出有差错</li><li>数据字段的长度不在46-1500字节之间（有效的MAC帧长度为64-1518字节之间）</li></ul><p>对于检查出的无效MAC帧就简单丢弃，以太网不负责重传丢弃的帧</p><h4 id="帧的最小间隔"><a href="#帧的最小间隔" class="headerlink" title="帧的最小间隔"></a>帧的最小间隔</h4><p>帧的最小间隔为9.6μs，相当于96bit的发送时间，为了接收数据帧的站的接收缓存来得及清理</p><h3 id="扩展以太网"><a href="#扩展以太网" class="headerlink" title="扩展以太网"></a>扩展以太网</h3><h4 id="在物理层考虑扩展"><a href="#在物理层考虑扩展" class="headerlink" title="在物理层考虑扩展"></a>在物理层考虑扩展</h4><p>主机使用光纤和一对光线调制解调器连接到集线器</p><p>100BASE-T以太网又称为快速以太网</p><p>速率达到或者超过100Mb&#x2F;s的以太网称为高速以太网</p><p>100BASE-T以太网的物理层</p><ul><li>100BASE-TX:使用2对UTP5类线或屏蔽双绞线STP。</li><li>100BASE-FX:使用2对光纤。</li><li>100BASE-T4:使用4对UTP3类线或5类线。</li></ul><p>100BASE-T特点</p><p>可在全双工方式下工作而无冲突发生。因此，不使用CSMA&#x2F;CD协议<br>MAC帧格式仍然是802.3标准规定的。<br>保持最短帧长不变，但将一个网段的最大电缆长度减小到100m。帧间时间间隔从原来的9.6μs改为现在的0.96μs。</p><p>吉比特以太网的物理层</p><p>1000BASE-X基于光纤通道的物理层</p><ul><li>1000BASE-SX    SX表示短波长</li><li>1000BASE-LX    LX表示长波长</li><li>1000BASE-CX  CX表示铜线</li></ul><p>1000BASE-T</p><ul><li>使用4对5类线UTP</li></ul><h4 id="在数据链路层考虑扩展"><a href="#在数据链路层考虑扩展" class="headerlink" title="在数据链路层考虑扩展"></a>在数据链路层考虑扩展</h4><p>使用网桥，根据MAC帧的目的地址对收到的帧进行转发。</p><p>网桥具有过滤帧的功能。当网桥接收到一个帧时，并不是向所有的接口转发此帧，二十先检查此帧的目的MAC地址，然后再确定将该帧转发到哪个接口</p><p>网桥的好与坏</p><p>好</p><ul><li>过滤通信量。</li><li>扩大了物理范围。</li><li>提高了可靠性。</li><li>可互连不同物理层、不同MAC子层和不同速率（如10M6&#x2F;s和100Mb&#x2F;s以太网)的局域网。</li></ul><p>坏</p><ul><li>存储转发增加了时延。</li><li>在MAC子层并没有流量控制功能。</li><li>具有不同MAC子层的网段桥接在一起时时延更大。</li><li>网桥只适合于用户数不太多（不超过几百个）和通信量不太大的局域网，否则有时还会因传播过多的广播信息而产生网络拥塞。这就是所谓的广播风暴。</li></ul><h3 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h3><h4 id="LAN和VLAN"><a href="#LAN和VLAN" class="headerlink" title="LAN和VLAN"></a>LAN和VLAN</h4><p>LAN：局域网，由交换机或者集线器连着多台计算机</p><p>一个VLAN&#x3D;一个广播域&#x3D;逻辑网段（子网）</p><p>VLAN优点：</p><ul><li>分段</li><li>灵活性</li><li>安全性</li></ul><p>VLAN跨交换机的网段</p><ul><li>干道端口：可以跑多个VLAN数据</li><li>Access端口：接计算机</li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h3><ol><li>网络层向传输层提供的服务<ul><li>虚电路服务<br>虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。<br>请注意，电路交换的电话通信是先建立了一条真正的连接。因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样。</li><li>数据报服务<br>网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。网络在发送分组时不需要先建立连接。每一个分组（即P数据报）独立发送，与其前后的分组无关（不进行编号）。<br>网络层不提供服务质量的承诺。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。<br>尽最大努力交付的好处：<br>由于传输网络不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉（与电信网的交换机相比较）<br>如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的主机中的运输层负责（包括差错处理、流量控制等）<br>采用这种设计思路的好处是：网络的造价大大降低，运行方式灵活，能够适应多种应用。<br>因特网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。</li></ul></li><li>可靠交付由端系统负责</li></ol><h3 id="虚电路服务和数据报服务的对比"><a href="#虚电路服务和数据报服务的对比" class="headerlink" title="虚电路服务和数据报服务的对比"></a>虚电路服务和数据报服务的对比</h3><table><thead><tr><th>对比的方面</th><th>虚电路服务</th><th>数据报服务</th></tr></thead><tbody><tr><td>思路</td><td>可靠通信应当由网络来保证</td><td>可靠通信应当由用户主机来保证</td></tr><tr><td>连接的建立</td><td>必须有</td><td>不需要</td></tr><tr><td>终点地址</td><td>仅在连接建立阶段使用，每个分组使用短的虚电路号</td><td>每个分组都有终点的完整地址</td></tr><tr><td>分组的转发</td><td>属于同一条虚电路的分组均按照同一路由进行转发</td><td>每个分组独立选择路由进行转发</td></tr><tr><td>当结点出故障时</td><td>所有通过出故障的结点的虚电路均不能工作</td><td>出故障的结点可能会丢失分组，一些路由可能会发生变化</td></tr><tr><td>分组的顺序</td><td>总是按发送顺序到达终点</td><td>到达终点时不一定按发送顺序</td></tr><tr><td>端到端的差错处理和流量控制</td><td>可以由网络负责，也可以由用户主机负责</td><td>由用户主机负责</td></tr></tbody></table><h3 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h3><h4 id="虚拟互联网"><a href="#虚拟互联网" class="headerlink" title="虚拟互联网"></a>虚拟互联网</h4><p>网络互连的设备</p><p>中间设备又称为中间系统或中继(relay)系统。</p><ul><li>物理层中继系统：转发器(repeater)。</li><li>数据链路层中继系统：网桥或桥接器(br idge)。</li><li>网络层中继系统：路由器(router)。</li><li>网络层以上的中继系统：网关(gateway)。</li></ul><p>网关就是路由器接口的地址</p><h4 id="IP协议简介"><a href="#IP协议简介" class="headerlink" title="IP协议简介"></a>IP协议简介</h4><p>网际协议IP是TCP&#x2F;IP体系中两个最主要的协议之一。与IP协议<br>配套使用的还有四个协议：</p><ul><li>地址解析协议ARP(Address Resolution Protocol)</li><li>逆地址解析协议RARP(Reverse Address Resolution Protoco）</li><li>网际控制报文协议ICMP(Internet Control Message Protoco）</li><li>网际组管理协议IGMP(Internet Group Management Protocol）</li></ul><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><h5 id="IP层次结构"><a href="#IP层次结构" class="headerlink" title="IP层次结构"></a>IP层次结构</h5><p>层次化IP地址：将32位的IP地址分为网络ID和主机ID</p><h5 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h5><table><thead><tr><th>网络类别</th><th>最大网络数</th><th>第一个可用的网络号</th><th>最后一个可用的网络号</th><th>每个网络中最大的主机数</th></tr></thead><tbody><tr><td>A</td><td>126（2^7-2)</td><td>1</td><td>126</td><td>16777214</td></tr><tr><td>B</td><td>16383（2^14-1)</td><td>128.1</td><td>191.255</td><td>65534</td></tr><tr><td>C</td><td>2097151（2^21-1)</td><td>192.0.1</td><td>232.255.255</td><td>254</td></tr></tbody></table><h5 id="特殊的几个地址"><a href="#特殊的几个地址" class="headerlink" title="特殊的几个地址"></a>特殊的几个地址</h5><ol><li>127.0.0.1本地环回地址</li><li>169.254.0.0计算机自己给自己产生的临时地址</li><li>主机号不能全0</li><li>主机号全1代表广播，网络中所有计算机都能收到数据包</li></ol><h5 id="保留的私网地址"><a href="#保留的私网地址" class="headerlink" title="保留的私网地址"></a>保留的私网地址</h5><ol><li>10.0.0.0企业政府学校来用</li><li>172.16.0.0 —172.31.0.0</li><li>192.168.0.0 —192.168.255.0</li></ol><h4 id="子网掩码的作用"><a href="#子网掩码的作用" class="headerlink" title="子网掩码的作用"></a>子网掩码的作用</h4><p>子网掩码与自己的IP地址做与运算使主机位归零，看自己与目标主机是否在同一个网段，若源主机与目标主机在一个网段则通，否则交由网关给路由器转发</p><h4 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h4><h5 id="等分成2个子网"><a href="#等分成2个子网" class="headerlink" title="等分成2个子网"></a>等分成2个子网</h5><p>每个子网是原来的1&#x2F;2，子网掩码往后移一位</p><p>子网掩码255.255.255.128，网关是192.168.0.1和192.168.0.129</p><h5 id="等分成4个子网"><a href="#等分成4个子网" class="headerlink" title="等分成4个子网"></a>等分成4个子网</h5><p>每个子网是原来的1&#x2F;2×1&#x2F;2，子网掩码往后移两位</p><p>子网掩码255.255.255.192</p><h5 id="等分成8个子网"><a href="#等分成8个子网" class="headerlink" title="等分成8个子网"></a>等分成8个子网</h5><p>每个子网是原来的1&#x2F;2×1&#x2F;2×1&#x2F;2，子网掩码往后移三位</p><p>子网掩码255.255.255.224</p><p><strong>乘了几次1&#x2F;2，子网掩码就往后移几位</strong></p><h5 id="点到点网络"><a href="#点到点网络" class="headerlink" title="点到点网络"></a>点到点网络</h5><p>子网掩码是255.255.255.252，子网掩码往后移6位</p><p><strong>等分的时候每一截子网掩码都一样，不等分时子网掩码不一样</strong></p><h4 id="超网"><a href="#超网" class="headerlink" title="超网"></a>超网</h4><p>让两个子网的计算机划分在一个网段</p><h5 id="合并网络的规律"><a href="#合并网络的规律" class="headerlink" title="合并网络的规律"></a>合并网络的规律</h5><p>向左移动1位子网掩码可以合并0、1网络，也可以合并2、3网络，也可以合并4、5网络，也可以合并6、7网络<br>通过向左移动2位子网掩码可以将连续的0、1、2、3网络合并成一个网络，也可将连续的4、5、6、7网络合并成一个网络<br>通过向左移动3位子网掩码，可以将0、1、2、3、4、5、6、7网络合并成一个网络</p><h4 id="IP地址与MAC硬件地址"><a href="#IP地址与MAC硬件地址" class="headerlink" title="IP地址与MAC硬件地址"></a>IP地址与MAC硬件地址</h4><h5 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h5><p>数据+IP地址（包括目标地址和源地址）</p><h5 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h5><p>数据包+MAC地址，MAC地址每过一个网络设备就就得变一次</p><h5 id="IP地址与MAC地址的区别"><a href="#IP地址与MAC地址的区别" class="headerlink" title="IP地址与MAC地址的区别"></a>IP地址与MAC地址的区别</h5><ul><li>IP地址决定了数据包最终要到哪个计算机</li><li>MAC地址决定了下一跳给谁，即下一个设备给谁</li></ul><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><h4 id="ARP协议工作机制"><a href="#ARP协议工作机制" class="headerlink" title="ARP协议工作机制"></a>ARP协议工作机制</h4><p>ARP协议负责把IP地址解析成MAC地址，解析靠广播</p><h4 id="判定ARP欺骗"><a href="#判定ARP欺骗" class="headerlink" title="判定ARP欺骗"></a>判定ARP欺骗</h4><h5 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h5><p>一台计算机恶意覆盖网关地址，获取其他计算机发给路由器的数据信息</p><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><p>arp -a</p><h4 id="逆地址解析协议RARP"><a href="#逆地址解析协议RARP" class="headerlink" title="逆地址解析协议RARP"></a>逆地址解析协议RARP</h4><p>逆地址解析协议RARP使只知道自己硬件地址的主机能够知道其IP地址。</p><h3 id="数据包-1"><a href="#数据包-1" class="headerlink" title="数据包"></a>数据包</h3><h4 id="数据包首部"><a href="#数据包首部" class="headerlink" title="数据包首部"></a>数据包首部</h4><p><strong>一个IP数据报由首部和数据两部分组成</strong></p><ul><li>首部的前一部分是固定长度，共20字节，是所有IP数据报必须具有的</li><li>在首部的固定部分的后面是一些可选字段，其长度是可变的。</li></ul><h4 id="IP数据报首部的固定部分中的各字段"><a href="#IP数据报首部的固定部分中的各字段" class="headerlink" title="IP数据报首部的固定部分中的各字段"></a>IP数据报首部的固定部分中的各字段</h4><ol><li><p>版本</p><p>占四位，指IP协议的版本（IPv4还是IPv6）</p></li><li><p>首部长度</p><p>占四位，可表示的最大数值是15个单位（一个单位为4字节）</p></li><li><p>区分服务</p><p> 占八位，用来获取更好的服务，区分服务的轻重缓急，路由器端也要配有区分服务才能使用</p></li><li><p>总长度</p><p>占16位，指首部和数据之和的长度</p></li><li><p>标识</p><p>占16位，计数器，用来产生数据报的标识</p></li><li><p>标志</p><p>区别包是否分片</p></li><li><p>片偏移</p><p>表示偏移量</p></li><li><p>生存时间</p><p>记为TTL，数据报在网路中可通过的路由器数的最大值</p></li><li><p>协议</p><p>(8位)字段指出此数据报携带的数据使用何种协议以便目的主机的IP层将数据部分上交给哪个处理过程</p></li><li><p>首部校验和</p><p>(16位)字段只检验数据报的首部，不检验数据部分。这里不采用CRC检验码而采用简单的计算方法</p></li></ol><h4 id="IP数据报首部的可变部分"><a href="#IP数据报首部的可变部分" class="headerlink" title="IP数据报首部的可变部分"></a>IP数据报首部的可变部分</h4><ul><li>IP首部的可变部分就是一个选项字段，用来支持排错、测量以及安全等措施，内容很丰富。</li><li>选项字段的长度可变，从1个字节到40个字节不等，取决于所选择的项目。</li><li>错加首部的可变部分是为了增加IP数据报的功能，但这同时也使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理数据报的开销。实际上这些选项很少被使用。</li></ul><h3 id="IP转发分组的流程"><a href="#IP转发分组的流程" class="headerlink" title="IP转发分组的流程"></a>IP转发分组的流程</h3><h4 id="数据路由"><a href="#数据路由" class="headerlink" title="数据路由"></a>数据路由</h4><p>路由器在不同网段转发数据包</p><h4 id="网络畅通的条件"><a href="#网络畅通的条件" class="headerlink" title="网络畅通的条件"></a>网络畅通的条件</h4><p>能去能回</p><ul><li>沿途的路由器必须知道到目标网络下一跳给哪个接口</li><li>沿途的路由器必须知道到源网络下一跳给哪个接口</li></ul><p><strong>管理员给路由器加路由表时，告诉路由器没有直连的所有网络怎么走，叫做静态路由，配完后才能通</strong></p><h3 id="无分类编址的IPv4地址"><a href="#无分类编址的IPv4地址" class="headerlink" title="无分类编址的IPv4地址"></a>无分类编址的IPv4地址</h3><h4 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h4><ul><li>划分子网在一定程度上缓解了因特网在发展中遇到的困难，但是数量巨大的C类网因为其地址空间太小并没有得到充分使用，而因特网的P地址仍在加速消耗，整个PV4地址空间面临全部耗尽的威胁。</li><li>为此，因特网工程任务组ETF又提出了采用无分类编址的方法来解决P地址紧张的问题，同时还专门成立PV6工作组负责研究新版本P以彻底解决P地址耗尽问题。</li><li>1993年，IETF发布了无分类域间路由选择CIDR(Classless Inter-.Domain Routing)的RFC文档：RFC1517~1519和1520。</li><li>CIDR消除了传统的A类、B类和C类地址，以及划分子网的概念；</li><li>CIDR可以更加有效地分配IPv4的地址空间，并且可以在新的1PV6使用之前允许因特网<br>的规模继续增长。</li></ul><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ol><li>CIDR使用“斜线记法”，或称CIDR记法。即在IPV4地址后面加上斜线“&#x2F;”，在斜线后面写上网络前缀所占的比特数量。</li><li>CIDR实际上是将网络前缀都相同的连续的IP地址组成一个“CIDR地址块”。</li><li>我们只要知道CDR地址块中的任何一个地址，就可以知道该地址块的全部细节：<ul><li>地址块的最小地址</li><li>地址块的最大地址</li><li>地址块中的地址数量</li><li>地址块聚合某类网络(A类、B类或C类)的数量</li><li>地址掩码（也可继续称为子网掩码）</li></ul></li></ol><h4 id="路由聚合"><a href="#路由聚合" class="headerlink" title="路由聚合"></a>路由聚合</h4><ol><li>网络前缀越长，地址块越小，路由越具体；</li><li>若路由器查表转发分组时发现有多条路由可选，则选择网络前缀最长的那条，这称为最长前缀匹配，因为这样的路由更具体。</li><li>网络地址&#x3D;网络前缀+主机号全0</li><li>广播地址&#x3D;网络前缀+主机号全1</li></ol><h3 id="IP数据报的发送和转发过程"><a href="#IP数据报的发送和转发过程" class="headerlink" title="IP数据报的发送和转发过程"></a>IP数据报的发送和转发过程</h3><p>IP数据报的发送和转发过程包含以下两部分：</p><ul><li>主机发送IP数据报</li><li>路由器转发P数据报</li></ul><p>为了将重点放在TCP&#x2F;八P协议栈的网际层发送和转发IP数据报的过程上，在之后的举例中，我们忽略使用ARP协议来获取目的主机或路由器接口的MAC地址的过程以及以太网交换机自学习和转发帧的过程。</p><h4 id="直接交付"><a href="#直接交付" class="headerlink" title="直接交付"></a>直接交付</h4><p>同一个网络中的主机间可以直接通信</p><h4 id="间接交付"><a href="#间接交付" class="headerlink" title="间接交付"></a>间接交付</h4><p>不同网络中的主机通信，通过路由器进行中转</p><h4 id="默认网关"><a href="#默认网关" class="headerlink" title="默认网关"></a>默认网关</h4><p>当本网络中的主机要和其他网络中的主机进行通信时，会将IP数据报传输给默认网关，由默认网关帮主机将IP数据报转发出去</p><h4 id="路由转发"><a href="#路由转发" class="headerlink" title="路由转发"></a>路由转发</h4><p><strong>路由器收到IP数据报后如何转发？</strong></p><ol><li><p>检查IP数据报首部是否出错：</p><ul><li>若出错，则直接丢弃该P数据报并通告源主机</li><li>若没有出错，则进行转发</li></ul></li><li><p>根据P数据报的目的地址在路由表中查找匹配的条目：</p><ul><li><p>若找到匹配的条目，则转发给条目中指示的下一跳</p></li><li><p>若找不到，则丢弃该P数据报并通告源主机</p></li></ul></li></ol><h3 id="静态路由配置及其可能产生的路由环路问题"><a href="#静态路由配置及其可能产生的路由环路问题" class="headerlink" title="静态路由配置及其可能产生的路由环路问题"></a>静态路由配置及其可能产生的路由环路问题</h3><ol><li>静态路由配置是指用户或网络管理员使用路由器的相关命令给路由器人工配置路由表。<ul><li>这种人工配置方式简单、开销小。但不能及时适应网络状态（流量、拓扑等）的变化。</li><li>一般只在小规模网络中采用。</li></ul></li><li>使用静态路由配置可能出现以下导致产生路由环路的错误<ul><li>配置错误</li><li>聚合了不存在的网络</li><li>网络故障</li></ul></li></ol><h2 id="计算机网络微课堂"><a href="#计算机网络微课堂" class="headerlink" title="计算机网络微课堂"></a>计算机网络微课堂</h2><h3 id="因特网概述-1"><a href="#因特网概述-1" class="headerlink" title="因特网概述"></a>因特网概述</h3><h4 id="网络、互联网和因特网"><a href="#网络、互联网和因特网" class="headerlink" title="网络、互联网和因特网"></a>网络、互联网和因特网</h4><ul><li>网络(Network)由若干<strong>结点</strong>(Node)和连接这些结点的<strong>链路</strong>(Link)组成，</li><li>多个网络还可以通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互联网(或互连网)。因此，互联网是“<strong>网铬的网络</strong>“(Netwrok of Networks)”。</li><li>因特网(Internet)是世界上最大的互连网络（用户数以亿计，互连的网络数以百万计），</li></ul><h4 id="internet和Internet的区别"><a href="#internet和Internet的区别" class="headerlink" title="internet和Internet的区别"></a>internet和Internet的区别</h4><ul><li>internet(互联网回或互连网)是一个通用名词，它泛指由多个计算机网络互连而成的网络。在这些网络之间的通信协议可以是任意的。</li><li>Internet(因特网)则是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用TCPP协议族作为通信的规则，其前身是美国的ARPANET。</li></ul><h4 id="因特网服务提供者ISP"><a href="#因特网服务提供者ISP" class="headerlink" title="因特网服务提供者ISP"></a>因特网服务提供者ISP</h4><p>因特网上的主机都必须有IP地址才能进行通信，通过ISP接入到因特网。ISP可以从因特网管理机构申请到成块的IP地址，同时拥有通信线路以及路由器等连网设备，任何机构和个人只要向ISP交纳规定的费用，就可以从ISP得到所需要的IP地址。我国主要的ISP是中国电信、中国联通和中国移动这三大电信运营商。</p><h4 id="因特网的组成-1"><a href="#因特网的组成-1" class="headerlink" title="因特网的组成"></a>因特网的组成</h4><ul><li><p>边缘部分</p><p>由所有连接在因特网上的<strong>主机</strong>组成。这部分是<strong>用户直接使用</strong>的，用来进行<strong>通信</strong>（传送数据、音频或视频)和<strong>资源共享</strong>，</p></li><li><p>核心部分</p><p>由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成。这部分是<strong>为边缘部分提供服务</strong>的（提供连通性和交换）</p></li></ul><h3 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h3><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><ul><li>电话交换机接通电话线的方式称为电路交换：</li><li>从通信资源的分配角度来看，交换(Switching)就是按照某种方式动态地分配传输线路的资源；</li><li>电路交换的三个步骤：<ol><li>建立连接（分配通信资源）</li><li>通话（一直占用通信资源）</li><li>释放连接（归还通信资源）</li></ol></li><li>当使用电路交换来传送计算机数据时，其线路的传输效率往往很低。</li></ul><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol><li>通信时延小</li><li>有序传输</li><li>没有冲突</li><li>适用范围广</li><li>实时性强</li><li>控制简单</li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>建立连接时间长</li><li>线路独占，使用效率低</li><li>灵活性差</li><li>难以规格化</li></ol><h4 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ol><li>无需建立连接</li><li>动态分配线路</li><li>提高线路可靠性</li><li>提高线路利用率</li><li>提供多目标服务</li></ol><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol><li>引起了转发时延</li><li>需要较大存储缓存空间</li><li>需要传输额外的信息量</li></ol><h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><ol><li>无需建立连接</li><li>线路利用率高</li><li>简化了存储管理</li><li>加速传输</li><li>减少出错概率和重发数据量</li></ol><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><ol><li>引起了转发时延</li><li>需要传输额外的信息量</li><li>对于数据报服务，存在失序、丢失或者重复分组的问题。对于虚电路服务，存在呼叫建立、数据传输和虚电路释放三个过程</li></ol><h3 id="计算机网络的定义与分类"><a href="#计算机网络的定义与分类" class="headerlink" title="计算机网络的定义与分类"></a>计算机网络的定义与分类</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>计算机网络的精确定义并未统一</li><li>计算机网络的最简单的定义是：一些<strong>互</strong>相<strong>连</strong>接的、<strong>自治</strong>的计算机的<strong>集合</strong>。<ul><li>互连 是指计算机之间可以通过有线或无线的方式进行数据通信：</li><li>自治 是指独立的计算机，它有自己的硬件和软件，可以单独运行使用：</li><li>集合 是指至少需要两台计算机：</li></ul></li><li>计算机网络的较好的定义是：计算机网络主要是由一些<strong>通用的、可编程的硬件</strong>互连而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号)。这些可编程的硬件能够用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>。<ul><li>计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件。</li><li>计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用)。</li></ul></li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="按交换技术分类"><a href="#按交换技术分类" class="headerlink" title="按交换技术分类"></a>按交换技术分类</h5><ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul><h5 id="按使用者分类"><a href="#按使用者分类" class="headerlink" title="按使用者分类"></a>按使用者分类</h5><ul><li>公用网</li><li>专用网</li></ul><h5 id="按传输介质分类"><a href="#按传输介质分类" class="headerlink" title="按传输介质分类"></a>按传输介质分类</h5><ul><li>有线网络</li><li>无线网络</li></ul><h5 id="按覆盖范围分类"><a href="#按覆盖范围分类" class="headerlink" title="按覆盖范围分类"></a>按覆盖范围分类</h5><ul><li>广域网WAN</li><li>城域网MAN</li><li>局域网LAN</li><li>个域网PAN</li></ul><h5 id="按拓扑结构分类"><a href="#按拓扑结构分类" class="headerlink" title="按拓扑结构分类"></a>按拓扑结构分类</h5><ul><li>总线型网络</li><li>星型网络</li><li>环型网络</li><li>网状型网络</li></ul><h3 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h3><h5 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h5><ul><li><p>连接在计算机网络上的主机在数字信道上传送比特的速率，也称为<strong>比特率</strong>或<strong>数据率</strong>。</p></li><li><p>常用的数据率单位</p><p>bit&#x2F;s（b&#x2F;s，bps）</p><p>kb&#x2F;s&#x3D;10^3b&#x2F;s(bps)</p></li></ul><h5 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h5><ul><li><p>用来表示网络的<strong>通信线路</strong>所能传送数据的能力，因此网络带宽表示在单位时间内从网络中的某一点到另一点所能通过的“<strong>最高数据率</strong>”;</p></li><li><p>单位与速率单位相同</p></li><li><p>一条通信线路的“频带宽度”越宽，其所传输数据的“最高数据率”也越高。</p></li></ul><h5 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h5><ul><li>吞吐量表示在<strong>单位时间内通过某个网络（或信道、接口）的数据量</strong>。</li><li>吞吐量被经常用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。</li><li>吞吐量<strong>受网络的带宽可或额定速率的限制</strong></li></ul><h5 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h5><ul><li>网络时延包括发送时延、传播时延、处理时延</li><li>发送时延&#x3D;分组长度（d）&#x2F;发送速率（b&#x2F;s）</li><li>网卡的发送速率、信道带宽、交换机的接口速率，它们共同决定着主机的发送速率。</li><li>传播时延&#x3D;信道长度（m）&#x2F;电磁波传播速率（m&#x2F;s）<ul><li>自由空间：3×10^8 m&#x2F;s</li><li>铜线：2.3×10^8 m&#x2F;s</li><li>光纤：2×10^8 m&#x2F;s</li></ul></li><li>处理时延一般不方便计算</li></ul><h5 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h5><ul><li>时延带宽积&#x3D;传播时延×带宽</li><li>若发送端连续发送数据，则在所发送的第一个比特即将到达终点时，发送端就已经发送了时延带宽积个比特：</li><li>链路的时延带宽积又称为<strong>以比特为单位的链路长度</strong>。</li></ul><h5 id="往返时间"><a href="#往返时间" class="headerlink" title="往返时间"></a>往返时间</h5><ul><li>在许多情况下，因特网上的信息不仅仅单方向传输，而是双向交互：</li><li>我们有时很需要知道双向交互一次所需的时间；</li><li>因此，往返时间RTT(Round-Trip Time)也是一个重要的性能指标。</li></ul><h5 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h5><ul><li>利用率包含：信道利用率和网络利用率</li><li>信道利用率 用来表示某信道有百分之几的时间是被利用的（有数据通过）</li><li>网络利用率 全网络的信道利用率的加权平均。</li><li>根据排队论，当某信道的利用率增大时，该信道引起的时延也会迅速增加：</li><li>因此，信道利用率并非越高越好：</li><li>如果令D0表示网络空闲时的时延，D表示网络当前的时延，那么在适当的假定条件下，可以用下面的简单公式来表示D、D0和利用率U之间的关系：<ul><li>D&#x3D;D0&#x2F;1-U</li><li>当网络的利用率达到50%时，时延就要加倍：</li><li>当网络的利用率超过50%时，时延急剧增大：</li><li>当网络的利用率接近100%时，时延就趋于无穷大：</li><li>因此，一些拥有较大主干网的SP通常会控制它们的信道利用率不超过50%。如果超过了，就要准备扩容，增大线路的带宽。</li></ul></li><li>也不能使信道利用率太低，这会使宝贵的通信资源被白白浪费。应该使用一些机制，可以根据情况动态调整输入到网络中的通信量，使网络利用率保持在一个合理的范围内，</li></ul><h5 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h5><ul><li>丢包率即分组丢失率，是指在一定的时间范围内，传输过程中<strong>丢失的分组数量与总分组数量的比率。</strong></li><li>丢包率具体可分为接口丢包率、结点丢包率、链路丢包率、路径丢包率、网络丢包率等。</li><li>丢包率是网络运维人员非常关心的一个网络性能指标，但对于普通用户来说往往并不关心这个指标，因为他们通常意识不到网络丢包。</li><li>分组丢失主要有两种情况：<ul><li>分组在传输过程中出现<strong>误码</strong>，被结点丢弃：</li><li>分组到达一台队列已满的分组交换机时被丢弃：在通信量较大时就可能造成<strong>网络拥塞</strong></li></ul></li><li>因此，丢包率反映了网络的拥塞情况：<ul><li>无拥塞时路径丢包率为0</li><li>轻度拥塞时路径丢包率为1%~4%</li><li>严重拥塞时路径丢包率为5%~15%</li></ul></li></ul><h3 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h3><h4 id="常见的计算机网络体系结构"><a href="#常见的计算机网络体系结构" class="headerlink" title="常见的计算机网络体系结构"></a>常见的计算机网络体系结构</h4><ul><li><p>OSI体系结构（法律上的国际标准）</p><p>物理层、数据链路层、网络层、运输层、会话层、表示层、应用层</p></li><li><p>TCP&#x2F;IP体系结构（事实上的国际标准）</p><p>网络接口层、网际层、运输层、应用层</p></li><li><p>原理体系层</p><p>物理层、数据链路层、网络层、运输层、应用层</p></li></ul><h4 id="计算机网络体系结构分层的必要性"><a href="#计算机网络体系结构分层的必要性" class="headerlink" title="计算机网络体系结构分层的必要性"></a>计算机网络体系结构分层的必要性</h4><ul><li><p>计算机网络是个非常复杂的系统。早在最初的ARPANET设计时就提出了分层的设计理念。</p></li><li><p>“<strong>分层</strong>“可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。</p></li><li><p>下面，我们按照由简单到复杂的顺序，来看看实现计算机网络要面临哪些主要的问题，以及如何将这些问题划分到相应的层次，层层处理。</p><ol><li><p>物理层</p><p>解决使用何种信号来传输比特的问题</p><ul><li>采用怎样的传输媒体（介质）</li><li>采用怎样的物理接口</li><li>使用怎样的信号表示比特0和1</li></ul></li><li><p>数据链路层</p><p>解决分组在一个网络（或一段链路）上传输的问题</p><ul><li>如何标识网络中的各主机（主机编址问题，例如MAC地址）</li><li>如何从信号所表示的一连串比特流中区分出地址和数据</li><li>如何协调各主机争用总线</li></ul></li><li><p>网络层</p><p>解决分组在多个网络上传输（路由）的问题</p><ul><li>如何标识各网络以及网络中的各主机（网络和主机共同编址的问题，例如IP地址）</li><li>路由器如何转发分组，如何进行路由选择</li></ul></li><li><p>运输层</p><p>解决进程之间基于网络的通信问题</p><ul><li>如何解决进程之间基于网络的通信问题</li><li>出现传输错误时，如何处理</li></ul></li><li><p>应用层</p><p>解决通过应用进程的交互来实现特定网络应用的问题</p><ul><li>通过应用进程间的交互来完成特定的网络应用</li></ul></li></ol><h4 id="计算机网络体系结构中的专用术语"><a href="#计算机网络体系结构中的专用术语" class="headerlink" title="计算机网络体系结构中的专用术语"></a>计算机网络体系结构中的专用术语</h4><h5 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h5></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaEE</title>
      <link href="/2023/05/29/2023-5-29-javaEE/"/>
      <url>/2023/05/29/2023-5-29-javaEE/</url>
      
        <content type="html"><![CDATA[<h2 id="javaEE笔记"><a href="#javaEE笔记" class="headerlink" title="javaEE笔记"></a>javaEE笔记</h2><h3 id="遇到的问题一"><a href="#遇到的问题一" class="headerlink" title="遇到的问题一"></a>遇到的问题一</h3><p>在idea中右击新建没有servlet选项</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>点击文件当中的项目结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291639421.png" alt="image-20230529163938335"></p><p>在Facet中找到该项目，在源根中勾选两个选项，点击确定</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291641522.png" alt="image-20230529164134434"></p><p>至此，返回对应的文件夹，右击新建即可看到servlet选项</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291642126.png" alt="image-20230529164251990"></p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库原理</title>
      <link href="/2023/05/24/2023-5-24-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/"/>
      <url>/2023/05/24/2023-5-24-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库原理"><a href="#数据库原理" class="headerlink" title="数据库原理"></a>数据库原理</h2><h3 id="数据库的四个基本概念"><a href="#数据库的四个基本概念" class="headerlink" title="数据库的四个基本概念"></a>数据库的四个基本概念</h3><p>数据是数据库中存储的基本对象</p><h4 id="数据的定义"><a href="#数据的定义" class="headerlink" title="数据的定义"></a>数据的定义</h4><p>描述事物的符号记录</p><h4 id="数据的种类"><a href="#数据的种类" class="headerlink" title="数据的种类"></a>数据的种类</h4><p>文字、图形、图像、声音、数字、视频等</p><h4 id="数据的特点"><a href="#数据的特点" class="headerlink" title="数据的特点"></a>数据的特点</h4><p>数据与语义是不可分的</p><h4 id="计算机记录"><a href="#计算机记录" class="headerlink" title="计算机记录"></a>计算机记录</h4><p>记录是计算机中表示和存储数据的一种形式</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>长期存储在计算机内、有组织的、可共享的大量数据的集合</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余性较小</li><li>数据独立性高</li><li>易扩展</li></ul><h3 id="数据库管理系统（DBMS）"><a href="#数据库管理系统（DBMS）" class="headerlink" title="数据库管理系统（DBMS）"></a>数据库管理系统（DBMS）</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>位于用户与操作系统之间的一层数据管理软件</p><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p>科学地组织和存储数据、高效地获取和维护数据</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><h5 id="数据定义功能"><a href="#数据定义功能" class="headerlink" title="数据定义功能"></a>数据定义功能</h5><p>DBMS提高数据定义语言（DDL）对数据库中的数据对象的组成与结构进行定义</p><h5 id="数据组织、存储和管理"><a href="#数据组织、存储和管理" class="headerlink" title="数据组织、存储和管理"></a>数据组织、存储和管理</h5><p>提高存储空间利用率和方便存取，提供多种存取方法（索引查找、hash查找、顺序查找等）提高存取效率</p><h5 id="数据操纵功能"><a href="#数据操纵功能" class="headerlink" title="数据操纵功能"></a>数据操纵功能</h5><p>DBMS提高数据操作语言（DML）操纵数据实现对数据库的基本操作（增删改查）</p><h5 id="数据库的事物管理和运行管理"><a href="#数据库的事物管理和运行管理" class="headerlink" title="数据库的事物管理和运行管理"></a>数据库的事物管理和运行管理</h5><p>保证数据的安全性、完整性、多用户对数据的并发使用、发生故障后的系统恢复</p><h5 id="数据库的建立和维护功能"><a href="#数据库的建立和维护功能" class="headerlink" title="数据库的建立和维护功能"></a>数据库的建立和维护功能</h5><p>数据库数据批量装载、数据库转储、介质故障恢复、数据库的重组织以及性能监视</p><h5 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h5><p>与网络中的其他软件系统的通信功能，数据转换功能，异构数据库之间的互访和互操功能等</p><h3 id="数据库系统（DBS）"><a href="#数据库系统（DBS）" class="headerlink" title="数据库系统（DBS）"></a>数据库系统（DBS）</h3><p>由数据库、数据库管理系统（及应用开发工具）、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统。</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><ul><li>概念模型也称信息模型，它是按用户的观点来对数据和信息建模，主要用于数据库设计。</li><li>数据模型主要包括网状模型、层次模型、关系模型等，它是按计算机系统的观点对数据进行建模，描述数据在系统内部的表示方式和存取方法。</li></ul><h4 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h4><ul><li>实体（Entity）：客观存在并可相互区别的事物成为实体，可以是具体的人、事、物或抽象的概念。</li><li>属性(Attribute)：实体所具有的某一特性称为属性，一个实体可以由若干个属性来刻画。</li><li>码(Key)：唯一标识实体的属性集称为码。</li><li>域(Domain)：属性的取值范围称为该属性的域。</li><li>实体型(Entity Type)：用实体名及其属性名集合来抽象和刻画同类实体称为实体型。</li><li>实体集(Entity Set)：同型实体的集合称实体集。</li><li>联系(Relationship)：现实世界中事物内部及其事物之间的联系在信息世界中反映为实体内部的联系和实体之间的联系。</li></ul><h5 id="两个实体之间的联系"><a href="#两个实体之间的联系" class="headerlink" title="两个实体之间的联系"></a>两个实体之间的联系</h5><ol><li>一对一联系</li><li>一对多联系</li><li>多对多联系</li></ol><h5 id="实体表示方法：E-R图"><a href="#实体表示方法：E-R图" class="headerlink" title="实体表示方法：E-R图"></a>实体表示方法：E-R图</h5><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121834929.png" alt="image-20230612183423816"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121835769.png" alt="image-20230612183500671"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121835276.png" alt="image-20230612183536146"></p><h4 id="组成要素"><a href="#组成要素" class="headerlink" title="组成要素"></a>组成要素</h4><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><p>描述数据库的组成对象以及对象之间的联系。一类是对象的类型内容等；一类是对象之间的关系。</p><h5 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h5><p>对数据库中各种对象的实例允许执行操作的集合</p><h5 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h5><p>数据及其联系所具有的制约和依存规则</p><h4 id="常用的数据模型"><a href="#常用的数据模型" class="headerlink" title="常用的数据模型"></a>常用的数据模型</h4><h5 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h5><p>层次模型数据结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121923197.png" alt="image-20230612192350095"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121924638.png" alt="image-20230612192454540"></p><p> <img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121926474.png" alt="image-20230612192624372"></p><h5 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h5><p>网状模型数据结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121932660.png" alt="image-20230612193246557"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306121951255.png" alt="image-20230612195148170"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#</title>
      <link href="/2023/05/14/2023-5-14-C/"/>
      <url>/2023/05/14/2023-5-14-C/</url>
      
        <content type="html"><![CDATA[<h2 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h2><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>值类型的数据结构，单一变量存储各种数据类型。</p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>struct关键字创建</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>1.可定义构造函数，不能定义析构函数和无参构造函数</p><p>2.不能继承其他结构或者类，但是可以实验一个或者多个接口</p><p>3.结构成员不能指定为abstract、virtual、protected</p><p>4.可以不使用New操作符进行实例化</p><h4 id="结构与类的比较"><a href="#结构与类的比较" class="headerlink" title="结构与类的比较"></a>结构与类的比较</h4><p>1.类是引用类型，结构是值类型</p><p>2.结构不能声明无参构造函数</p><p>3，结构不支持继承</p><p>4.结构中声明的字段无法赋予初值</p><p>5.结构体的构造函数中，必须为结构体所有字段赋值</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>值类型，一组命名整型常量</p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>enum关键字声明</p><h4 id="声明语法"><a href="#声明语法" class="headerlink" title="声明语法"></a>声明语法</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> &lt;enum_name&gt;</span><br><span class="line">&#123;</span><br><span class="line">    enumeration list</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>enum_name指定枚举类型的名称</li><li>enumeration list是一个用逗号分隔的标识符列表</li></ul><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>1.枚举列表中的每个符号代表一个整数值，一个比它前面的符号大的整数值。默认情况下，第一个枚举符号的值是0</p><p>2.不能继承和传递继承</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>以关键字class开始，后跟类的名称。类的主体，包含在一对花括号内。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;access specifier&gt; <span class="keyword">class</span>  <span class="title">class_name</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// member variables</span></span><br><span class="line">    &lt;access specifier&gt; &lt;data type&gt; variable1;</span><br><span class="line">    &lt;access specifier&gt; &lt;data type&gt; variable2;</span><br><span class="line">    ...</span><br><span class="line">    &lt;access specifier&gt; &lt;data type&gt; variableN;</span><br><span class="line">    <span class="comment">// member methods</span></span><br><span class="line">    &lt;access specifier&gt; &lt;<span class="keyword">return</span> type&gt; method1(parameter_list)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">    &lt;access specifier&gt; &lt;<span class="keyword">return</span> type&gt; method2(parameter_list)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    &lt;access specifier&gt; &lt;<span class="keyword">return</span> type&gt; methodN(parameter_list)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ul><li>访问标识符<code>&lt;access specifier&gt;</code>指定了对类和成员的访问规则，默认情况下，类的访问标识符是<code>internal</code>，成员的访问标识符是<code>private</code></li><li><code>&lt;data type&gt;</code>指定了变量的类型，<code>&lt;return type&gt;</code>指定了返回方法的数据类型</li><li>点运算符链接了对象的名称和成员的名称</li></ul><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>类的特殊成员函数，当创建类的新对象执行，名称与类的名称完全相同，没有任何返回类型</p><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>类的特殊成员函数，当类的对象超出范围时执行。</p><p>在类的名称前加上一个波浪号（~)作为前缀，不返回值，也不带任何参数</p><p>用于在结束程序（关闭文件、释放内存）之前释放资源。</p><p>不能继承和重载</p><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>static关键字定义类成员</p><p>用于定义常量，直接调用类而不需要创建类的实例获取</p><p>在成员函数或类的定义外部初始化，也可以在类的定义内部初始化静态变量</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>不需要完全重新编写新的数据成员和成员函数，只需要设计一个新的类，继承了已有的类的成员即可。这个已有的类被称为的<strong>基类</strong>，这个新的类被称为<strong>派生类</strong></p><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;访问修饰符&gt; <span class="keyword">class</span> &lt;基类&gt;</span><br><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> &lt;派生类&gt; : &lt;基类&gt;</span><br><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p><strong>C# 不支持多重继承</strong>。但是可以使用接口来实现多重继承。</p><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p>同一个接口，使用不同的实例而执行不同操作</p><h4 id="静态多态性"><a href="#静态多态性" class="headerlink" title="静态多态性"></a>静态多态性</h4><ul><li>函数重载</li><li>运算符重载</li></ul><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>在同一个范围内对相同的函数名有多个定义，可以是参数列表中的<strong>参数类型</strong>不同，也可以是<strong>参数个数</strong>不同，不能只有返回类型不同的函数声明</p><h4 id="动态多态性"><a href="#动态多态性" class="headerlink" title="动态多态性"></a>动态多态性</h4><p>使用关键字 <strong>abstract</strong> 创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。<strong>抽象类</strong>包含抽象方法，抽象方法可被派生类实现。</p><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ul><li>不能创建抽象类的实例</li><li>不能在一个抽象类外部声明一个抽象方法</li><li>在类定义前面放置关键字 <strong>sealed</strong>，可以将类声明为<strong>密封类</strong>。当一个类被声明为 <strong>sealed</strong> 时，它不能被继承。抽象类不能被声明为 sealed。</li></ul><h4 id="虚方法"><a href="#虚方法" class="headerlink" title="虚方法"></a>虚方法</h4><p>当有一个定义在类中的函数需要在继承类中实现时，可以使用<strong>虚方法</strong></p><p>使用关键字 <strong>virtual</strong> 声明，在不同的继承类中有不同的实现</p><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><h4 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h4><p>可以重定义或重载 C# 中内置的运算符，具有特殊名称的函数</p><p>关键字 <strong>operator</strong> 后跟运算符的符号来定义</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OperatorOvlApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="built_in">double</span> length;      <span class="comment">// 长度</span></span><br><span class="line">       <span class="keyword">private</span> <span class="built_in">double</span> breadth;     <span class="comment">// 宽度</span></span><br><span class="line">       <span class="keyword">private</span> <span class="built_in">double</span> height;      <span class="comment">// 高度</span></span><br><span class="line">     </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getVolume</span>()</span></span><br><span class="line">       &#123;</span><br><span class="line">         <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span>(<span class="params"> <span class="built_in">double</span> len </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          length = len;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBreadth</span>(<span class="params"> <span class="built_in">double</span> bre </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          breadth = bre;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span>(<span class="params"> <span class="built_in">double</span> hei </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          height = hei;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重载 + 运算符来把两个 Box 对象相加</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> Box <span class="keyword">operator</span>+ (Box b, Box c)</span><br><span class="line">      &#123;</span><br><span class="line">          Box box = <span class="keyword">new</span> Box();</span><br><span class="line">          box.length = b.length + c.length;</span><br><span class="line">          box.breadth = b.breadth + c.breadth;</span><br><span class="line">          box.height = b.height + c.height;</span><br><span class="line">          <span class="keyword">return</span> box;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> == (Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length == rhs.length &amp;&amp; lhs.height == rhs.height</span><br><span class="line">             &amp;&amp; lhs.breadth == rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> !=(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length != rhs.length || lhs.height != rhs.height</span><br><span class="line">              || lhs.breadth != rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &lt;(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &lt; rhs.length &amp;&amp; lhs.height</span><br><span class="line">              &lt; rhs.height &amp;&amp; lhs.breadth &lt; rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &gt;(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &gt; rhs.length &amp;&amp; lhs.height</span><br><span class="line">              &gt; rhs.height &amp;&amp; lhs.breadth &gt; rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &lt;=(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &lt;= rhs.length &amp;&amp; lhs.height</span><br><span class="line">              &lt;= rhs.height &amp;&amp; lhs.breadth &lt;= rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &gt;=(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &gt;= rhs.length &amp;&amp; lhs.height</span><br><span class="line">             &gt;= rhs.height &amp;&amp; lhs.breadth &gt;= rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> String.Format(<span class="string">&quot;(&#123;0&#125;, &#123;1&#125;, &#123;2&#125;)&quot;</span>, length, breadth, height);</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">class</span> <span class="title">Tester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">        Box Box1 = <span class="keyword">new</span> Box();          <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">        Box Box2 = <span class="keyword">new</span> Box();          <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">        Box Box3 = <span class="keyword">new</span> Box();          <span class="comment">// 声明 Box3，类型为 Box</span></span><br><span class="line">        Box Box4 = <span class="keyword">new</span> Box();</span><br><span class="line">        <span class="built_in">double</span> volume = <span class="number">0.0</span>;   <span class="comment">// 体积</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Box1 详述</span></span><br><span class="line">        Box1.setLength(<span class="number">6.0</span>);</span><br><span class="line">        Box1.setBreadth(<span class="number">7.0</span>);</span><br><span class="line">        Box1.setHeight(<span class="number">5.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Box2 详述</span></span><br><span class="line">        Box2.setLength(<span class="number">12.0</span>);</span><br><span class="line">        Box2.setBreadth(<span class="number">13.0</span>);</span><br><span class="line">        Box2.setHeight(<span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用重载的 ToString() 显示两个盒子</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box1： &#123;0&#125;&quot;</span>, Box1.ToString());</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box2： &#123;0&#125;&quot;</span>, Box2.ToString());</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// Box1 的体积</span></span><br><span class="line">        volume = Box1.getVolume();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box1 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Box2 的体积</span></span><br><span class="line">        volume = Box2.getVolume();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box2 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把两个对象相加</span></span><br><span class="line">        Box3 = Box1 + Box2;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box3： &#123;0&#125;&quot;</span>, Box3.ToString());</span><br><span class="line">        <span class="comment">// Box3 的体积</span></span><br><span class="line">        volume = Box3.getVolume();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box3 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//comparing the boxes</span></span><br><span class="line">        <span class="keyword">if</span> (Box1 &gt; Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 大于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不大于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 &lt; Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 小于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不小于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 &gt;= Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 大于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不大于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 &lt;= Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 小于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不小于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 != Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 等于 Box2&quot;</span>);</span><br><span class="line">        Box4 = Box3;</span><br><span class="line">        <span class="keyword">if</span> (Box3 == Box4)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box3 等于 Box4&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box3 不等于 Box4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Box1： (6, 7, 5)</span><br><span class="line">Box2： (12, 13, 10)</span><br><span class="line">Box1 的体积： 210</span><br><span class="line">Box2 的体积： 1560</span><br><span class="line">Box3： (18, 20, 15)</span><br><span class="line">Box3 的体积： 5400</span><br><span class="line">Box1 不大于 Box2</span><br><span class="line">Box1 小于 Box2</span><br><span class="line">Box1 不大于等于 Box2</span><br><span class="line">Box1 小于等于 Box2</span><br><span class="line">Box1 不等于 Box2</span><br><span class="line">Box3 等于 Box4</span><br></pre></td></tr></table></figure><h4 id="可重载和不可重载运算符"><a href="#可重载和不可重载运算符" class="headerlink" title="可重载和不可重载运算符"></a>可重载和不可重载运算符</h4><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+, -, !, ~, ++, –</td><td>这些一元运算符只有一个操作数，且可以被重载。</td></tr><tr><td>+, -, *, &#x2F;, %</td><td>这些二元运算符带有两个操作数，且可以被重载。</td></tr><tr><td>&#x3D;&#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;</td><td>这些比较运算符可以被重载。</td></tr><tr><td>&amp;&amp;, ||</td><td>这些条件逻辑运算符不能被直接重载。</td></tr><tr><td>+&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D;</td><td>这些赋值运算符不能被重载。</td></tr><tr><td>&#x3D;, ., ?:, -&gt;, new, is, sizeof, typeof</td><td>这些运算符不能被重载。</td></tr></tbody></table><h4 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h4><ul><li>运算符只能采用值参数，不能采用 ref 或 out 参数</li><li>要求成对重载比较运算符。如果重载了&#x3D;&#x3D;，则也必须重载!&#x3D;，否则产生编译错误。比较运算符必须返回bool类型的值</li><li>不允许重载&#x3D;运算符，但如果重载例如+运算符，编译器会自动使用+运算符的重载来执行+&#x3D;运算符的操作</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h4><p>定义了所有类继承接口时应遵循的语法合同。接口定义了语法合同 <strong>“是什么”</strong> 部分，派生类定义了语法合同 <strong>“怎么做”</strong> 部分</p><p>使得实现接口的类或结构在形式上保持一致</p><p>接口本身并不实现任何功能，它只是和声明实现该接口的对象订立一个必须实现哪些行为的契约</p><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><p>使用 <strong>interface</strong> 关键字声明,与类的声明类似。接口声明默认是 public 的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IMyInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodToImplement</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h4><p>如果一个接口继承其他接口，那么实现类或结构就需要实现所有接口的成员</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><h4 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h4><p>提供一种让一组名称与其他名称分隔开的方式。在一个命名空间中声明的类的名称与另一个命名空间中声明的相同的类的名称不冲突。</p><p>以关键字 <strong>namespace</strong> 开始，后跟命名空间的名称</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">namespace_name</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 代码声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="using关键字"><a href="#using关键字" class="headerlink" title="using关键字"></a>using关键字</h4><p><strong>using</strong> 关键字表明程序使用的是给定命名空间中的名称</p><p>使用 <strong>using</strong> 命名空间指令，这样在使用的时候就不用在前面加上命名空间名称。该指令告诉编译器随后的代码使用了指定命名空间中的名称</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> first_space;</span><br><span class="line"><span class="keyword">using</span> second_space;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">abc</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside first_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">efg</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside second_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      abc fc = <span class="keyword">new</span> abc();</span><br><span class="line">      efg sc = <span class="keyword">new</span> efg();</span><br><span class="line">      fc.func();</span><br><span class="line">      sc.func();</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套命名空间"><a href="#嵌套命名空间" class="headerlink" title="嵌套命名空间"></a>嵌套命名空间</h4><p>命名空间可以被嵌套，即您可以在一个命名空间内定义另一个命名空间</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">namespace_name1</span> </span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 代码声明</span></span><br><span class="line">   <span class="keyword">namespace</span> <span class="title">namespace_name2</span> </span><br><span class="line">   &#123;</span><br><span class="line">     <span class="comment">// 代码声明</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用点（.）运算符访问嵌套的命名空间的成员</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace.Nested;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SomeNameSpace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;In SomeNameSpace&quot;</span>);</span><br><span class="line">            Nested.NestedNameSpaceClass.SayHello();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内嵌命名空间</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">Nested</span>  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NestedNameSpaceClass</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;In Nested&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h4><p>在程序执行期间出现的问题</p><p>提供了一种把程序控制权从某个部分转移到另一个部分的方式</p><p>关键字：<strong>try</strong>、<strong>catch</strong>、<strong>finally</strong> 和 <strong>throw</strong></p><ul><li><strong>try</strong>：一个 try 块标识了一个将被激活的特定的异常的代码块。后跟一个或多个 catch 块。</li><li><strong>catch</strong>：程序通过异常处理程序捕获异常。catch 关键字表示异常的捕获。</li><li><strong>finally</strong>：finally 块用于执行给定的语句，不管异常是否被抛出都会执行。例如，如果您打开一个文件，不管是否出现异常文件都要被关闭。</li><li><strong>throw</strong>：当问题出现时，程序抛出一个异常。使用 throw 关键字来完成。</li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 引起异常的语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName e1 )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 错误处理代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName e2 )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 错误处理代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName eN )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 错误处理代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 要执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h4><p>C# 中的异常类主要是直接或间接地派生于 <strong>System.Exception</strong> 类</p><p><strong>System.ApplicationException</strong> 类支持由应用程序生成的异常。所以程序员定义的异常都应派生自该类。</p><p><strong>System.SystemException</strong> 类是所有预定义的系统异常的基类。</p><h4 id="异常处理-1"><a href="#异常处理-1" class="headerlink" title="异常处理"></a>异常处理</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ErrorHandlingApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DivNumbers</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> result;</span><br><span class="line">        DivNumbers()</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">division</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                result = num1 / num2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (DivideByZeroException e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Exception caught: &#123;0&#125;&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Result: &#123;0&#125;&quot;</span>, result);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            DivNumbers d = <span class="keyword">new</span> DivNumbers();</span><br><span class="line">            d.division(<span class="number">25</span>, <span class="number">0</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception caught: System.DivideByZeroException: 尝试除以零。</span><br><span class="line">   在 finalReview.DivNumbers.division(Int32 num1, Int32 num2) 位置 D:\QQ\1766522495\.net应用开发技术\C#\finalReview\finalReview\Program.cs:行号 17</span><br><span class="line">Result: 0</span><br></pre></td></tr></table></figure><h4 id="创建用户自定义异常"><a href="#创建用户自定义异常" class="headerlink" title="创建用户自定义异常"></a>创建用户自定义异常</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UserDefinedException</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">TestTemperature</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Temperature temp = <span class="keyword">new</span> Temperature();</span><br><span class="line">         <span class="keyword">try</span></span><br><span class="line">         &#123;</span><br><span class="line">            temp.showTemp();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span>(TempIsZeroException e)</span><br><span class="line">         &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TempIsZeroException: &#123;0&#125;&quot;</span>, e.Message);</span><br><span class="line">         &#125;</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempIsZeroException</span>: <span class="title">ApplicationException</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TempIsZeroException</span>(<span class="params"><span class="built_in">string</span> message</span>): <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Temperature</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">int</span> temperature = <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTemp</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>(temperature == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">throw</span> (<span class="keyword">new</span> TempIsZeroException(<span class="string">&quot;Zero Temperature found&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Temperature: &#123;0&#125;&quot;</span>, temperature);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TempIsZeroException: Zero Temperature found</span><br></pre></td></tr></table></figure><h3 id="文件的输入与输出"><a href="#文件的输入与输出" class="headerlink" title="文件的输入与输出"></a>文件的输入与输出</h3><h4 id="定义-9"><a href="#定义-9" class="headerlink" title="定义"></a>定义</h4><p>一个存储在磁盘中带有指定名称和目录路径的数据集合</p><p>当打开文件进行读写时，它变成一个 <strong>流</strong>，从根本上说，流是通过通信路径传递的字节序列</p><p>两个主要的流：<strong>输入流</strong> 和 <strong>输出流</strong>。</p><p><strong>输入流</strong>用于从文件读取数据（读操作）</p><p><strong>输出流</strong>用于向文件写入数据（写操作）</p><table><thead><tr><th>I&#x2F;O类</th><th>描述</th></tr></thead><tbody><tr><td>BinaryReader</td><td>从二进制流读取原始数据。</td></tr><tr><td>BinaryWriter</td><td>以二进制格式写入原始数据。</td></tr><tr><td>BufferedStream</td><td>字节流的临时存储。</td></tr><tr><td>Directory</td><td>有助于操作目录结构。</td></tr><tr><td>DirectoryInfo</td><td>用于对目录执行操作。</td></tr><tr><td>DriveInfo</td><td>提供驱动器的信息。</td></tr><tr><td>File</td><td>有助于处理文件。</td></tr><tr><td>FileInfo</td><td>用于对文件执行操作。</td></tr><tr><td>FileStream</td><td>用于文件中任何位置的读写。</td></tr><tr><td>MemoryStream</td><td>用于随机访问存储在内存中的数据流。</td></tr><tr><td>Path</td><td>对路径信息执行操作。</td></tr><tr><td>StreamReader</td><td>用于从字节流中读取字符。</td></tr><tr><td>StreamWriter</td><td>用于向一个流中写入字符。</td></tr><tr><td>StringReader</td><td>用于读取字符串缓冲区。</td></tr><tr><td>StringWriter</td><td>用于写入字符串缓冲区。</td></tr></tbody></table><h4 id="FileStream类"><a href="#FileStream类" class="headerlink" title="FileStream类"></a>FileStream类</h4><p>创建一个 <strong>FileStream</strong> 对象来创建一个新的文件，或打开一个已有的文件</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileStream &lt;object_name&gt; = <span class="keyword">new</span> FileStream( &lt;file_name&gt;,</span><br><span class="line">&lt;FileMode Enumerator&gt;, &lt;FileAccess Enumerator&gt;, &lt;FileShare Enumerator&gt;);</span><br></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>FileMode：枚举定义了各种打开文件的方法</p><ul><li><strong>Append</strong>：打开一个已有的文件，并将光标放置在文件的末尾。如果文件不存在，则创建文件。</li><li><strong>Create</strong>：创建一个新的文件。如果文件已存在，则删除旧文件，然后创建新文件。</li><li><strong>CreateNew</strong>：指定操作系统应创建一个新的文件。如果文件已存在，则抛出异常。</li><li><strong>Open</strong>：打开一个已有的文件。如果文件不存在，则抛出异常。</li><li><strong>OpenOrCreate</strong>：指定操作系统应打开一个已有的文件。如果文件不存在，则用指定的名称创建一个新的文件打开。</li><li><strong>Truncate</strong>：打开一个已有的文件，文件一旦打开，就将被截断为零字节大小。然后我们可以向文件写入全新的数据，但是保留文件的初始创建日期。如果文件不存在，则抛出异常。</li></ul><p>FileAccess：枚举的成员有：<strong>Read</strong>、<strong>ReadWrite</strong> 和 <strong>Write</strong>。</p><p>FileShare</p><ul><li><strong>Inheritable</strong>：允许文件句柄可由子进程继承。Win32 不直接支持此功能。</li><li><strong>None</strong>：谢绝共享当前文件。文件关闭前，打开该文件的任何请求（由此进程或另一进程发出的请求）都将失败。</li><li><strong>Read</strong>：允许随后打开文件读取。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取的请求（由此进程或另一进程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。</li><li><strong>ReadWrite</strong>：允许随后打开文件读取或写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取或写入的请求（由此进程或另一进程发出）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。</li><li><strong>Write</strong>：允许随后打开文件写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行写入的请求（由此进程或另一进过程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。</li><li><strong>Delete</strong>：允许随后删除文件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2023/05/07/2023-5-7-%E7%AE%97%E6%B3%95/"/>
      <url>/2023/05/07/2023-5-7-%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="1-堆排序"><a href="#1-堆排序" class="headerlink" title="1.堆排序"></a>1.堆排序</h4><h5 id="手写一个堆"><a href="#手写一个堆" class="headerlink" title="手写一个堆"></a>手写一个堆</h5><p>假设size表示堆的大小，heap表示当前堆</p><p>①插入一个数：heap[++size]&#x3D;x;up(size);</p><p>②求集合中的最小值:heap[1];</p><p>③删除最小值:heap[1]&#x3D;heap[size];size–;down(1);</p><p>④删除任意一个元素:heap[k]&#x3D;heap[size];size–;down(k);up(k);</p><p>⑤修改任意一个元素heap[k]&#x3D;x;down(k);up(k);</p><h5 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h5><p>一棵完全二叉树，除了最后一层一层结点，上面所有结点都是满的且不存在空的情况，最后一层结点从左到右排列。</p><h5 id="小根堆"><a href="#小根堆" class="headerlink" title="小根堆"></a>小根堆</h5><p>每个点的值都是小于等于左右儿子的值，因此根节点一定是最小值</p><h5 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h5><p>用一维数组存，一号点为根节点，结点x的左儿子的下标是2x，右儿子的下标是2x+1</p><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><p>down(x):如果一个值变大则下移</p><p>up(x)：如果一个值变小则上移</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#创建堆，时间复杂度为<span class="built_in">O</span>(n)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n/<span class="number">2</span>;i;i--)<span class="built_in">down</span>(i);</span><br><span class="line"><span class="meta">#down操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=u;#最小值的下标</span><br><span class="line">    <span class="keyword">if</span>(u*<span class="number">2</span>&lt;=size&amp;&amp;h[u*<span class="number">2</span>]&lt;h[t])t=u*<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(u*<span class="number">2</span>+<span class="number">1</span>&lt;=size&amp;&amp;h[u*<span class="number">2</span>+<span class="number">1</span>]&lt;h[t])t=u*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">    #此时t是最小值的下标</span><br><span class="line">    <span class="keyword">if</span>(u!=t)&#123;#根节点不是最小值</span><br><span class="line">        <span class="built_in">swap</span>(h[u],h[t]);</span><br><span class="line">        <span class="built_in">down</span>(t)</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2023/04/23/2023-4-21-%E8%AE%A1%E7%BB%84/"/>
      <url>/2023/04/23/2023-4-21-%E8%AE%A1%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h2><h3 id="计算机的发展史"><a href="#计算机的发展史" class="headerlink" title="计算机的发展史"></a>计算机的发展史</h3><p>世界上第一台电子计算机<strong>ENIAC</strong>（1946）</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301253663.png" alt="image-20230530125301506"></p><h3 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h3><p>计算机系统包括硬件和软件，其中软件又分为系统软件和应用软件</p><h4 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h4><p>管理整个计算机系统</p><ul><li>语言处理系统 汇编程序 编译程序 解释程序</li><li>操作系统  DOS、UNIX、Windows、Linux、Kylin Linux</li><li>服务性程序 装配 调试 诊断 排错</li><li>数据库管理系统 数据库和数据库管理软件</li><li>网络软件</li></ul><h4 id="应用软件"><a href="#应用软件" class="headerlink" title="应用软件"></a>应用软件</h4><p>按任务需要编制成的各种程序</p><h4 id="软件发展的特点"><a href="#软件发展的特点" class="headerlink" title="软件发展的特点"></a>软件发展的特点</h4><ul><li>开发周期长</li><li>制作成本昂贵</li><li>检测软件产品质量的特殊性</li></ul><h3 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h3><h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4><p>高级语言   虚拟机器M3   用编译程序翻译成汇编语言程序</p><p>汇编语言   虚拟机器M2   用汇编程序翻译成机器语言程序</p><p>操作系统   虚拟机器   用机器语言解释操作系统</p><hr><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><p>机器语言   实际机器M1   用微指令解释机器指令</p><p>微指令系统    微程序机器M0   由硬件直接执行微指令</p><h3 id="计算机的基本组成"><a href="#计算机的基本组成" class="headerlink" title="计算机的基本组成"></a>计算机的基本组成</h3><h4 id="冯诺依曼计算机的特点"><a href="#冯诺依曼计算机的特点" class="headerlink" title="冯诺依曼计算机的特点"></a>冯诺依曼计算机的特点</h4><ol><li>计算机由五大部件组成</li><li>指令和数据以同等地位存于存储器，可按地址寻访</li><li>指令和数据用二进制表示</li><li>指令由操作码和地址码组成</li><li>存储程序</li><li>以运算器为中心</li></ol><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><h4 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291454669.png" alt="image-20230529145413548"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306131405299.png" alt="image-20230613140501209"></p><p>存储体-存储单元-存储元件</p><h5 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h5><p>存放一串二进制代码</p><h5 id="存储字"><a href="#存储字" class="headerlink" title="存储字"></a>存储字</h5><p>存储单元中二进制代码的组合</p><h5 id="存储字长"><a href="#存储字长" class="headerlink" title="存储字长"></a>存储字长</h5><p>存储单元中二进制代码的位数</p><p>每个存储单元赋予一个地址</p><p>按地址寻访</p><h5 id="MAR"><a href="#MAR" class="headerlink" title="MAR"></a>MAR</h5><p>存储器地址寄存器</p><p>反映存储单元个数</p><h5 id="MDR"><a href="#MDR" class="headerlink" title="MDR"></a>MDR</h5><p>存储器数据寄存器</p><p>反映存储字长</p><h4 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232223531.png" alt="image-20230423222300470"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232217818.png" alt="image-20230423221751690"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306131402393.png" alt="image-20230613140253327"></p><p>主存-辅存：实现虚拟存储系统，解决了主存容量不够的问题</p><p>Cache-主存：解决了主存和CPU速度不匹配的问题</p><h4 id="存储器的分类"><a href="#存储器的分类" class="headerlink" title="存储器的分类"></a>存储器的分类</h4><h5 id="按层次"><a href="#按层次" class="headerlink" title="按层次"></a>按层次<img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232229335.png" alt="image-20230423222924284"></h5><h5 id="按存储介质"><a href="#按存储介质" class="headerlink" title="按存储介质"></a>按存储介质</h5><p>1.半导体存储器：以半导体器件存储信息，读写速度较快，如主存、Cache</p><p>2.磁表面存储器：以磁性材料存储信息，如磁盘、磁带</p><p>3.光存储器：以光介质存储信息，如DVD、VCD</p><h5 id="存取方式"><a href="#存取方式" class="headerlink" title="存取方式"></a>存取方式</h5><p>1.随机存取存储器（Random Access Memory，RAM):读写任何一个存储单元所需时间都相同，与存储单元所在物理位置无关，如内存条</p><p>2.顺序存取存储器（Sequential Access Memory，SAM):读写一个存储单元所需时间取决于存储单元所在的物理位置，如复读机、录音机</p><p>3.直接存取存储器（Direct Access Memory，DAM):既有随机存取存储器特性，也有顺序存取存储器特性。先直接选取信息所在区域，然后顺序方式存取，速度比SAM快一些，比RAM慢一些，如机械硬盘也就是磁盘</p><p>4.相联存储器（Associative Memory），即可以按内容访问的存储器（Content Addressed Memory，CAM）可以按照内容检索到存储位置进行读写，“快表”就是一种相联存储器</p><p>串行访问存储器：读写某个存储单元所需时间与存储单元的物理位置有关，如SAM，DAM</p><h5 id="信息的可更改性"><a href="#信息的可更改性" class="headerlink" title="信息的可更改性"></a>信息的可更改性</h5><p>1.读写存储器（Read&#x2F;Write Memory):即可读，也可写（如：磁盘、内存、Cache）</p><p>2.只读存储器（Read Only Memory）：只能读，不能写（如实体音乐专辑通常采用CD-ROM，实体电影采用蓝光光碟，BIOS通常写在ROM中）</p><h5 id="信息的可保存性"><a href="#信息的可保存性" class="headerlink" title="信息的可保存性"></a>信息的可保存性</h5><p>1.易失性存储器：断电后，存储信息消失的存储器（主存、Cache）</p><p>2.非易失性存储器：存储信息依然保持的存储器（磁盘、光盘）</p><p>破坏性读出：信息读出后，原存储信息被破坏（DRAM芯片，读出数据后要进行重写）</p><p>非破坏性读出：信息读出后，原存储信息不被破坏（SRAM芯片，磁盘、光盘）</p><h5 id="按作用分类"><a href="#按作用分类" class="headerlink" title="按作用分类"></a>按作用分类</h5><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306131350350.png" alt="image-20230613135009179"></p><h4 id="存储器的性能指标"><a href="#存储器的性能指标" class="headerlink" title="存储器的性能指标"></a>存储器的性能指标</h4><p>1.存储容量：存储字数×字长（如1M×8位）（MDR位数反映存储字长）</p><p>2.单位成本：每位价格&#x3D;总成本&#x2F;总容量</p><p>3.存储速度：数据传输率&#x3D;数据的宽度&#x2F;存储周期（数据的宽度即存储字长）</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232300118.png" alt="image-20230423230020043"></p><h4 id="主存和CPU的联系"><a href="#主存和CPU的联系" class="headerlink" title="主存和CPU的联系"></a>主存和CPU的联系</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306131407299.png" alt="image-20230613140741229"></p><h4 id="主存中存储单元地址分配"><a href="#主存中存储单元地址分配" class="headerlink" title="主存中存储单元地址分配"></a>主存中存储单元地址分配</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306131413113.png" alt="image-20230613141304002"></p><h4 id="主存的技术指标"><a href="#主存的技术指标" class="headerlink" title="主存的技术指标"></a>主存的技术指标</h4><p>存储容量：主存存放二进制代码的总位数</p><p>存储速度：</p><ul><li>存储时间：存储器的访问时间：读出&#x2F;写入时间</li><li>存取周期：连续两次独立的存储器操作：（读或写)所需的最小间隔时间</li></ul><p>存储器的带宽：位&#x2F;秒</p><h4 id="半导体存储芯片的译码驱动方式"><a href="#半导体存储芯片的译码驱动方式" class="headerlink" title="半导体存储芯片的译码驱动方式"></a>半导体存储芯片的译码驱动方式</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306131434056.png" alt="image-20230613143444970"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306131437210.png" alt="image-20230613143703094"></p><h3 id="主存储器的基本组成"><a href="#主存储器的基本组成" class="headerlink" title="主存储器的基本组成"></a>主存储器的基本组成</h3><h4 id="基本的半导体元件及原理"><a href="#基本的半导体元件及原理" class="headerlink" title="基本的半导体元件及原理"></a>基本的半导体元件及原理</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232307621.png" alt="image-20230423230748503"></p><h4 id="存储器芯片的基本原理"><a href="#存储器芯片的基本原理" class="headerlink" title="存储器芯片的基本原理"></a>存储器芯片的基本原理</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232313063.png" alt="image-20230423231326934"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306131423879.png" alt="image-20230613142345779"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306131428371.png" alt="image-20230613142830251"></p><h4 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304232324235.png" alt="image-20230423232424137"></p><h3 id="DRAM和SRAM"><a href="#DRAM和SRAM" class="headerlink" title="DRAM和SRAM"></a>DRAM和SRAM</h3><p>DRAM（动态RAM）：Dynamic Random Access Memory，用于主存</p><p>SRAM（静态RAM）：Static Random Access Memory，用于Cache</p><p>核心区别：存储元不一样</p><p>DRAM芯片：使用栅极电容存储信息</p><p>SRAM芯片：使用双稳态触发器存储信息</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306131443615.png" alt="image-20230613144338505"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202306131459244.png" alt="image-20230613145923126"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241219598.png" alt="image-20230424121904352"></p><p>由于电容内的电荷只能维持2ms。即便不断电，2ms后信息也会消失，因此2ms内必须“刷新”一次（给电容充电）</p><h4 id="DRAM的刷新"><a href="#DRAM的刷新" class="headerlink" title="DRAM的刷新"></a>DRAM的刷新</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241539588.png" alt="image-20230424153945407"></p><h4 id="DRAM和SRAM的对比"><a href="#DRAM和SRAM的对比" class="headerlink" title="DRAM和SRAM的对比"></a>DRAM和SRAM的对比</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241542807.png" alt="image-20230424154224651"></p><h3 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h3><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304241548631.png" alt="image-20230424154845459"></p><p>主板上的BIOS芯片（ROM）存储了“自举装入程序”，负责引导装入操作系统（开机）。根据程序，CPU指挥IO系统把辅存中存储的操作系统的相关数据放到主存，引导开机。</p><h3 id="主存与CPU的连接"><a href="#主存与CPU的连接" class="headerlink" title="主存与CPU的连接"></a>主存与CPU的连接</h3><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304251622653.png" alt="image-20230425162218518"></p><h3 id="双端口RAM和多模块存储器"><a href="#双端口RAM和多模块存储器" class="headerlink" title="双端口RAM和多模块存储器"></a>双端口RAM和多模块存储器</h3><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304261041560.png" alt="image-20230426104127971"></p><h3 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h3><h4 id="基本组成-1"><a href="#基本组成-1" class="headerlink" title="基本组成"></a>基本组成</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291508871.png" alt="image-20230529150843806"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291518707.png" alt="image-20230529151806640"></p><p>、</p><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><h4 id="基本组成-2"><a href="#基本组成-2" class="headerlink" title="基本组成"></a>基本组成</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305291538254.png" alt="image-20230529153834194"></p><p>完成一条指令</p><ul><li>取指令：<strong>PC</strong>（程序计数器）存放当前欲执行指令的地址，具有计数功能（PC）+1-&gt;PC</li><li>分析指令：<strong>IR</strong>（指令寄存器）存放当前欲执行的指令</li><li>执行指令:<strong>CU</strong></li></ul><h3 id="计算机硬件的主要技术指标"><a href="#计算机硬件的主要技术指标" class="headerlink" title="计算机硬件的主要技术指标"></a>计算机硬件的主要技术指标</h3><h4 id="机器字长"><a href="#机器字长" class="headerlink" title="机器字长"></a>机器字长</h4><p><strong>CPU</strong>一次能处理数据位数与<strong>CPU</strong>中的寄存器位数有关</p><h4 id="运算速度"><a href="#运算速度" class="headerlink" title="运算速度"></a>运算速度</h4><ul><li>主频</li><li>核数，每个核支持的线程数</li><li>吉普森法</li><li>CPI：执行一条指令所需时钟周期数</li><li>MIPS：每秒执行百万条指令</li><li>FLOPS：每秒浮点运算次数</li></ul><h4 id="存储容量"><a href="#存储容量" class="headerlink" title="存储容量"></a>存储容量</h4><p>存放二进制信息的总位数</p><h5 id="主存容量"><a href="#主存容量" class="headerlink" title="主存容量"></a>主存容量</h5><ul><li>存储单元个数×存储字长</li><li>字节数</li></ul><h5 id="辅存容量"><a href="#辅存容量" class="headerlink" title="辅存容量"></a>辅存容量</h5><p>字节数</p><h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>总线是连接各个部件的信息传输线，是各个部件共享的的传输介质</p><h4 id="信息的传送"><a href="#信息的传送" class="headerlink" title="信息的传送"></a>信息的传送</h4><p>串行：传输数据一位一位传输，传输距离比较长</p><p>并行：传输数据多位传输，需要多根总线，传输距离比较短</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>以存储器为中心的双总线结构框图</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301339464.png" alt="image-20230530133908385"></p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="片内总线"><a href="#片内总线" class="headerlink" title="片内总线"></a>片内总线</h5><p>芯片内部的总线</p><h5 id="系统总线"><a href="#系统总线" class="headerlink" title="系统总线"></a>系统总线</h5><p>计算机各部件之间的信息传输线</p><ul><li>数据总线：双向，与机器字长、存储字长有关</li><li>地址总线：单向，与存储地址、I&#x2F;O地址有关</li><li>控制总线：有出 有入</li></ul><p>有出：存储器读，存储器写，总线允许、中断确认</p><p>有入：中断请求、总线请求</p><h5 id="通信总线"><a href="#通信总线" class="headerlink" title="通信总线"></a>通信总线</h5><p>用于计算机系统之间或计算机系统与其他系统（如控制仪表、移动通信）之间的通信</p><p>按传输方式分为两类</p><ul><li>串行通信总线</li><li>并行通信总线</li></ul><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>机械特性：尺寸、形状、管脚数及排列顺序</p><p>电气特性：传输方向和有效的电平范围</p><p>功能特性：每根传输线的功能</p><ul><li>地址</li><li>数据</li><li>控制</li></ul><p>时间特性：信号的时序关系</p><h4 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h4><ol><li>总线宽度：数据线的根数</li><li>标准传输率：每秒传输的最大字节数（MBps）</li><li>时钟同步&#x2F;异步：同步、不同步</li><li>总线复用：地址线与数据线复用</li><li>信号线数：地址线、数据线和控制线的总和</li><li>总线控制方式：突发、自动、仲裁、逻辑、计数</li><li>其他指标:负载能力</li></ol><h4 id="总线标准"><a href="#总线标准" class="headerlink" title="总线标准"></a>总线标准</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301356355.png" alt="image-20230530135654251"></p><h4 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h4><h5 id="单总线结构"><a href="#单总线结构" class="headerlink" title="单总线结构"></a>单总线结构</h5><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301400732.png" alt="image-20230530140038637"></p><h5 id="多总线结构"><a href="#多总线结构" class="headerlink" title="多总线结构"></a>多总线结构</h5><p>双总线结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301401336.png" alt="image-20230530140137230"></p><p>三总线结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301403921.png" alt="image-20230530140308828"></p><p>另一种三总线结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301404412.png" alt="image-20230530140427320"></p><p>四总线结构</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301406060.png" alt="image-20230530140626965"></p><h4 id="总线控制"><a href="#总线控制" class="headerlink" title="总线控制"></a>总线控制</h4><h5 id="总线判优控制"><a href="#总线判优控制" class="headerlink" title="总线判优控制"></a>总线判优控制</h5><h6 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h6><p>主设备（模块）对总线有控制权</p><p>从设备（模块）响应从主设备发来的总线命令</p><h6 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h6><ul><li>集中式</li><li>分布式</li></ul><h5 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h5><ul><li>链式查询</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301415758.png" alt="image-20230530141517661"></p><p>缺点：优先级事先确定，与位置有关，对电路故障敏感</p><p>优点：结构简单，增加设备很容易，优先级算法简单，可靠性设计容易实现，速度慢</p><p>应用：微型计算机、嵌入式系统</p><ul><li>计数器定时查询</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301418371.png" alt="image-20230530141834281"></p><p>优点：优先级确定灵活</p><p>缺点：速度较慢</p><ul><li>独立请求方式</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301423882.png" alt="image-20230530142337784"></p><h5 id="总线通信控制"><a href="#总线通信控制" class="headerlink" title="总线通信控制"></a>总线通信控制</h5><h6 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h6><p>解决通信双方协调配合问题</p><h6 id="总线传输周期"><a href="#总线传输周期" class="headerlink" title="总线传输周期"></a>总线传输周期</h6><ul><li>申请分配阶段：主模块申请，总线仲裁决定</li><li>寻址阶段：主模块向从模块给出地址和命令</li><li>传数阶段：主模块和从模块交换数据</li><li>结束阶段：主从模块撤销有关信息</li></ul><h4 id="总线通信的四种方式"><a href="#总线通信的四种方式" class="headerlink" title="总线通信的四种方式"></a>总线通信的四种方式</h4><ul><li>同步通信：由统一时标控制数据传送，应用于总线长度比较短，各个模块存取时间比较一致</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301529660.png" alt="image-20230530152933567"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301530248.png" alt="image-20230530153004164"></p><ul><li>异步通信：采用应答方式，没有公共时钟标准</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301534669.png" alt="image-20230530153408573"></p><ul><li>半同步通信：同步、异步结合</li></ul><p>同步：发送方用系统时钟前沿发信号、接收方用系统时钟后沿判断、识别</p><p>异步：允许不同速度的模块和谐工作，增加一条“等待”响应信号wait</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301543480.png" alt="image-20230530154328379"></p><h5 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h5><p>一个总线传输周期（以输入数据为例）</p><p>主模块发地址、命令 占用总线</p><p>从模块准备数据 不占用总线 总线空闲</p><p>从模块向主模块发数据 占用总线</p><ul><li>分离式通信：充分挖掘系统总线每个瞬间的潜力</li></ul><p>一个总线周期</p><ul><li>子周期1：主模块申请占用总线，使用完后即放弃总线的使用权</li><li>子周期2：从模块申请占用总线，将各种信息送至总线上</li></ul><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202305301554087.png" alt="image-20230530155439004"></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编辑器</title>
      <link href="/2023/04/20/2023-4-20-%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2023/04/20/2023-4-20-%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="编辑器的学习"><a href="#编辑器的学习" class="headerlink" title="编辑器的学习"></a>编辑器的学习</h2><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><h4 id="设置自动保存"><a href="#设置自动保存" class="headerlink" title="设置自动保存"></a>设置自动保存</h4><p>1.打开vscode编辑器，点击左下角设置图标（齿轮形状），点击settings</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304202154534.png" alt="image-20230420215411474"></p><p>2.在用户设置窗口中搜索”auto save”，将“Files: Auto Save”设置为“afterDelay”，那么可以指定等待时间。例如，如果将“afterDelay”设置为5000，则表示编辑器将等待5秒钟后自动保存未保存的更改。</p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304202155440.png" alt="image-20230420215546371"></p>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
          <category> vscode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编辑器</title>
      <link href="/2023/04/20/2023-5-29-%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2023/04/20/2023-5-29-%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="编辑器的学习"><a href="#编辑器的学习" class="headerlink" title="编辑器的学习"></a>编辑器的学习</h2><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li>本页查找：Ctrl+F</li><li>查找和替换：Ctrl+R</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
          <category> idea </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM的学习</title>
      <link href="/2023/04/20/2023-4-20-SSM/"/>
      <url>/2023/04/20/2023-4-20-SSM/</url>
      
        <content type="html"><![CDATA[<h2 id="SSM的学习"><a href="#SSM的学习" class="headerlink" title="SSM的学习"></a>SSM的学习</h2><h3 id="spingboot整合ssm"><a href="#spingboot整合ssm" class="headerlink" title="spingboot整合ssm"></a>spingboot整合ssm</h3><h4 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/image-20230420202721323.png"></p><h4 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h4><p>错误通常出现在 Maven 项目中，表示 Maven 在解析依赖关系时无法找到 <code>org.springframework:spring-tx:5.3.7</code> 这个库的版本</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>1.检查你的 Maven 配置文件 pom.xml 中是否有正确的库依赖声明，并且版本号是否正确。</p><p>比如我的项目对应的boot版本类型是2.4.5，Mybatis版本类型是2.2.0</p><p>2.确保你的 Internet 连接正常，并且可以访问 Maven 的仓库</p><h3 id="编写测试方法对查询功能进行测试"><a href="#编写测试方法对查询功能进行测试" class="headerlink" title="编写测试方法对查询功能进行测试"></a>编写测试方法对查询功能进行测试</h3><h4 id="遇到问题-1"><a href="#遇到问题-1" class="headerlink" title="遇到问题"></a>遇到问题</h4><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304212256706.png" alt="image-20230421225606540"></p><p><img src="https://cdn.staticaly.com/gh/pigWzq/markdown_pic@main/2023/4/202304212257630.png" alt="image-20230421225720541"></p><h4 id="分析问题-1"><a href="#分析问题-1" class="headerlink" title="分析问题"></a>分析问题</h4><p>关于Spring MVC配置的异常。提示信息中提到了”No ServletContext set”，表明在执行WebMvcConfigurationSupport类中的resourceHandlerMapping方法时，无法获取到ServletContext对象，从而导致了异常</p><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><p>注释掉@EnableWebMvc ，具体原因未知，有待探索</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三篇文章</title>
      <link href="/2023/04/10/2023-4-13-C/"/>
      <url>/2023/04/10/2023-4-13-C/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第三篇文章"><a href="#这是我的第三篇文章" class="headerlink" title="这是我的第三篇文章"></a>这是我的第三篇文章</h2><p>你的sql语句打印出来看长啥样了吗没有，但是我测试过了没问题，问题就是我不知道怎么去出结果集里面的数据，那个循环会取出数据库里面所有的数据，你测试过程给我看，这样测试的？我打印出来了测试用单元测试，你这样测试多慢？哼，找到就行了呗，习惯，现在用junit。你写单元测试，这和单元测试有什么关系，养成习惯，规范一点，能不能先解决问题，来不及了，来得及，你不是为了完成作业，哼</p><p>你测试dao看service干啥，我看看咋了</p><p>你看，他老是给我打出所有，而且还把我id给改了，你这样看得舒服吗嗯，一串信息放在一起，你</p><p>胃痛，今晚就不应该吃那个冰淇淋，是你早上吃的太少了，我吃了两个为啥我不疼，好痛下次让你更疼</p><p>为啥有的有# 有的没有，不知道看你哪些写错了</p><p>你有没有想过为啥你的sql是灰色的，不知道移上去看看，IDEA功能很强大</p><p>我知道这个，但是我不知道咋用</p><p>好了，现在错误更多了，快睡觉吧一招回到解放前，我本来不报错了，哈哈哈</p><p>ctrl+f 搜索</p><p>junit测试：</p><ol><li>选择要测试的将光标移上去，然后按Alt+enter打开选项，选择要测试的方法，可以全选，</li><li>要测试哪个方法，先看看这个方法里面有哪些参数，然后创建对象比如GoodDaoImpl对象，调用这个方法，把参数传进去进行测试</li><li>一个一个set太麻烦了，可以使用插件：getAllsetter，使用方法：光标放到对象上面，然后按alt+enter，generate all setter with no </li><li>得到结果，不要直接使用sout输出，先List&lt;T&gt; goods &#x3D;…然后再 print一条一条显示goodsList.forEach(System.out::println);</li></ol><p>断点调试</p><ol><li>在你想要程序一步一步走的地方打上断点，</li><li>然后用调试方式运行测试</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/04/10/2023-4-13-Java/"/>
      <url>/2023/04/10/2023-4-13-Java/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二篇文章</title>
      <link href="/2023/04/10/2023-4-13-Hexo/"/>
      <url>/2023/04/10/2023-4-13-Hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第二篇文章"><a href="#这是我的第二篇文章" class="headerlink" title="这是我的第二篇文章"></a>这是我的第二篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四篇文章</title>
      <link href="/2023/04/10/2023-4-13-Python/"/>
      <url>/2023/04/10/2023-4-13-Python/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第四篇文章"><a href="#这是我的第四篇文章" class="headerlink" title="这是我的第四篇文章"></a>这是我的第四篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><div id="gitZone"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;}#page-header {    background: transparent !important;}/* 白天模式遮罩透明 */#footer::before {    background: transparent !important;}#page-header::before {    background: transparent !important;}/* 夜间模式遮罩透明 */[data-theme="dark"] #footer::before {    background: transparent !important;}[data-theme="dark"] #page-header::before {    background: transparent !important;}/* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {    background: #1e1e1e;    color: antiquewhite;}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {    background: #3ecdf1;    color: #f2f2f2;}@font-face {    /* 为载入的字体取名字(随意) */    font-family: 'YSHST';    /* 字体文件地址(相对或者绝对路径都可以) */    src: url(/font/霞鹜文楷.woff2);    /* 定义加粗样式(加粗多少) */    font-weight: normal;    /* 定义字体样式(斜体/非斜体) */    font-style: normal;    /* 定义显示样式 */    font-display: block;}/* 翻页按钮居中 */#pagination {    width: 100%;    margin: auto;}/* 一级菜单居中 */#nav .menus_items {    position: absolute !important;    width: fit-content !important;    left: 50% !important;    transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {    display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(5) .menus_item_child {    left: -38px;}/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {    animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {    animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {    animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {    animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {    0% {        text-shadow: #5636ed 0 0 15px;    }    12.5% {        text-shadow: #11ee5e 0 0 15px;    }    25% {        text-shadow: #f14747 0 0 15px;    }    37.5% {        text-shadow: #f1a247 0 0 15px;    }    50% {        text-shadow: #f1ee47 0 0 15px;    }    50% {        text-shadow: #b347f1 0 0 15px;    }    62.5% {        text-shadow: #002afa 0 0 15px;    }    75% {        text-shadow: #ed709b 0 0 15px;    }    87.5% {        text-shadow: #39c5bb 0 0 15px;    }    100% {        text-shadow: #5636ed 0 0 15px;    }}@keyframes light_10px {    0% {        text-shadow: #5636ed 0 0 10px;    }    12.5% {        text-shadow: #11ee5e 0 0 10px;    }    25% {        text-shadow: #f14747 0 0 10px;    }    37.5% {        text-shadow: #f1a247 0 0 10px;    }    50% {        text-shadow: #f1ee47 0 0 10px;    }    50% {        text-shadow: #b347f1 0 0 10px;    }    62.5% {        text-shadow: #002afa 0 0 10px;    }    75% {        text-shadow: #ed709b 0 0 10px;    }    87.5% {        text-shadow: #39c5bb 0 0 10px;    }    100% {        text-shadow: #5636ed 0 0 10px;    }}@keyframes light_5px {    0% {        text-shadow: #5636ed 0 0 5px;    }    12.5% {        text-shadow: #11ee5e 0 0 5px;    }    25% {        text-shadow: #f14747 0 0 5px;    }    37.5% {        text-shadow: #f1a247 0 0 15px;    }    50% {        text-shadow: #f1ee47 0 0 5px;    }    50% {        text-shadow: #b347f1 0 0 5px;    }    62.5% {        text-shadow: #002afa 0 0 5px;    }    75% {        text-shadow: #ed709b 0 0 5px;    }    87.5% {        text-shadow: #39c5bb 0 0 5px;    }    100% {        text-shadow: #5636ed 0 0 5px;    }}/* 侧边栏个人信息卡片动态渐变色 */#aside-content>.card-widget.card-info {    background: linear-gradient(-45deg,            #e8d8b9,            #eccec5,            #a3e9eb,            #bdbdf0,            #eec1ea);    box-shadow: 0 0 5px rgb(66, 68, 68);    position: relative;    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}@-moz-keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}@keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content>.card-widget.card-info {    background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content>.card-widget.card-info>#card-info-btn {    background-color: #3eb8be;    border-radius: 8px;}/*菜单图标大小*/svg.menu_icon {    width: 1.28em;    height: 1.28em;    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}/*社交图标大小*/svg.social_icon {    width: 1.20em;    height: 1.20em;    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() { window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame; var n, e, i, h, t = .05, s = document.getElementById("universe"), o = !0, a = "180,184,240", r = "226,225,142", d = "226,225,224", c = []; function f() { n = window.innerWidth, e = window.innerHeight, i = .216 * n, s.setAttribute("width", n), s.setAttribute("height", e) } function u() { h.clearRect(0, 0, n, e); for (var t = c.length, i = 0; i < t; i++) { var s = c[i]; s.move(), s.fadeIn(), s.fadeOut(), s.draw() } } function y() { this.reset = function () { this.giant = m(3), this.comet = !this.giant && !o && m(10), this.x = l(0, n - 10), this.y = l(0, e), this.r = l(1.1, 2.6), this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t, this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120), this.fadingOut = null, this.fadingIn = !0, this.opacity = 0, this.opacityTresh = l(.2, 1 - .4 * (this.comet + 1 - 1)), this.do = l(5e-4, .002) + .001 * (this.comet + 1 - 1) }, this.fadeIn = function () { this.fadingIn && (this.fadingIn = !(this.opacity > this.opacityTresh), this.opacity += this.do) }, this.fadeOut = function () { this.fadingOut && (this.fadingOut = !(this.opacity < 0), this.opacity -= this.do / 2, (this.x > n || this.y < 0) && (this.fadingOut = !1, this.reset())) }, this.draw = function () { if (h.beginPath(), this.giant) h.fillStyle = "rgba(" + a + "," + this.opacity + ")", h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1); else if (this.comet) { h.fillStyle = "rgba(" + d + "," + this.opacity + ")", h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1); for (var t = 0; t < 30; t++)h.fillStyle = "rgba(" + d + "," + (this.opacity - this.opacity / 20 * t) + ")", h.rect(this.x - this.dx / 4 * t, this.y - this.dy / 4 * t - 2, 2, 2), h.fill() } else h.fillStyle = "rgba(" + r + "," + this.opacity + ")", h.rect(this.x, this.y, this.r, this.r); h.closePath(), h.fill() }, this.move = function () { this.x += this.dx, this.y += this.dy, !1 === this.fadingOut && this.reset(), (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0) }, setTimeout(function () { o = !1 }, 50) } function m(t) { return Math.floor(1e3 * Math.random()) + 1 < 10 * t } function l(t, i) { return Math.random() * (i - t) + t } f(), window.addEventListener("resize", f, !1), function () { h = s.getContext("2d"); for (var t = 0; t < i; t++)c[t] = new y, c[t].reset(); u() }(), function t() { document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark' && u(), window.requestAnimationFrame(t) }() };dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { now.setTime(now.getTime() + 1e3); var e = new Date("04/010/2023 00:00:00"), t = Math.trunc(234e8 + (now - e) / 1e3 * 17), a = (t / 1496e5).toFixed(6), o = new Date("04/12/2023 00:00:00"), n = (now - o) / 1e3 / 60 / 60 / 24, r = Math.floor(n), i = (now - o) / 1e3 / 60 / 60 - 24 * r, s = Math.floor(i); 1 == String(s).length && (s = "0" + s); var d = (now - o) / 1e3 / 60 - 1440 * r - 60 * s, l = Math.floor(d); 1 == String(l).length && (l = "0" + l); var g = (now - o) / 1e3 - 86400 * r - 3600 * s - 60 * l, b = Math.round(g); 1 == String(b).length && (b = "0" + b); let c = ""; c = s < 18 && s >= 9 ? `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>` : `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = c) } setInterval((() => { createtime() }), 1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe {    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;}]]></content>
      
    </entry>
    
    
  
</search>
